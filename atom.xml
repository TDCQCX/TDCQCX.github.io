<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮生记</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://tdcqcx.github.io/atom.xml" rel="self"/>
  
  <link href="https://tdcqcx.github.io/"/>
  <updated>2025-03-28T05:30:10.120Z</updated>
  <id>https://tdcqcx.github.io/</id>
  
  <author>
    <name>浮生记</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些想说的话</title>
    <link href="https://tdcqcx.github.io/2025/01/08/%E4%B8%80%E4%BA%9B%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/"/>
    <id>https://tdcqcx.github.io/2025/01/08/%E4%B8%80%E4%BA%9B%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/</id>
    <published>2025-01-08T07:29:00.000Z</published>
    <updated>2025-03-28T05:30:10.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="致来到博客的新朋友：你好！"><a href="#致来到博客的新朋友：你好！" class="headerlink" title="致来到博客的新朋友：你好！"></a>致来到博客的新朋友：你好！</h1><blockquote><p>有些路，我们能一个人走得快，却无法一个人走得远。让交友更高效，在折腾中<strong>彼此照亮</strong>，也能在成长的过程中收获更多温暖。<br>人与人的联结，就如同将一座座孤岛连成大陆，每个人都需要光与热，而我们也能<strong>成为彼此的光源</strong>。我想这就是博客的<strong>意义所在</strong><br>———*<em>TDCQCX 写于 <strong>2025年2月26日</strong> *</em></p></blockquote><hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="为什么要搭建博客？"><a href="#为什么要搭建博客？" class="headerlink" title="为什么要搭建博客？"></a>为什么要搭建博客？</h3><blockquote><p>搭建博客，其实最开始的想法很简单，就是想有一个地方可以记录自己的想法，记录自己的成长历程。在后来，我受到很多博客的惠及，他们所分享开发技巧、如何面试和生活经验让我受益匪浅，源自一次偶然，源自一次坚持，源自一次尝试；</p></blockquote><hr><p><strong>而在这里，陌生的朋友，如果恰好你也喜欢编程，喜欢分享，喜欢交流，那么，欢迎来到我的博客。</strong></p><h1 id="博客分类"><a href="#博客分类" class="headerlink" title="博客分类"></a>博客分类</h1><p><strong>我在这里整理博客所发布过的内容，但如果想找到某个东西，欢迎在博客的右上角点击搜索</strong></p><h2 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><ul><li><a href="https://blog.tdcqcx.top/tags/C/">C++ 快速备忘清单</a></li><li><a href="https://blog.tdcqcx.top/tags/java/">Java 快速备忘清单</a></li><li><a href="https://blog.tdcqcx.top/tags/python/">Python 快速备忘清单</a></li><li><a href="https://blog.tdcqcx.top/tags/javascript/">JavaScript 快速备忘清单</a></li><li><a href="https://blog.tdcqcx.top/tags/php/">PHP 快速备忘清单</a></li><li><a href="https://tdcqcx.github.io/tags/html/">HTML</a></li><li><a href="https://tdcqcx.github.io/tags/css/">CSS</a></li><li><a href="https://tdcqcx.github.io/tags/json/">JSON</a></li></ul><h3 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h3><ul><li><a href="https://tdcqcx.github.io/tags/docker/">Docker</a></li><li><a href="https://tdcqcx.github.io/tags/vue2/">Vue2</a></li><li><a href="https://tdcqcx.github.io/tags/vue3/">Vue3</a></li><li><a href="https://tdcqcx.github.io/tags/jquery/">JQuery</a></li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;致来到博客的新朋友：你好！&quot;&gt;&lt;a href=&quot;#致来到博客的新朋友：你好！&quot; class=&quot;headerlink&quot; title=&quot;致来到博客的新朋友：你好！&quot;&gt;&lt;/a&gt;致来到博客的新朋友：你好！&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;有些路，我们能一个人走得快</summary>
      
    
    
    
    <category term="随笔" scheme="https://tdcqcx.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>C 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/c/"/>
    <id>https://tdcqcx.github.io/2025/01/08/c/</id>
    <published>2025-01-08T02:40:26.000Z</published>
    <updated>2025-03-28T05:30:10.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-备忘清单"><a href="#C-备忘清单" class="headerlink" title="C 备忘清单"></a>C 备忘清单</h1><p>提供基本语法和方法的 C 快速参考备忘单。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="hello-c"><a href="#hello-c" class="headerlink" title="hello.c"></a>hello.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>gcc</code> 编译 <code>hello.c</code> 源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o hello hello.c</span><br></pre></td></tr></table></figure><p>运行编译后的二进制文件可执行文件(<code>hello</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./hello</span><br><span class="line"><span class="comment"># 输出 =&gt; Hello World</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myNum = <span class="number">15</span>; <span class="comment">// 定义并初始化变量 myNum</span></span><br><span class="line"><span class="type">int</span> myNum2;     <span class="comment">// 声明变量 myNum2</span></span><br><span class="line">myNum2 = <span class="number">15</span>;    <span class="comment">// 初始化变量 myNum2</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> myNum3 = <span class="number">15</span>; <span class="comment">// 定义并初始化变量 myNum3</span></span><br><span class="line">myNum3 = <span class="number">10</span>;     <span class="comment">// 重新赋值 myNum3</span></span><br></pre></td></tr></table></figure><p>定义不同类型的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义并初始化浮点数变量</span></span><br><span class="line"><span class="type">float</span> myFloatNum = <span class="number">5.99</span>;</span><br><span class="line"><span class="comment">// 定义并初始化字符变量</span></span><br><span class="line"><span class="type">char</span> myLetter = <span class="string">&#x27;D&#x27;</span>;</span><br></pre></td></tr></table></figure><p>变量相加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> sum = x + y; <span class="comment">// 变量相加</span></span><br></pre></td></tr></table></figure><p>声明并初始化多个变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">6</span>, z = <span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> a, b, c = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>仅声明变量不初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="comment">// 未初始化的变量 result 会导致不可预测的结果</span></span><br><span class="line"></span><br><span class="line">result = result + <span class="number">10</span>; <span class="comment">// 错误：未初始化的变量</span></span><br><span class="line"><span class="comment">// 部分编译器会警告未初始化的变量可能导致未定义行为</span></span><br></pre></td></tr></table></figure><h3 id="常量-Constants"><a href="#常量-Constants" class="headerlink" title="常量 Constants"></a>常量 Constants</h3><!--rehype:wrap-class=row-span-2--><p>常量是不能被改变的值，使用常量可以使代码更清晰和安全。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> minutesPerHour = <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>最佳实践</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> BIRTHYEAR = <span class="number">1980</span>;</span><br></pre></td></tr></table></figure><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a><strong>命名规范</strong></h4><!--rehype:style=text-align: left;--><p>常量通常使用全大写字母，单词间用下划线分隔（如 BIRTHYEAR、MAX_LENGTH）。</p><h4 id="数组大小"><a href="#数组大小" class="headerlink" title="数组大小"></a><strong>数组大小</strong></h4><!--rehype:style=text-align: left;--><p>使用 <code>const</code> 定义数组大小，编译器将其作为编译时常量处理。</p><h4 id="define-与-const"><a href="#define-与-const" class="headerlink" title="#define 与 const"></a><strong><code>#define</code> 与 <code>const</code></strong></h4><!--rehype:style=text-align: left;--><ul><li><code>#define</code>：宏常量在预处理阶段替换，不进行类型检查</li><li><code>const</code>：类型安全的常量，编译器可检查类型，推荐使用</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><ul><li><code>const</code> 常量在定义时必须初始化，否则会导致编译错误。</li><li><code>const</code> 常量的值不能被修改，任何尝试修改 <code>const</code> 常量的操作都会导致编译错误。</li><li>使用 <code>const</code> 常量可以提高代码的可读性和可维护性，避免魔法数字的使用。</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>); <span class="comment">// 行内注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   多行注释：</span></span><br><span class="line"><span class="comment">   用于注释跨多行的内容</span></span><br><span class="line"><span class="comment">   注意：多行注释不能嵌套，否则会导致编译错误</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:</p><ul><li>单行注释 <code>//</code> 可以嵌套，如 <code>/////</code>。</li><li>行内注释应避免过长，以免影响代码可读性。</li><li>多行注释不能嵌套，否则会导致编译错误。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是一个多行注释的开始</span></span><br><span class="line"><span class="comment">       /* 嵌套的多行注释，C语言不支持 */</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><!--rehype:style=background:#ff000030;--><h3 id="打印文本"><a href="#打印文本" class="headerlink" title="打印文本"></a>打印文本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I am learning C.&quot;</span>);</span><br><span class="line"><span class="type">int</span> testInteger = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d&quot;</span>, testInteger);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> f = <span class="number">5.99</span>; <span class="comment">// 浮点数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Value = %f&quot;</span>, f);</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> a = <span class="number">0b1010110</span>;  <span class="comment">// 2 进制数字</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">02713</span>;        <span class="comment">// 8 进制数字</span></span><br><span class="line"><span class="type">long</span> c = <span class="number">0X1DAB83</span>;    <span class="comment">// 16 进制数字</span></span><br></pre></td></tr></table></figure><p>变量a和c分别为 <code>short</code> 和 <code>long</code> 型，所以输出必须加上对应的修饰符 <code>h</code> 和 <code>l</code></p><h4 id="以-8-进制形式输出"><a href="#以-8-进制形式输出" class="headerlink" title="以 8 进制形式输出"></a>以 8 进制形式输出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%ho, b=%o, c=%lo\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="comment">// 输出 =&gt; a=126, b=2713, c=7325603</span></span><br></pre></td></tr></table></figure><h4 id="以-10-进制形式输出"><a href="#以-10-进制形式输出" class="headerlink" title="以 10 进制形式输出"></a>以 10 进制形式输出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%hd, b=%d, c=%ld\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="comment">// 输出 =&gt; a=86, b=1483, c=1944451</span></span><br></pre></td></tr></table></figure><h4 id="以-16-进制形式输出（字母小写）"><a href="#以-16-进制形式输出（字母小写）" class="headerlink" title="以 16 进制形式输出（字母小写）"></a>以 16 进制形式输出（字母小写）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%hx, b=%x, c=%lx\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="comment">// 输出 =&gt; a=56, b=5cb, c=1dab83</span></span><br></pre></td></tr></table></figure><h4 id="以-16-进制形式输出（字母大写）"><a href="#以-16-进制形式输出（字母大写）" class="headerlink" title="以 16 进制形式输出（字母大写）"></a>以 16 进制形式输出（字母大写）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%hX, b=%X, c=%lX\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="comment">// 输出 =&gt; a=56, b=5CB, c=1DAB83</span></span><br></pre></td></tr></table></figure><h3 id="控制空格数"><a href="#控制空格数" class="headerlink" title="控制空格数"></a>控制空格数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a1=<span class="number">20</span>, a2=<span class="number">345</span>, a3=<span class="number">700</span>;</span><br><span class="line"><span class="type">int</span> b1=<span class="number">56720</span>, b2=<span class="number">9999</span>, b3=<span class="number">20098</span>;</span><br><span class="line"><span class="type">int</span> c1=<span class="number">233</span>, c2=<span class="number">205</span>, c3=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> d1=<span class="number">34</span>, d2=<span class="number">0</span>, d3=<span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// %-9d: 十进制输出，最少宽度为9，左对齐</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-9d %-9d %-9d\n&quot;</span>, a1, a2, a3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-9d %-9d %-9d\n&quot;</span>, b1, b2, b3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-9d %-9d %-9d\n&quot;</span>, c1, c2, c3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-9d %-9d %-9d\n&quot;</span>, d1, d2, d3);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">20        345       700  </span><br><span class="line">56720     9999      20098</span><br><span class="line">233       205       1    </span><br><span class="line">34        0         23   </span><br></pre></td></tr></table></figure><p>解释：<code>%-9d</code>：<code>d</code> 表示十进制输出，<code>9</code> 表示最少占 9 个字符宽度，<code>-</code> 表示左对齐，不使用 <code>-</code> 则默认右对齐。</p><p>对于整型数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">12345</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%md&quot;</span>, a);</span><br></pre></td></tr></table></figure><ul><li>若 <code>m &lt;=</code> 实际数据宽度，则按实际情况输出。</li><li>若 <code>m &gt;</code> 实际数据宽度，则在左边用空格补齐。</li><li><code>printf(&quot;%0md&quot;, a);</code> 则在左边用 <code>0</code> 补齐。</li></ul><p>对于浮点型数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a = <span class="number">1.2345</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%m.nf&quot;</span>, a);</span><br><span class="line"><span class="comment">// m -- 整个数据宽度，n -- 小数位数</span></span><br></pre></td></tr></table></figure><ul><li>实际小数位数 <code>&gt; n</code>，截去多余小数，注意四舍五入。</li><li>实际小数位数 <code>&lt; n</code>，在小数最后补 <code>0</code>。</li><li>若 <code>m</code> 省略则写作 <code>%.n</code>，整数部分按实际输出，小数部分按以上规则。</li><li>若 <code>m &lt; n+1</code>，自动突破宽度限制，按实际数据输出。</li><li>若 <code>m &gt; n+1</code>，左边补空格。</li></ul><h3 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串 (Strings)"></a>字符串 (Strings)</h3><p>在 C 语言中，字符串是以 <code>\0</code> 结尾的字符数组，而不是一种单独的数据类型。可以通过字符数组来表示字符串。</p><h4 id="定义并打印字符串"><a href="#定义并打印字符串" class="headerlink" title="定义并打印字符串"></a>定义并打印字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greetings[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, greetings);</span><br></pre></td></tr></table></figure><h4 id="访问字符串中的字符"><a href="#访问字符串中的字符" class="headerlink" title="访问字符串中的字符"></a>访问字符串中的字符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greetings[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, greetings[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>访问字符串 <code>greetings</code> 的第一个字符 <code>H</code></p><h4 id="修改字符串中的字符"><a href="#修改字符串中的字符" class="headerlink" title="修改字符串中的字符"></a>修改字符串中的字符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greetings[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">greetings[<span class="number">0</span>] = <span class="string">&#x27;J&#x27;</span>; <span class="comment">// 修改第一个字符为 &#x27;J&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, greetings);</span><br><span class="line"><span class="comment">// 输出 &quot;Jello World!&quot;</span></span><br></pre></td></tr></table></figure><h4 id="另一种创建字符串的方法"><a href="#另一种创建字符串的方法" class="headerlink" title="另一种创建字符串的方法"></a>另一种创建字符串的方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> greetings[] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, greetings);</span><br><span class="line"><span class="comment">// 输出 &quot;Hell&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：C 语言中没有 <code>String</code> 类型，字符串是由字符数组 <code>char[]</code> 表示的，且必须以 <code>\0</code> 结尾以标识字符串的结束。</p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> time = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;再会！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;晚上好！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;晚上好！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> time = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;早上好！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &lt; <span class="number">20</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;再会！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;晚上好！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;晚上好！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> time = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (time &gt; <span class="number">8</span>) &#123;</span><br><span class="line">  <span class="comment">//再嵌套一个if</span></span><br><span class="line">  <span class="keyword">if</span> (time &lt; <span class="number">12</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中午好！&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;中午好！&quot;</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><code>if</code> 语句用于根据条件执行代码块。</li><li><code>else</code> 语句在 <code>if</code> 条件不满足时执行。</li><li><code>else if</code> 语句用于检查多个条件。</li><li>可以嵌套 <code>if</code> 语句以检查多个条件。</li></ul><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符（<code>? :</code>）是一种简洁的条件判断方式，用于根据条件选择表达式的值。由三个部分组成：</p><ul><li>条件表达式</li><li>条件为真时的结果</li><li>条件为假时的结果</li></ul><p>基本语法：<code>(条件) ? 表达式1 : 表达式2;</code><br>如果 <code>条件</code> 为真，则返回 <code>表达式1</code>，否则返回 <code>表达式2</code>。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> time = <span class="number">20</span>;</span><br><span class="line">(time &lt; <span class="number">18</span>) ? <span class="built_in">printf</span>(<span class="string">&quot;再会！&quot;</span>) </span><br><span class="line">            : <span class="built_in">printf</span>(<span class="string">&quot;晚上好！&quot;</span>);</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;晚上好！&quot;</span></span><br></pre></td></tr></table></figure><p>嵌套使用示例（不建议过多嵌套）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> time = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">printf</span>((time &lt; <span class="number">10</span>) ? <span class="string">&quot;早上好！&quot;</span> </span><br><span class="line">          : (time &lt; <span class="number">20</span>) ? <span class="string">&quot;再会！&quot;</span> </span><br><span class="line">                        : <span class="string">&quot;晚上好！&quot;</span>);</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;晚上好！&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> day = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">&quot;周三&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">&quot;周四&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;期待周末&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;周四&quot;</span></span><br></pre></td></tr></table></figure><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><ul><li><code>switch</code> 语句根据表达式的值跳转到匹配的 <code>case</code> 标签。</li><li>匹配到 <code>case</code> 后执行相应代码，并通过 <code>break</code> 跳出 <code>switch</code>。</li><li>如果没有匹配到任何 <code>case</code>，则执行 <code>default</code> 语句（如果存在）。</li></ul><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>switch</code> 表达式可以是整型、字符型和枚举型。</li><li><code>case</code> 后的常量表达式值不能相同。</li><li><code>case</code> 后可以有多个语句，不需要 <code>&#123; &#125;</code> 括起来。</li><li><code>case</code> 和 <code>default</code> 语句的顺序不影响程序执行结果。</li><li><code>break</code> 语句用于结束 <code>switch</code>，如果没有 <code>break</code>，程序会继续执行下一个 <code>case</code>。</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> day = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">&quot;周三&quot;</span>); </span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">&quot;周四&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;期待周末&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;周三周四&quot;</span></span><br></pre></td></tr></table></figure><h3 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li><code>while</code> 循环首先检查条件 <code>i &lt; 5</code> 是否为真。</li><li>如果为真，程序进入循环体，执行打印操作并增加 <code>i</code> 的值。</li><li>循环会继续进行，直到 <code>i</code> 达到 5，此时条件 <code>i &lt; 5</code> 不再为真，循环结束。</li></ul><h4 id="打印-1-到-10-的数字"><a href="#打印-1-到-10-的数字" class="headerlink" title="打印 1 到 10 的数字"></a>打印 1 到 10 的数字</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 1 2 3 4 5 6 7 8 9 10</span></span><br></pre></td></tr></table></figure><h4 id="打印偶数"><a href="#打印偶数" class="headerlink" title="打印偶数"></a>打印偶数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 2 4 6 8 10</span></span><br></pre></td></tr></table></figure><h4 id="无限循环（需手动终止）"><a href="#无限循环（需手动终止）" class="headerlink" title="无限循环（需手动终止）"></a>无限循环（需手动终止）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;无限循环\n&quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">5</span>) <span class="keyword">break</span>; <span class="comment">// 添加条件以退出循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 无限循环 (打印 5 次)</span></span><br></pre></td></tr></table></figure><h3 id="Do-While-循环"><a href="#Do-While-循环" class="headerlink" title="Do&#x2F;While 循环"></a>Do&#x2F;While 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><ul><li><code>do/while</code> 循环至少执行一次循环体，因为条件检查在循环体执行之后进行。</li><li>首先执行 <code>do</code> 中的代码，然后检查条件 <code>i &lt; 5</code> 是否为真。</li><li>如果为真，继续执行循环；如果为假，则退出循环。</li></ul><h4 id="打印从-5-开始的数字，直到条件不满足"><a href="#打印从-5-开始的数字，直到条件不满足" class="headerlink" title="打印从 5 开始的数字，直到条件不满足"></a>打印从 5 开始的数字，直到条件不满足</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);  <span class="comment">// 输出 5</span></span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 输出 -&gt; 5</span></span><br></pre></td></tr></table></figure><h4 id="计算-1-到-10-的和"><a href="#计算-1-到-10-的和" class="headerlink" title="计算 1 到 10 的和"></a>计算 1 到 10 的和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sum: %d\n&quot;</span>, sum);</span><br><span class="line"><span class="comment">// 输出 -&gt; Sum: 55</span></span><br></pre></td></tr></table></figure><h3 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>) &#123;</span><br><span class="line">  循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表达式1：设置初始条件，只执行一次。</li><li>表达式2：循环条件表达式，每次循环前检查。</li><li>表达式3：循环体执行后的调整操作。</li></ul><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>for</code> 语句的三个表达式不是必须的。</li><li>当条件表达式（表达式2）为假时，<code>for</code> 循环结束。</li><li>可以在循环体内使用 <code>break</code>、<code>continue</code>、<code>goto</code> 语句。</li><li>如果表达式2为空，则表示无限循环，如 <code>for(;;)</code> 相当于 <code>while(1)</code>。</li></ul><h4 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h4><ul><li><code>for (i = m; i &lt; n; i++)</code> 从 <code>i = m</code> 开始到 <code>i = n-1</code>，循环 <code>n - m</code> 次。</li><li><code>for (i = m; i &lt;= n; i++)</code> 从 <code>i = m</code> 到 <code>i = n</code>，循环 <code>n - m + 1</code> 次。</li></ul><h3 id="跳出循环-Break-Continue-Goto"><a href="#跳出循环-Break-Continue-Goto" class="headerlink" title="跳出循环 (Break&#x2F;Continue&#x2F;Goto)"></a>跳出循环 (Break&#x2F;Continue&#x2F;Goto)</h3><!--rehype:wrap-class=row-span-3--><h4 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a><code>break</code> 语句</h4><p>跳出当前循环或 <code>switch</code> 语句，执行后续代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 1 2 3</span></span><br></pre></td></tr></table></figure><h4 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a><code>continue</code> 语句</h4><p>跳过当前循环的剩余语句，直接进入下一次循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 1 2 3 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><h4 id="goto-语句"><a href="#goto-语句" class="headerlink" title="goto 语句"></a><code>goto</code> 语句</h4><p>无条件跳转到指定标签位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">goto</span> skip;  <span class="comment">// 跳转到 skip 标签</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">skip:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Exited the loop at i = %d\n&quot;</span>, i);</span><br><span class="line"><span class="comment">// 输出 -&gt; 0 1 2 3 Exited the loop at i = 4</span></span><br></pre></td></tr></table></figure><h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>标签必须在当前函数内定义，命名规则与变量相同。</li><li><code>goto</code> 语句应慎用，避免代码逻辑混乱，通常使用循环或条件语句代替。</li></ul><h4 id="设置数组大小"><a href="#设置数组大小" class="headerlink" title="设置数组大小"></a>设置数组大小</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个由四个整数组成的数组</span></span><br><span class="line"><span class="type">int</span> myNumbers[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">myNumbers[<span class="number">0</span>] = <span class="number">25</span>;</span><br><span class="line">myNumbers[<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">myNumbers[<span class="number">2</span>] = <span class="number">75</span>;</span><br><span class="line">myNumbers[<span class="number">3</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span> &#123;</span> Mon = <span class="number">1</span>, Tues, Wed, Thurs, Fri, Sat, Sun &#125;;</span><br></pre></td></tr></table></figure><p>定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span> <span class="title">a</span>, <span class="title">b</span>, <span class="title">c</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span> &#123;</span> Mon = <span class="number">1</span>, Tues, Wed, Thurs, Fri, Sat, Sun &#125; a, b, c;</span><br></pre></td></tr></table></figure><p>有了枚举变量，就可以把列表中的值赋给它</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span> &#123;</span> Mon = <span class="number">1</span>, Tues, Wed, Thurs, Fri, Sat, Sun &#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span> <span class="title">a</span> =</span> Mon, b = Wed, c = Sat;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span>&#123;</span> Mon = <span class="number">1</span>, Tues, Wed, Thurs, Fri, Sat, Sun &#125; a = Mon, b = Wed, c = Sat;</span><br></pre></td></tr></table></figure><h3 id="枚举示例应用"><a href="#枚举示例应用" class="headerlink" title="枚举示例应用"></a>枚举示例应用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span> &#123;</span>Mon = <span class="number">1</span>, Tues, Wed, Thurs&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(day)&#123;</span><br><span class="line">  <span class="keyword">case</span> Mon:   <span class="built_in">puts</span>(<span class="string">&quot;Monday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Tues:  <span class="built_in">puts</span>(<span class="string">&quot;Tuesday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Wed:   <span class="built_in">puts</span>(<span class="string">&quot;Wednesday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Thurs: <span class="built_in">puts</span>(<span class="string">&quot;Thursday&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:    <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><h4 id="定义和访问数组元素"><a href="#定义和访问数组元素" class="headerlink" title="定义和访问数组元素"></a>定义和访问数组元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myNumbers[] = &#123;<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, myNumbers[<span class="number">0</span>]); <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><h4 id="更改数组元素"><a href="#更改数组元素" class="headerlink" title="更改数组元素"></a>更改数组元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myNumbers[] = &#123;<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>&#125;;</span><br><span class="line">myNumbers[<span class="number">0</span>] = <span class="number">33</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, myNumbers[<span class="number">0</span>]); <span class="comment">// 输出 33</span></span><br></pre></td></tr></table></figure><h4 id="循环遍历数组"><a href="#循环遍历数组" class="headerlink" title="循环遍历数组"></a>循环遍历数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myNumbers[] = &#123;<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, myNumbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; 25 50 75 100</span></span><br></pre></td></tr></table></figure><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个整数变量来存储我们从用户那里得到的数字</span></span><br><span class="line"><span class="type">int</span> myNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求用户输入一个数字</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字: \n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并保存用户输入的号码</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;myNum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出用户输入的数字</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您输入的数字: %d&quot;</span>, myNum);</span><br></pre></td></tr></table></figure><h3 id="用户输入字符串"><a href="#用户输入字符串" class="headerlink" title="用户输入字符串"></a>用户输入字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个字符串</span></span><br><span class="line"><span class="type">char</span> firstName[<span class="number">30</span>];</span><br><span class="line"><span class="comment">// 要求用户输入一些文本</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入您的名字: \n&quot;</span>);</span><br><span class="line"><span class="comment">// 获取并保存文本</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, firstName);</span><br><span class="line"><span class="comment">// 输出文本</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello %s.&quot;</span>, firstName);</span><br></pre></td></tr></table></figure><h3 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h3><p>创建变量时，会为该变量分配一个内存地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myAge = <span class="number">43</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>, &amp;myAge);</span><br><span class="line"><span class="comment">// 输出 myAge 的内存地址，例如：0x7ffe5367e044</span></span><br></pre></td></tr></table></figure><p>要访问变量的内存地址，请使用引用运算符 (<code>&amp;</code>)。</p><h3 id="创建指针"><a href="#创建指针" class="headerlink" title="创建指针"></a>创建指针</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myAge = <span class="number">43</span>;      <span class="comment">// 一个 int 变量</span></span><br><span class="line"><span class="type">int</span> *ptr = &amp;myAge;   <span class="comment">// 创建指向 myAge 的指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, myAge);  <span class="comment">// 输出 myAge 的值 -&gt; 43</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;myAge); <span class="comment">// 输出 myAge 的内存地址，例如：0x7ffe5367e044</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, ptr);    <span class="comment">// 输出指针 ptr 的值（即 myAge 的内存地址）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ptr);   <span class="comment">// 通过指针访问 myAge 的值 -&gt; 43</span></span><br></pre></td></tr></table></figure><h3 id="取消引用"><a href="#取消引用" class="headerlink" title="取消引用"></a>取消引用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myAge = <span class="number">43</span>;     <span class="comment">// 变量声明</span></span><br><span class="line"><span class="type">int</span>* ptr = &amp;myAge;  <span class="comment">// 指针声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考：用指针输出 myAge 的</span></span><br><span class="line"><span class="comment">// 内存地址（0x7ffe5367e044）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, ptr);</span><br><span class="line"><span class="comment">// 取消引用：用指针输出 myAge 的值 (43)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ptr);</span><br></pre></td></tr></table></figure><h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myAge = <span class="number">43</span>;            <span class="comment">// 一个 int 变量</span></span><br><span class="line"><span class="type">int</span>* ptr = &amp;myAge;         <span class="comment">// 名为 ptr 的指针变量，用于存储 myAge 的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, myAge);     <span class="comment">// 输出 myAge (43) 的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;myAge);    <span class="comment">// 输出 myAge 的内存地址（0x7ffe5367e044）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, ptr);       <span class="comment">// 用指针（0x7ffe5367e044）输出myAge的内存地址</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myNum = <span class="number">100</span> + <span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> sum1 = <span class="number">100</span> + <span class="number">50</span>;    <span class="comment">// 150 (100 + 50)</span></span><br><span class="line"><span class="type">int</span> sum2 = sum1 + <span class="number">250</span>;  <span class="comment">// 400 (150 + 250)</span></span><br><span class="line"><span class="type">int</span> sum3 = sum2 + sum2; <span class="comment">// 800 (400 + 400)</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>Operator</th><th>Name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td><td>将两个值相加</td><td><code>x + y</code></td></tr><tr><td><code>-</code></td><td>减</td><td>从另一个值中减去一个值</td><td><code>x - y</code></td></tr><tr><td><code>*</code></td><td>乘</td><td>将两个值相乘</td><td><code>x * y</code></td></tr><tr><td><code>/</code></td><td>除</td><td>将一个值除以另一个</td><td><code>x / y</code></td></tr><tr><td><code>%</code></td><td>取模</td><td>返回除法余数</td><td><code>x % y</code></td></tr><tr><td><code>++</code></td><td>增量</td><td>将变量的值增加 1</td><td><code>++</code></td></tr><tr><td><code>--</code></td><td>乘量</td><td>将变量的值减 1</td><td><code>--x</code></td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>符号</th><th>示例</th><th>如同</th></tr></thead><tbody><tr><td><code>=</code></td><td>x <code>=</code> 5</td><td>x <code>=</code> 5</td></tr><tr><td><code>+=</code></td><td>x <code>+=</code> 3</td><td>x <code>=</code> x <code>+</code> 3</td></tr><tr><td><code>-=</code></td><td>x <code>-=</code> 3</td><td>x <code>=</code> x <code>-</code> 3</td></tr><tr><td><code>*=</code></td><td>x <code>*=</code> 3</td><td>x <code>=</code> x <code>*</code> 3</td></tr><tr><td><code>/=</code></td><td>x <code>/=</code> 3</td><td>x <code>=</code> x <code>/</code> 3</td></tr><tr><td><code>%=</code></td><td>x <code>%=</code> 3</td><td>x <code>=</code> x <code>%</code> 3</td></tr><tr><td><code>&amp;=</code></td><td>x <code>&amp;=</code> 3</td><td>x <code>=</code> x <code>&amp;</code> 3</td></tr><tr><td><code>|=</code></td><td>x <code>|=</code> 3</td><td>x <code>=</code> x <code>|</code> 3</td></tr><tr><td><code>^=</code></td><td>x <code>^=</code> 3</td><td>x <code>=</code> x <code>^</code> 3</td></tr><tr><td><code>&gt;&gt;=</code></td><td>x <code>&gt;&gt;=</code> 3</td><td>x <code>=</code> x <code>&gt;&gt;</code> 3</td></tr><tr><td><code>&lt;&lt;=</code></td><td>x <code>&lt;&lt;=</code> 3</td><td>x <code>=</code> x <code>&lt;&lt;</code> 3</td></tr></tbody></table><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x &gt; y);</span><br><span class="line"><span class="comment">// 返回 1（真），因为 5 大于 3</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>符号</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td><td>x <code>==</code> y</td></tr><tr><td><code>!=</code></td><td>不等于</td><td>x <code>!=</code> y</td></tr><tr><td><code>&gt;</code></td><td>大于</td><td>x <code>&gt;</code> y</td></tr><tr><td><code>&lt;</code></td><td>小于</td><td>x <code>&lt;</code> y</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于</td><td>x <code>&gt;=</code> y</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td><td>x <code>&lt;=</code> y</td></tr></tbody></table><p>比较运算符用于比较两个值</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th>符号</th><th>名称</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td><code>与</code>逻辑</td><td>如果两个语句都为真，则返回真</td><td><code>x &lt; 5 &amp;&amp;  x &lt; 10</code></td></tr><tr><td><code>||</code></td><td><code>或</code>逻辑</td><td>如果其中一个语句为真，则返回真</td><td><code>x &lt; 5 || x &lt; 4</code></td></tr><tr><td><code>!</code></td><td><code>非</code>逻辑</td><td>反转结果，如果结果为真则返回假</td><td><code>!(x &lt; 5 &amp;&amp; x &lt; 10)</code></td></tr></tbody></table><h3 id="运算符示例"><a href="#运算符示例" class="headerlink" title="运算符示例"></a>运算符示例</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span>  </span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;           </span><br><span class="line"></span><br><span class="line">c = a &amp; b;      <span class="comment">/* 12 = 0000 1100 */</span> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line"></span><br><span class="line">c = a | b;      <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Line 2 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">c = a ^ b;      <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">c = ~a;         <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Line 4 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );</span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Line 6 - c 的值是 %d\n&quot;</span>, c );</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left"><code>&amp;</code></td><td align="left">按位与操作，按二进制位进行”与”运算</td><td align="left"><code>(A &amp; B)</code> 将得到 <code>12</code> 即为 0000 1100</td></tr><tr><td align="left"><code>|</code></td><td align="left">按位或运算符，按二进制位进行”或”运算</td><td align="left"><code>(A | B)</code> 将得到 <code>61</code> 即为 0011 1101</td></tr><tr><td align="left"><code>^</code></td><td align="left">异或运算符，按二进制位进行”异或”运算</td><td align="left"><code>(A ^ B)</code> 将得到 <code>49</code> 即为 0011 0001</td></tr><tr><td align="left"><code>~</code></td><td align="left">取反运算符，按二进制位进行”取反”运算</td><td align="left"><code>(~A)</code> 将得到 <code>-61</code> 即为 1100 0011</td></tr><tr><td align="left"><code>&lt;&lt;</code></td><td align="left">二进制左移运算符</td><td align="left"><code>A &lt;&lt; 2</code> 将得到 <code>240</code> 即为 1111 0000</td></tr><tr><td align="left"><code>&gt;&gt;</code></td><td align="left">二进制右移运算符</td><td align="left"><code>A &gt;&gt; 2</code> 将得到 <code>15</code> 即为 0000 1111</td></tr></tbody></table><h2 id="数据类型-Data-Types"><a href="#数据类型-Data-Types" class="headerlink" title="数据类型 Data Types"></a>数据类型 Data Types</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th>数据类型</th><th>大小 Size</th><th>范围 Range</th><th>描述 Description</th></tr></thead><tbody><tr><td><code>char</code></td><td>1 字节</td><td><code>−128</code> ~ <code>127</code></td><td>单个字符&#x2F;字母&#x2F;数字&#x2F;ASCII</td></tr><tr><td><code>signed char</code></td><td>1 字节</td><td><code>−128</code> ~ <code>127</code></td><td>-</td></tr><tr><td><code>unsigned char</code></td><td>1 字节</td><td><code>0</code> ~ <code>255</code></td><td>-</td></tr><tr><td><code>int</code></td><td><code>2</code> 到 <code>4</code> 字节</td><td><code>−32,768</code> ~ <code>32,767</code></td><td>存储整数</td></tr><tr><td><code>signed int</code></td><td>2 字节</td><td><code>−32,768</code> ~ <code>32,767</code></td><td></td></tr><tr><td><code>unsigned int</code></td><td>2 字节</td><td><code>0</code> ~ <code>65,535</code></td><td></td></tr><tr><td><code>short int</code></td><td>2 字节</td><td><code>−32,768</code> ~ <code>32,767</code></td><td></td></tr><tr><td><code>signed short int</code></td><td>2 字节</td><td><code>−32,768</code> ~ <code>32,767</code></td><td></td></tr><tr><td><code>unsigned short int</code></td><td>2 字节</td><td><code>0</code> ~ <code>65,535</code></td><td></td></tr><tr><td><code>long int</code></td><td>4 字节</td><td><code>-2,147,483,648</code> ~ <code>2,147,483,647</code></td><td></td></tr><tr><td><code>signed long int</code></td><td>4 字节</td><td><code>-2,147,483,648</code> ~ <code>2,147,483,647</code></td><td></td></tr><tr><td><code>unsigned long int</code></td><td>4 字节</td><td><code>0</code> ~ <code>4,294,967,295</code></td><td></td></tr><tr><td><code>float</code></td><td>4 字节</td><td></td><td></td></tr><tr><td><code>double</code></td><td>8 字节</td><td></td><td></td></tr><tr><td><code>long double</code></td><td>10 字节</td><td></td><td></td></tr></tbody></table><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建变量</span></span><br><span class="line"><span class="type">int</span> myNum = <span class="number">5</span>;             <span class="comment">// 整数</span></span><br><span class="line"><span class="type">float</span> myFloatNum = <span class="number">5.99</span>;   <span class="comment">// 浮点数</span></span><br><span class="line"><span class="type">char</span> myLetter = <span class="string">&#x27;D&#x27;</span>;       <span class="comment">// 字符串</span></span><br><span class="line"><span class="comment">// 高精度浮点数据或数字</span></span><br><span class="line"><span class="type">double</span> myDouble = <span class="number">3.2325467</span>;</span><br><span class="line"><span class="comment">// 打印输出变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, myNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, myFloatNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, myLetter);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, myDouble);</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th align="left">数据类型</th><th align="left">说  明</th></tr></thead><tbody><tr><td align="left"><code>char</code></td><td align="left">字符型</td></tr><tr><td align="left"><code>short</code></td><td align="left">短整型</td></tr><tr><td align="left"><code>int</code></td><td align="left">整型</td></tr><tr><td align="left"><code>long</code></td><td align="left">长整型</td></tr><tr><td align="left"><code>float</code></td><td align="left">单精度浮点型</td></tr><tr><td align="left"><code>double</code></td><td align="left">双精度浮点型</td></tr><tr><td align="left"><code>void</code></td><td align="left">无类型</td></tr></tbody></table><h3 id="基本格式说明符"><a href="#基本格式说明符" class="headerlink" title="基本格式说明符"></a>基本格式说明符</h3><table><thead><tr><th>格式说明符</th><th>数据类型</th></tr></thead><tbody><tr><td><code>%d</code> 或 <code>%i</code></td><td><code>int</code> 整数</td></tr><tr><td><code>%f</code></td><td><code>float</code> 单精度的十进制类型</td></tr><tr><td><code>%lf</code></td><td><code>double</code> 高精度浮点数据或数字</td></tr><tr><td><code>%c</code></td><td><code>char</code> 字符</td></tr><tr><td><code>%s</code></td><td>用于 <code>strings</code> 字符串</td></tr></tbody></table><h3 id="基本格式说明符-1"><a href="#基本格式说明符-1" class="headerlink" title="基本格式说明符"></a>基本格式说明符</h3><table><thead><tr><th></th><th>short</th><th>int</th><th>long</th></tr></thead><tbody><tr><td>8 进制</td><td><code>%ho</code></td><td><code>%o</code></td><td><code>%lo</code></td></tr><tr><td>10 进制</td><td><code>%hd</code></td><td><code>%d</code></td><td><code>%ld</code></td></tr><tr><td>16 进制</td><td><code>%hx</code> &#x2F; <code>%hX</code></td><td><code>%x</code> &#x2F; <code>%X</code></td><td><code>%lx</code> &#x2F; <code>%lX</code></td></tr></tbody></table><h3 id="数据格式示例"><a href="#数据格式示例" class="headerlink" title="数据格式示例"></a>数据格式示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myNum = <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> myFloatNum = <span class="number">5.99</span>; <span class="comment">// 浮点数</span></span><br><span class="line"><span class="type">char</span> myLetter = <span class="string">&#x27;D&#x27;</span>;     <span class="comment">// 字符串</span></span><br><span class="line"><span class="comment">// 打印输出变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, myNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, myFloatNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, myLetter);</span><br></pre></td></tr></table></figure><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><h3 id="预处理器指令"><a href="#预处理器指令" class="headerlink" title="预处理器指令"></a>预处理器指令</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义宏</td></tr><tr><td><code>#include</code></td><td>包含一个源代码文件</td></tr><tr><td><code>#undef</code></td><td>取消已定义的宏</td></tr><tr><td><code>#ifdef</code></td><td>如果宏已经定义，则返回真</td></tr><tr><td><code>#ifndef</code></td><td>如果宏没有定义，则返回真</td></tr><tr><td><code>#if</code></td><td>如果给定条件为真，则编译下面代码</td></tr><tr><td><code>#else</code></td><td><code>#if</code> 的替代方案</td></tr><tr><td><code>#elif</code></td><td>如果 <code>#if</code> 条件为假，当前条件为<code>真</code></td></tr><tr><td><code>#endif</code></td><td>结束一个 <code>#if……#else</code> 条件编译块</td></tr><tr><td><code>#error</code></td><td>当遇到标准错误时，输出错误消息</td></tr><tr><td><code>#pragma</code></td><td>使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的 MAX_ARRAY_LENGTH 替换为 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ARRAY_LENGTH 20</span></span><br><span class="line"><span class="comment">// 系统库中获取 stdio.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 本地目录中获取 myheader.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myheader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span>  FILE_SIZE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_SIZE 42 <span class="comment">// 取消已定义并定义为 42</span></span></span><br></pre></td></tr></table></figure><h3 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th>宏</th><th>描述</th></tr></thead><tbody><tr><td><code>__DATE__</code></td><td>当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量</td></tr><tr><td><code>__TIME__</code></td><td>当前时间，一个以 “HH:MM:SS” 格式表示的字符常量</td></tr><tr><td><code>__FILE__</code></td><td>这会包含当前文件名，一个字符串常量</td></tr><tr><td><code>__LINE__</code></td><td>这会包含当前行号，一个十进制常量</td></tr><tr><td><code>__STDC__</code></td><td>当编译器以 <code>ANSI</code> 标准编译时，则定义为 <code>1</code></td></tr></tbody></table><!--rehype:className=style-list--><p><code>ANSI C</code> 定义了许多宏，您可以使用这些宏，但是不能直接修改这些预定义的宏</p><h4 id="预定义宏示例"><a href="#预定义宏示例" class="headerlink" title="预定义宏示例"></a>预定义宏示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;File :%s\n&quot;</span>, __FILE__);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Date :%s\n&quot;</span>, __DATE__);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Time :%s\n&quot;</span>, __TIME__);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Line :%d\n&quot;</span>, __LINE__);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;ANSI :%d\n&quot;</span>, __STDC__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="宏延续运算符（-）"><a href="#宏延续运算符（-）" class="headerlink" title="宏延续运算符（\）"></a>宏延续运算符（\）</h3><p>一个宏通常写在一个单行上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  message_for(a, b)  \</span></span><br><span class="line"><span class="meta">    printf(#a <span class="string">&quot; 和 &quot;</span> #b <span class="string">&quot;: 我们爱你！\n&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>如果宏太长，一个单行容纳不下，则使用宏延续运算符 <code>\</code></p><h3 id="字符串常量化运算符（-）"><a href="#字符串常量化运算符（-）" class="headerlink" title="字符串常量化运算符（#）"></a>字符串常量化运算符（#）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  message_for(a, b)  \</span></span><br><span class="line"><span class="meta">  printf(#a <span class="string">&quot; 和 &quot;</span> #b <span class="string">&quot;: 我们爱你！\n&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  message_for(Carole, Debra);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carole 和 Debra: 我们爱你！</span><br></pre></td></tr></table></figure><p>需要把一个宏的参数转换为字符串常量时，使用字符串常量化运算符 <code>#</code></p><h3 id="标记粘贴运算符（-）"><a href="#标记粘贴运算符（-）" class="headerlink" title="标记粘贴运算符（##）"></a>标记粘贴运算符（##）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tokenpaster(n) \</span></span><br><span class="line"><span class="meta">    printf (<span class="string">&quot;token&quot;</span> #n <span class="string">&quot; = %d&quot;</span>, token##n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  <span class="type">int</span> token34 = <span class="number">40</span>;</span><br><span class="line">  tokenpaster(<span class="number">34</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="defined-运算符"><a href="#defined-运算符" class="headerlink" title="defined() 运算符"></a>defined() 运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined (MESSAGE)</span></span><br><span class="line">   <span class="meta">#<span class="keyword">define</span> MESSAGE <span class="string">&quot;You wish!&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;信息如下: %s\n&quot;</span>, \</span><br><span class="line">        MESSAGE);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数化的宏"><a href="#参数化的宏" class="headerlink" title="参数化的宏"></a>参数化的宏</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏重写上面的代码，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> square(x) ((x) * (x))</span></span><br></pre></td></tr></table></figure><p>宏名称和左圆括号之间不允许有空格</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x,y) ((x) &gt; (y) ? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;20 到 10 之间的最大值是 %d\n&quot;</span>, \</span><br><span class="line">        MAX(<span class="number">10</span>, <span class="number">20</span>));  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Warning-和-Error"><a href="#Warning-和-Error" class="headerlink" title="Warning 和 Error"></a>Warning 和 Error</h3><!--rehype:wrap-class=row-span-2--><p>在 C 语言中，警告（Warning）和错误（Error）是编译器用于标识代码潜在问题或阻止代码编译的机制。</p><h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>警告提示代码中可能存在的问题，但不会阻止代码编译。处理警告可以提升代码质量和可移植性。</p><h4 id="常见警告示例"><a href="#常见警告示例" class="headerlink" title="常见警告示例"></a><strong>常见警告示例</strong></h4><p>未使用的变量  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x; <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br></pre></td></tr></table></figure><p>类型隐式转换（可能导致数据丢失）  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">3.14</span>; <span class="comment">// 浮点数被隐式转换</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">2147483647</span> + <span class="number">1</span>; <span class="comment">// 可能溢出</span></span><br></pre></td></tr></table></figure><p>函数声明与定义不匹配</p><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p>错误会阻止代码编译，必须修复才能继续编译。</p><p><strong>常见错误示例</strong>：</p><p>语法错误（如缺少分号）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>函数定义冲突</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">double</span>)</span>;</span><br></pre></td></tr></table></figure><p>函数或变量未定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">10</span>; <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, y);</span><br></pre></td></tr></table></figure><p>头文件缺失或冲突</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unknown.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="使用编译器指令控制警告和错误"><a href="#使用编译器指令控制警告和错误" class="headerlink" title="使用编译器指令控制警告和错误"></a>使用编译器指令控制警告和错误</h3><!--rehype:wrap-class=col-span-2--><h4 id="抑制警告"><a href="#抑制警告" class="headerlink" title="抑制警告"></a>抑制警告</h4><p>可以使用编译器选项来关闭特定的警告，例如在 GCC 中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -w file.c      <span class="comment"># 禁用所有警告</span></span><br><span class="line">gcc -Wall file.c   <span class="comment"># 启用所有常见警告</span></span><br><span class="line">gcc -Werror file.c <span class="comment"># 将警告视为错误</span></span><br></pre></td></tr></table></figure><h4 id="使用-pragma-控制警告"><a href="#使用-pragma-控制警告" class="headerlink" title="使用 #pragma 控制警告"></a>使用 <code>#pragma</code> 控制警告</h4><p>在某些编译器中，可以使用 <code>#pragma</code> 指令启用或禁用警告：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable : 4996) <span class="comment">// 禁用警告（适用于 MSVC 编译器）</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th>区别点</th><th>Warning（警告）</th><th>Error（错误）</th></tr></thead><tbody><tr><td>严重程度</td><td>程序可继续编译，但可能存在隐患</td><td>编译无法完成，必须修复</td></tr><tr><td>编译结果</td><td>生成可执行文件</td><td>无法生成可执行文件</td></tr><tr><td>触发原因</td><td>潜在问题，例如隐式转换或未使用的变量</td><td>语法或语义错误，例如语法错误或未定义变量</td></tr><tr><td>修复必要性</td><td>可选择修复，但建议修复以避免潜在问题</td><td>必须修复才能继续编译</td></tr><tr><td>编译器选项调整</td><td>可以忽略或转换为错误（如 <code>-Werror</code>）</td><td>无法调整，必须修复</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明和定义"><a href="#函数声明和定义" class="headerlink" title="函数声明和定义"></a>函数声明和定义</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数由两部分组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123; <span class="comment">// 声明 declaration</span></span><br><span class="line">  <span class="comment">// 函数体（要执行的代码）(definition)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><code>Declaration</code> 声明函数名称、返回类型和参数 <em>(如果有)</em></li><li><code>Definition</code> 函数体 <em>(要执行的代码)</em></li></ul><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 主要方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  myFunction(); <span class="comment">// --&gt; 调用函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123;<span class="comment">// 函数定义</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;晚上好！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;晚上好！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  myFunction();  <span class="comment">// 调用函数</span></span><br><span class="line">  myFunction();  <span class="comment">// 可以被多次调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;晚上好！&quot;</span></span><br><span class="line"><span class="comment">// 输出 -&gt; &quot;晚上好！&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">(<span class="type">char</span> name[])</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  myFunction(<span class="string">&quot;Liam&quot;</span>);</span><br><span class="line">  myFunction(<span class="string">&quot;Jenny&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Hello Liam</span></span><br><span class="line"><span class="comment">// Hello Jenny</span></span><br></pre></td></tr></table></figure><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">(<span class="type">char</span> name[], <span class="type">int</span> age)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;你好 %s 你 %d 岁了。\n&quot;</span>,name,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  myFunction(<span class="string">&quot;Liam&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  myFunction(<span class="string">&quot;Jenny&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你好 Liam 你 3 岁了。</span></span><br><span class="line"><span class="comment">// 你好 Jenny 你 14 岁了。</span></span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">myFunction</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span> + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果: %d&quot;</span>, myFunction(<span class="number">3</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 8 (5 + 3)</span></span><br></pre></td></tr></table></figure><p>两个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">myFunction</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果: %d&quot;</span>, myFunction(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">  <span class="comment">// 将结果存储在变量中</span></span><br><span class="line">  <span class="type">int</span> result = myFunction(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果 = %d&quot;</span>, result);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: 8 (5 + 3)</span></span><br><span class="line"><span class="comment">// 结果 = 8 (5 + 3)</span></span><br></pre></td></tr></table></figure><h3 id="递归示例"><a href="#递归示例" class="headerlink" title="递归示例"></a>递归示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> k)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> result = sum(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, result);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> k + sum(k - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, <span class="built_in">sqrt</span>(<span class="number">16</span>));   <span class="comment">// 平方根</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, <span class="built_in">ceil</span>(<span class="number">1.4</span>));  <span class="comment">// 四舍五入 (入)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, <span class="built_in">floor</span>(<span class="number">1.4</span>)); <span class="comment">// 四舍五入 (舍)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, <span class="built_in">pow</span>(<span class="number">4</span>, <span class="number">3</span>));  <span class="comment">// x(4)的y(3)次方</span></span><br></pre></td></tr></table></figure><hr><ul><li><code>abs(x)</code> 绝对值</li><li><code>acos(x)</code> 反余弦值</li><li><code>asin(x)</code> 反正弦值</li><li><code>atan(x)</code> 反正切</li><li><code>cbrt(x)</code> 立方根</li><li><code>cos(x)</code> 余弦</li><li><code>exp(x)</code> Ex 的值</li><li><code>sin(x)</code> x 的正弦值</li><li><code>tan(x)</code> 角度的正切</li></ul><!--rehype:className=cols-2--><h2 id="Structures-结构"><a href="#Structures-结构" class="headerlink" title="Structures 结构"></a>Structures 结构</h2><h3 id="创建结构"><a href="#创建结构" class="headerlink" title="创建结构"></a>创建结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStructure</span> &#123;</span>  <span class="comment">// 结构声明</span></span><br><span class="line">  <span class="type">int</span> myNum;     <span class="comment">// 成员（int 变量）</span></span><br><span class="line">  <span class="type">char</span> myLetter; <span class="comment">// 成员（char 变量）</span></span><br><span class="line">&#125;; <span class="comment">// 用分号结束结构</span></span><br></pre></td></tr></table></figure><p>创建一个名为 <code>s1</code> 的结构变量</p><figure class="highlight c"><figcaption><span>&#123;7&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> myNum;</span><br><span class="line">  <span class="type">char</span> myLetter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s1</span>;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构中的字符串"><a href="#结构中的字符串" class="headerlink" title="结构中的字符串"></a>结构中的字符串</h3><figure class="highlight c"><figcaption><span>&#123;9&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> myNum;</span><br><span class="line">  <span class="type">char</span> myLetter;</span><br><span class="line">  <span class="type">char</span> myString[<span class="number">30</span>]; <span class="comment">// String</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s1</span>;</span></span><br><span class="line">  <span class="built_in">strcpy</span>(s1.myString, <span class="string">&quot;Some text&quot;</span>);</span><br><span class="line">  <span class="comment">// 打印值</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;我字符串: %s&quot;</span>, s1.myString);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>strcpy</code> 函数为字符串赋值</p><h3 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight c"><figcaption><span>&#123;11,12,16&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个名为 myStructure 的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> myNum;</span><br><span class="line">  <span class="type">char</span> myLetter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 创建一个名为 s1 的 myStructure 结构变量</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s1</span>;</span></span><br><span class="line">  <span class="comment">// 为 s1 的成员赋值</span></span><br><span class="line">  s1.myNum = <span class="number">13</span>;</span><br><span class="line">  s1.myLetter = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个名为 s2 的 myStructure 结构变量</span></span><br><span class="line">  <span class="comment">// 并为其赋值</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s2</span> =</span> &#123;<span class="number">13</span>, <span class="string">&#x27;B&#x27;</span>&#125;;</span><br><span class="line">  <span class="comment">// 打印值</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;My number: %d\n&quot;</span>, s1.myNum);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;My letter: %c\n&quot;</span>, s1.myLetter);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建不同的结构变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s2</span>;</span></span><br><span class="line"><span class="comment">// 为不同的结构变量赋值</span></span><br><span class="line">s1.myNum = <span class="number">13</span>;</span><br><span class="line">s1.myLetter = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s2.myNum = <span class="number">20</span>;</span><br><span class="line">s2.myLetter = <span class="string">&#x27;C&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="复制结构"><a href="#复制结构" class="headerlink" title="复制结构"></a>复制结构</h3><figure class="highlight c"><figcaption><span>&#123;6&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s1</span> =</span> &#123;</span><br><span class="line">  <span class="number">13</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&quot;Some text&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s2</span>;</span></span><br><span class="line">s2 = s1;</span><br></pre></td></tr></table></figure><p>示例中，将 <code>s1</code> 的值复制到 <code>s2</code></p><h3 id="修改值"><a href="#修改值" class="headerlink" title="修改值"></a>修改值</h3><figure class="highlight c"><figcaption><span>&#123;6,7&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个结构变量并为其赋值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myStructure</span> <span class="title">s1</span> =</span> &#123;</span><br><span class="line">  <span class="number">13</span>, <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 修改值</span></span><br><span class="line">s1.myNum = <span class="number">30</span>;</span><br><span class="line">s1.myLetter = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"><span class="comment">// 打印值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c %s&quot;</span>,</span><br><span class="line">    s1.myNum,</span><br><span class="line">    s1.myLetter);</span><br></pre></td></tr></table></figure><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="文件处理函数"><a href="#文件处理函数" class="headerlink" title="文件处理函数"></a>文件处理函数</h3><table><thead><tr><th>函数</th><th>描述 Description</th></tr></thead><tbody><tr><td><code>fopen()</code></td><td><code>打开</code>新文件或现有文件</td></tr><tr><td><code>fprintf()</code></td><td>将数据<code>写入</code>文件</td></tr><tr><td><code>fscanf()</code></td><td>从文件中<code>读取</code>数据</td></tr><tr><td><code>fputc()</code></td><td>将一个字符<code>写入</code>文件</td></tr><tr><td><code>fgetc()</code></td><td>从文件中<code>读取</code>一个字符</td></tr><tr><td><code>fclose()</code></td><td><code>关闭</code>文件</td></tr><tr><td><code>fseek()</code></td><td>将文件指针设置到<code>给定位置</code></td></tr><tr><td><code>fputw()</code></td><td>将整数<code>写入</code>文件</td></tr><tr><td><code>fgetw()</code></td><td>从文件中<code>读取</code>一个整数</td></tr><tr><td><code>ftell()</code></td><td>返回当前<code>位置</code></td></tr><tr><td><code>rewind()</code></td><td>将文件指针设置为文件的开头</td></tr></tbody></table><p>C 库中有许多函数可以<code>打开</code>&#x2F;<code>读取</code>&#x2F;<code>写入</code>&#x2F;<code>搜索</code>和<code>关闭</code>文件</p><h3 id="打开模式参数"><a href="#打开模式参数" class="headerlink" title="打开模式参数"></a>打开模式参数</h3><table><thead><tr><th>模式 Mode</th><th>描述 Description</th></tr></thead><tbody><tr><td><code>r</code></td><td>以<code>读取</code>模式打开一个文本文件，允许读取文件</td></tr><tr><td><code>w</code></td><td>以<code>写</code>模式打开一个文本文件，允许写入文件</td></tr><tr><td><code>a</code></td><td>以<code>追加</code>模式打开一个文本文件<br />如果文件不存在，则会创建一个新文件</td></tr><tr><td><code>r+</code></td><td>以<code>读写</code>模式打开一个文本文件，允许读写文件</td></tr><tr><td><code>w+</code></td><td>以<code>读写</code>模式打开一个文本文件，允许读写文件</td></tr><tr><td><code>a+</code></td><td>以<code>读写</code>模式打开一个文本文件，允许读写文件</td></tr><tr><td><code>rb</code></td><td>以<code>读取</code>模式打开二进制文件</td></tr><tr><td><code>wb</code></td><td>以<code>写入</code>模式打开二进制文件</td></tr><tr><td><code>ab</code></td><td>以<code>追加</code>模式打开二进制文件</td></tr><tr><td><code>rb+</code></td><td>以<code>读写</code>模式打开二进制文件</td></tr><tr><td><code>wb+</code></td><td>以<code>读写</code>模式打开二进制文件</td></tr><tr><td><code>ab+</code></td><td>以<code>读写</code>模式打开二进制文件</td></tr></tbody></table><h3 id="打开文件：fopen"><a href="#打开文件：fopen" class="headerlink" title="打开文件：fopen()"></a>打开文件：fopen()</h3><figure class="highlight c"><figcaption><span>&#123;6&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">( )</span> &#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  fp = fopen(<span class="string">&quot;file_handle.c&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    ch = fgetc(fp);</span><br><span class="line">    <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对文件执行所有操作后，必须关闭 <code>fclose()</code> 该文件</p><h3 id="写入文件：fprintf"><a href="#写入文件：fprintf" class="headerlink" title="写入文件：fprintf()"></a>写入文件：fprintf()</h3><figure class="highlight c"><figcaption><span>&#123;7&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  fp = fopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); <span class="comment">// 打开文件</span></span><br><span class="line">  <span class="comment">// 将数据写入文件</span></span><br><span class="line">  <span class="built_in">fprintf</span>(fp, <span class="string">&quot;fprintf 的 Hello 文件..\n&quot;</span>);</span><br><span class="line">  fclose(fp); <span class="comment">// 关闭文件  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="读取文件：fscanf"><a href="#读取文件：fscanf" class="headerlink" title="读取文件：fscanf()"></a>读取文件：fscanf()</h3><figure class="highlight c"><figcaption><span>&#123;6&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">main()&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">char</span> buff[<span class="number">255</span>]; <span class="comment">// 创建char数组存储文件数据</span></span><br><span class="line">  fp = fopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, buff)!=EOF) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, buff);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入文件：fputc"><a href="#写入文件：fputc" class="headerlink" title="写入文件：fputc()"></a>写入文件：fputc()</h3><figure class="highlight c"><figcaption><span>&#123;6&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  fp = fopen(<span class="string">&quot;file1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); <span class="comment">// 打开文件</span></span><br><span class="line">  fputc(<span class="string">&#x27;a&#x27;</span>,fp); <span class="comment">// 将单个字符写入文件</span></span><br><span class="line">  fclose(fp);    <span class="comment">// 关闭文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件：fgetc"><a href="#读取文件：fgetc" class="headerlink" title="读取文件：fgetc()"></a>读取文件：fgetc()</h3><figure class="highlight c"><figcaption><span>&#123;8&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  clrscr();</span><br><span class="line">  fp=fopen(<span class="string">&quot;myfile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span>((c=fgetc(fp))!=EOF)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">  getch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入文件：fputs"><a href="#写入文件：fputs" class="headerlink" title="写入文件：fputs()"></a>写入文件：fputs()</h3><figure class="highlight c"><figcaption><span>&#123;8&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  clrscr();</span><br><span class="line">  fp = fopen(<span class="string">&quot;myfile2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="built_in">fputs</span>(<span class="string">&quot;hello c programming&quot;</span>,fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">  getch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件：fgets"><a href="#读取文件：fgets" class="headerlink" title="读取文件：fgets()"></a>读取文件：fgets()</h3><figure class="highlight c"><figcaption><span>&#123;10&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">char</span> text[<span class="number">300</span>];</span><br><span class="line">  clrscr();</span><br><span class="line"></span><br><span class="line">  fp=fopen(<span class="string">&quot;myfile2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, fgets(text, <span class="number">200</span>, fp));</span><br><span class="line">  fclose(fp);</span><br><span class="line">  getch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek()"></a>fseek()</h3><figure class="highlight c"><figcaption><span>&#123;8&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  fp = fopen(<span class="string">&quot;myfile.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">  <span class="built_in">fputs</span>(<span class="string">&quot;This is Book&quot;</span>, fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将文件指针设置到给定位置</span></span><br><span class="line">  fseek(fp, <span class="number">7</span>, SEEK_SET);</span><br><span class="line">  <span class="built_in">fputs</span>(<span class="string">&quot;Kenny Wong&quot;</span>, fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将文件指针设置到给定位置</p><h3 id="rewind"><a href="#rewind" class="headerlink" title="rewind()"></a>rewind()</h3><figure class="highlight c"><figcaption><span>&#123;11&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  clrscr();</span><br><span class="line">  fp=fopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span>((c=fgetc(fp)) != EOF)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">  &#125;</span><br><span class="line">  rewind(fp); <span class="comment">// 将文件指针移动到文件的开头</span></span><br><span class="line">  <span class="keyword">while</span>((c=fgetc(fp)) != EOF)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">  getch();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Hello World!Hello World!</span></span><br></pre></td></tr></table></figure><h3 id="ftell"><a href="#ftell" class="headerlink" title="ftell()"></a>ftell()</h3><figure class="highlight c"><figcaption><span>&#123;11&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">   FILE *fp;</span><br><span class="line">   <span class="type">int</span> length;</span><br><span class="line">   clrscr();</span><br><span class="line">   fp = fopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line"></span><br><span class="line">   length = ftell(fp); <span class="comment">// 返回当前位置</span></span><br><span class="line"></span><br><span class="line">   fclose(fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;文件大小: %d bytes&quot;</span>, length);</span><br><span class="line">   getch();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 文件大小: 18 bytes</span></span><br></pre></td></tr></table></figure><h2 id="C-网络编程"><a href="#C-网络编程" class="headerlink" title="C 网络编程"></a>C 网络编程</h2><h3 id="网络编程介绍"><a href="#网络编程介绍" class="headerlink" title="网络编程介绍"></a>网络编程介绍</h3><p>C使用sockets进行网络通信。包含头文件：</p><ul><li><code>#include &lt;sys/socket.h&gt;</code>: 套接字操作，如创建、绑定和监听套接字</li><li><code>#include &lt;arpa/inet.h&gt;</code>: IP 地址转换</li><li><code>#include &lt;unistd.h&gt;</code>: 关闭套接字等</li><li><code>#include &lt;netinet/in.h&gt;</code>: 网络地址结构定义和相关敞亮</li></ul><h3 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h3><p>网络通信的第一步是创建套接字。套接字是网络通信的基础，通过它可以与远程主机进行数据交换。</p><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> server_fd, new_socket; <span class="comment">// 定义服务器文件描述符和新连接的套接字</span></span><br><span class="line"><span class="type">int</span> port = <span class="number">8080</span>; <span class="comment">// 服务器使用的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建套接字文件描述符</span></span><br><span class="line"><span class="comment">// AF_INET 表示使用 IPv4 协议，SOCK_STREAM 表示使用 TCP 协议，协议参数通常为 0（默认 TCP）</span></span><br><span class="line"><span class="keyword">if</span> ((server_fd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sock = <span class="number">0</span>;  <span class="comment">// 客户端的套接字描述符</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;  <span class="comment">// 定义服务器地址结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建套接字</span></span><br><span class="line"><span class="keyword">if</span> ((sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;Socket creation failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定套接字"><a href="#绑定套接字" class="headerlink" title="绑定套接字"></a>绑定套接字</h3><p>服务端创建套接字后，需要将其绑定到特定的 IP 地址和端口，以便客户端能够连接。</p><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> address;  <span class="comment">// 定义存储地址信息的结构体</span></span><br><span class="line">address.sin_family = AF_INET;  <span class="comment">// 设置地址族为 IPv4</span></span><br><span class="line">address.sin_addr.s_addr = INADDR_ANY;  <span class="comment">// 将服务器绑定到所有可用的网络接口（即本机的所有 IP 地址）</span></span><br><span class="line">address.sin_port = <span class="built_in">htons</span>(port);  <span class="comment">// 将端口号转换为网络字节序，大端模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将套接字绑定到指定的地址和端口上</span></span><br><span class="line"><span class="comment">// bind() 将服务器的文件描述符与 IP 地址和端口号进行绑定，以便客户端能够通过该地址和端口访问服务器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="built_in">sizeof</span>(address)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听和接收连接"><a href="#监听和接收连接" class="headerlink" title="监听和接收连接"></a>监听和接收连接</h3><p>服务端在绑定套接字之后，需要进入监听状态，以等待客户端的连接请求。</p><h4 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始监听客户端连接</span></span><br><span class="line"><span class="comment">// 监听连接请求</span></span><br><span class="line"><span class="comment">// listen() 函数将套接字设置为被动模式，准备接收来自客户端的连接请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(server_fd, <span class="number">3</span>) &lt; <span class="number">0</span>) &#123;  <span class="comment">// 第二个参数 3 表示连接请求的队列大小</span></span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;listen failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> addrlen = <span class="built_in">sizeof</span>(address);  <span class="comment">// 获取地址结构体的大小</span></span><br><span class="line"><span class="comment">// accept() 函数会阻塞等待客户端的连接请求，一旦连接请求到来，创建一个新的套接字 new_socket 用于数据传输</span></span><br><span class="line"><span class="keyword">if</span> ((new_socket = <span class="built_in">accept</span>(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, (<span class="type">socklen_t</span>*)&amp;addrlen)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;accept failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接到服务端"><a href="#连接到服务端" class="headerlink" title="连接到服务端"></a>连接到服务端</h3><p>客户端使用 <code>connect()</code> 函数连接到服务器的 IP 地址和端口。</p><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务器地址</span></span><br><span class="line">serv_addr.sin_family = AF_INET;  <span class="comment">// 设置地址族为 IPv4</span></span><br><span class="line">serv_addr.sin_port = <span class="built_in">htons</span>(port);  <span class="comment">// 将端口号转换为网络字节序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 IP 地址转换为二进制并存储在 serv_addr 结构体中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">inet_pton</span>(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;Invalid address/ Address not supported&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="comment">// connect() 函数将客户端的套接字与服务器的地址绑定，从而建立连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;Connection Failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送和接收数据"><a href="#发送和接收数据" class="headerlink" title="发送和接收数据"></a>发送和接收数据</h3><p>一旦连接建立，服务端和客户端可以通过套接字发送和接收数据。</p><h4 id="服务端-3"><a href="#服务端-3" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端从客户端接收数据</span></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 缓冲区，用于存储接收的数据</span></span><br><span class="line"><span class="type">int</span> valread = <span class="built_in">read</span>(new_socket, buffer, <span class="number">1024</span>);  <span class="comment">// 从客户端读取数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client: %s\n&quot;</span>, buffer);  <span class="comment">// 打印接收到的客户端数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端发送响应数据给客户端</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *response = <span class="string">&quot;Hello from server&quot;</span>;  <span class="comment">// 响应消息</span></span><br><span class="line"><span class="built_in">send</span>(new_socket, response, <span class="built_in">strlen</span>(response), <span class="number">0</span>);  <span class="comment">// 发送数据到客户端</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Server message sent\n&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端发送数据给服务端</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *message = <span class="string">&quot;Hello from client&quot;</span>;  <span class="comment">// 要发送的消息</span></span><br><span class="line"><span class="built_in">send</span>(sock, message, <span class="built_in">strlen</span>(message), <span class="number">0</span>);  <span class="comment">// 发送数据到服务端</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端从服务端接收响应数据</span></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 缓冲区，用于存储接收到的数据</span></span><br><span class="line"><span class="type">int</span> valread = <span class="built_in">read</span>(sock, buffer, <span class="number">1024</span>);  <span class="comment">// 读取服务端的响应数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Server: %s\n&quot;</span>, buffer);  <span class="comment">// 打印接收到的服务端数据</span></span><br></pre></td></tr></table></figure><h3 id="关闭套接字"><a href="#关闭套接字" class="headerlink" title="关闭套接字"></a>关闭套接字</h3><p>完成通信后，双方都应关闭各自的套接字以释放资源。</p><h4 id="服务端-4"><a href="#服务端-4" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭服务端套接字</span></span><br><span class="line"><span class="built_in">close</span>(new_socket);  <span class="comment">// 关闭用于数据传输的客户端套接字</span></span><br><span class="line"><span class="built_in">close</span>(server_fd);   <span class="comment">// 关闭服务器的监听套接字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="客户端-3"><a href="#客户端-3" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭客户端套接字</span></span><br><span class="line"><span class="built_in">close</span>(sock);  <span class="comment">// 关闭客户端的套接字</span></span><br></pre></td></tr></table></figure><h2 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I&#x2F;O多路复用"></a>I&#x2F;O多路复用</h2><h3 id="多路复用介绍"><a href="#多路复用介绍" class="headerlink" title="多路复用介绍"></a>多路复用介绍</h3><p>在网络编程中，服务端可以使用 I&#x2F;O 多路复用 技术，如 <code>select</code>、<code>poll</code> 或 <code>epoll</code>。这些技术允许服务端同时监听多个文件描述符（如套接字），并在其中一个发生事件时进行处理，提升系统效率。包含头文件：</p><ul><li><code>#include &lt;sys/select.h&gt;</code>: 提供 <code>select</code></li><li><code>#include &lt;poll.h&gt;</code>: 提供 <code>poll</code></li><li><code>#include &lt;sys/epoll.h&gt;</code>: 提供<code>epoll</code></li></ul><h3 id="使用select"><a href="#使用select" class="headerlink" title="使用select"></a>使用select</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fd_set read_fds;  <span class="comment">// 定义文件描述符集合</span></span><br><span class="line">FD_ZERO(&amp;read_fds);  <span class="comment">// 清空集合</span></span><br><span class="line">FD_SET(server_socket, &amp;read_fds);  <span class="comment">// 将服务端套接字加入集合</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> max_fd = server_socket;</span><br><span class="line"><span class="type">int</span> activity = select(max_fd + <span class="number">1</span>, &amp;read_fds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);  <span class="comment">// 等待事件发生</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (activity &lt; <span class="number">0</span> &amp;&amp; errno != EINTR) &#123;</span><br><span class="line">    perror(<span class="string">&quot;select error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用poll"><a href="#使用poll" class="headerlink" title="使用poll"></a>使用poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[2];</span>  <span class="comment">// 定义文件描述符数组</span></span><br><span class="line">fds[<span class="number">0</span>].fd = server_socket;</span><br><span class="line">fds[<span class="number">0</span>].events = POLLIN;  <span class="comment">// 监听读事件</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> poll_count = poll(fds, <span class="number">2</span>, <span class="number">-1</span>);  <span class="comment">// 等待事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (poll_count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;poll error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用epoll"><a href="#使用epoll" class="headerlink" title="使用epoll"></a>使用epoll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> epoll_fd = epoll_create1(<span class="number">0</span>);  <span class="comment">// 创建 epoll 文件描述符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">event.events = EPOLLIN;</span><br><span class="line">event.data.fd = server_socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_socket, &amp;event) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;epoll_ctl failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[10];</span>  <span class="comment">// 事件数组</span></span><br><span class="line"><span class="type">int</span> event_count = epoll_wait(epoll_fd, events, <span class="number">10</span>, <span class="number">-1</span>);  <span class="comment">// 等待事件发生</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; event_count; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (events[i].data.fd == server_socket) &#123;</span><br><span class="line">        <span class="comment">// 处理服务端套接字上的事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="Docker-运行环境"><a href="#Docker-运行环境" class="headerlink" title="Docker 运行环境"></a>Docker 运行环境</h3><!--rehype:wrap-class=col-span-2--><ul><li><p>安装 <a href="./docker.md"><code>Docker</code></a></p></li><li><p>创建 <a href="./dockerfile.md"><code>Dockerfile</code></a> 文件</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.14</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache g++</span></span><br></pre></td></tr></table></figure></li><li><p>生成本地 myalpine 镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myalpine .</span><br></pre></td></tr></table></figure></li><li><p>运行映像，把当前路径 <code>($PWD)</code> 映射至容器的 <code>/test</code> 目录，用 <code>gcc</code> 编译程序，<code>exit</code>返回</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v <span class="variable">$PWD</span>:/test myalpine</span><br><span class="line">root@b1a38bd7107a:/# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">root@b1a38bd7107a:/test# gcc -o hello hello.c</span><br><span class="line">Hello World</span><br><span class="line">root@b1a38bd7107a:/test# <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li></ul><!--rehype:className=style-timeline--><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://jaywcjlove.github.io/c-tutorial">C 教程</a> <em>(jaywcjlove.github.io)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-备忘清单&quot;&gt;&lt;a href=&quot;#C-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;C 备忘清单&quot;&gt;&lt;/a&gt;C 备忘清单&lt;/h1&gt;&lt;p&gt;提供基本语法和方法的 C 快速参考备忘单。&lt;/p&gt;
&lt;h2 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; cl</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C" scheme="https://tdcqcx.github.io/tags/C/"/>
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/cpp/"/>
    <id>https://tdcqcx.github.io/2025/01/08/cpp/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-备忘清单"><a href="#C-备忘清单" class="headerlink" title="C++ 备忘清单"></a>C++ 备忘清单</h1><p>提供基本语法和方法的 <a href="https://zh.cppreference.com/">C++</a> 快速参考备忘单</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="hello-cpp"><a href="#hello-cpp" class="headerlink" title="hello.cpp"></a>hello.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello Quick Reference\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ hello.cpp -o hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./hello</span></span><br><span class="line">Hello Quick Reference</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">5</span>;       <span class="comment">// 整数</span></span><br><span class="line"><span class="type">float</span> f = <span class="number">0.95</span>;       <span class="comment">// 浮点数</span></span><br><span class="line"><span class="type">double</span> PI = <span class="number">3.14159</span>;  <span class="comment">// 浮点数</span></span><br><span class="line"><span class="type">char</span> yes = <span class="string">&#x27;Y&#x27;</span>;       <span class="comment">// 特点</span></span><br><span class="line">std::string s = <span class="string">&quot;ME&quot;</span>; <span class="comment">// 字符串（文本）</span></span><br><span class="line"><span class="type">bool</span> isRight = <span class="literal">true</span>;  <span class="comment">// 布尔值</span></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> RATE = <span class="number">0.8</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age &#123;<span class="number">25</span>&#125;;      <span class="comment">// 自 C++11</span></span><br><span class="line">std::cout &lt;&lt; age;  <span class="comment">// 打印 25</span></span><br></pre></td></tr></table></figure><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><table><thead><tr><th align="left">数据类型</th><th>大小</th><th>范围</th></tr></thead><tbody><tr><td align="left"><code>int</code></td><td>4 bytes</td><td>-2<sup>31</sup> 到 2<sup>31</sup>-1</td></tr><tr><td align="left"><code>float</code></td><td>4 bytes</td><td><em>N&#x2F;A</em></td></tr><tr><td align="left"><code>double</code></td><td>8 bytes</td><td><em>N&#x2F;A</em></td></tr><tr><td align="left"><code>char</code></td><td>1 byte</td><td>-128 到 127</td></tr><tr><td align="left"><code>bool</code></td><td>1 byte</td><td><code>true</code> &#x2F; <code>false</code></td></tr><tr><td align="left"><code>void</code></td><td><em>N&#x2F;A</em></td><td><em>N&#x2F;A</em></td></tr><tr><td align="left"><code>wchar_t</code></td><td>2 到 4 bytes</td><td>1 个宽字符</td></tr></tbody></table><!--rehype:className=show-header--><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Type a number: &quot;</span>;</span><br><span class="line">std::cin &gt;&gt; num;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;You entered &quot;</span> &lt;&lt; num;</span><br></pre></td></tr></table></figure><h3 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(a, b);</span><br><span class="line"><span class="comment">// 输出: a=10, b=5</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, b=&quot;</span> &lt;&lt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数交换的奇技淫巧</span></span><br><span class="line">(x ^= y), (y ^= x), (x ^= y);</span><br><span class="line"><span class="comment">// 注意！ 以下操作会造成  undefined behavior</span></span><br><span class="line">x ^= y ^= x ^= y;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++中的单行注释</span></span><br><span class="line"><span class="comment">/* 这是一个多行注释</span></span><br><span class="line"><span class="comment">    在 C++ 中 */</span></span><br></pre></td></tr></table></figure><h3 id="If-语句"><a href="#If-语句" class="headerlink" title="If 语句"></a>If 语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#c-%E6%9D%A1%E4%BB%B6">条件</a></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#c-%E5%BE%AA%E7%8E%AF">循环 Loops</a></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span>;   <span class="comment">// 声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="built_in">hello</span>();    <span class="comment">// 执行函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123; <span class="comment">// 定义</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello Quick Reference!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#c-%E5%87%BD%E6%95%B0">函数 Functions</a></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>&amp; ri = i; <span class="comment">// ri 是对 i 的引用</span></span><br><span class="line">ri = <span class="number">2</span>; <span class="comment">// i 现在改为 2</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;i=&quot;</span> &lt;&lt; i;</span><br><span class="line">i = <span class="number">3</span>;   <span class="comment">// i 现在改为 3</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ri=&quot;</span> &lt;&lt; ri;</span><br></pre></td></tr></table></figure><p><code>ri</code> 和 <code>i</code> 指的是相同的内存位置</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> ns1 &#123;<span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">5</span>;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; ns1::<span class="built_in">val</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> ns1 &#123;<span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">5</span>;&#125;&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ns1;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">val</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名称空间允许名称下的全局标识符</p><h2 id="C-数组"><a href="#C-数组" class="headerlink" title="C++ 数组"></a>C++ 数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 3&gt; marks; <span class="comment">// 定义</span></span><br><span class="line">marks[<span class="number">0</span>] = <span class="number">92</span>;</span><br><span class="line">marks[<span class="number">1</span>] = <span class="number">97</span>;</span><br><span class="line">marks[<span class="number">2</span>] = <span class="number">98</span>;</span><br><span class="line"><span class="comment">// 定义和初始化</span></span><br><span class="line">std::array&lt;<span class="type">int</span>, 3&gt; marks = &#123;<span class="number">92</span>, <span class="number">97</span>, <span class="number">98</span>&#125;;</span><br><span class="line"><span class="comment">// 有空成员</span></span><br><span class="line">std::array&lt;<span class="type">int</span>, 3&gt; marks = &#123;<span class="number">92</span>, <span class="number">97</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; marks[<span class="number">2</span>]; <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="操控"><a href="#操控" class="headerlink" title="操控"></a>操控</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─────┬─────┬─────┬─────┬─────┬─────┐</span><br><span class="line">| <span class="number">92</span>  | <span class="number">97</span>  | <span class="number">98</span>  | <span class="number">99</span>  | <span class="number">98</span>  | <span class="number">94</span>  |</span><br><span class="line">└─────┴─────┴─────┴─────┴─────┴─────┘</span><br><span class="line">   <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 6&gt; marks = &#123;</span><br><span class="line">  <span class="number">92</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">94</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 打印第一个元素</span></span><br><span class="line">std::cout &lt;&lt; marks[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 将第 2 个元素更改为 99</span></span><br><span class="line">marks[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line"><span class="comment">// 从用户那里获取输入</span></span><br><span class="line">std::cin &gt;&gt; marks[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ref[<span class="number">5</span>] = &#123;<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 基于范围的for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> &amp;n : ref) &#123;</span><br><span class="line">    std::cout &lt;&lt; std::<span class="built_in">string</span>(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传统的for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(ref); ++i) &#123;</span><br><span class="line">    std::cout &lt;&lt; ref[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多维"><a href="#多维" class="headerlink" title="多维"></a>多维</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     j0   j1   j2   j3   j4   j5</span><br><span class="line">   ┌────┬────┬────┬────┬────┬────┐</span><br><span class="line">i0 | <span class="number">1</span>  | <span class="number">2</span>  | <span class="number">3</span>  | <span class="number">4</span>  | <span class="number">5</span>  | <span class="number">6</span>  |</span><br><span class="line">   ├────┼────┼────┼────┼────┼────┤</span><br><span class="line">i1 | <span class="number">6</span>  | <span class="number">5</span>  | <span class="number">4</span>  | <span class="number">3</span>  | <span class="number">2</span>  | <span class="number">1</span>  |</span><br><span class="line">   └────┴────┴────┴────┴────┴────┘</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x[<span class="number">2</span>][<span class="number">6</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">        std::cout &lt;&lt; x[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 1 2 3 4 5 6 6 5 4 3 2 1</span></span><br></pre></td></tr></table></figure><h2 id="C-条件"><a href="#C-条件" class="headerlink" title="C++ 条件"></a>C++ 条件</h2><h3 id="If-Clause"><a href="#If-Clause" class="headerlink" title="If Clause"></a>If Clause</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;even&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;odd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: even</span></span><br></pre></td></tr></table></figure><h3 id="Else-if-语句"><a href="#Else-if-语句" class="headerlink" title="Else if 语句"></a>Else if 语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> score = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">if</span> (score == <span class="number">100</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Superb&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Excellent&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Very Good&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Good&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;What?&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><!--rehype:wrap-class=row-span-2--><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><table><thead><tr><th align="left">:–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>a == b</code></td><td>a 等于 b</td></tr><tr><td align="left"><code>a != b</code></td><td>a 不等于 b</td></tr><tr><td align="left"><code>a &lt; b</code></td><td>a 小于 b</td></tr><tr><td align="left"><code>a &gt; b</code></td><td>a 大于 b</td></tr><tr><td align="left"><code>a &lt;= b</code></td><td>a 小于或等于 b</td></tr><tr><td align="left"><code>a &gt;= b</code></td><td>a 大于或等于 b</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="left">范例</th><th>相当于</th></tr></thead><tbody><tr><td align="left"><code>a += b</code></td><td><em>Aka</em> <code>a = a + b</code></td></tr><tr><td align="left"><code>a -= b</code></td><td><em>Aka</em> <code>a = a - b</code></td></tr><tr><td align="left"><code>a *= b</code></td><td><em>Aka</em> <code>a = a * b</code></td></tr><tr><td align="left"><code>a /= b</code></td><td><em>Aka</em> <code>a = a / b</code></td></tr><tr><td align="left"><code>a %= b</code></td><td><em>Aka</em> <code>a = a % b</code></td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>Example</th><th>Meaning</th></tr></thead><tbody><tr><td><code>exp1 &amp;&amp; exp2</code></td><td>Both are true <em>(AND)</em></td></tr><tr><td>&#96;exp1</td><td></td></tr><tr><td><code>!exp</code></td><td><code>exp</code> is false <em>(NOT)</em></td></tr></tbody></table><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>a &amp; b</code></td><td>Binary AND</td></tr><tr><td>&#96;a</td><td>b&#96;</td></tr><tr><td><code>a ^ b</code></td><td>Binary XOR</td></tr><tr><td><code>a ~ b</code></td><td>Binary One’s Complement</td></tr><tr><td><code>a &lt;&lt; b</code></td><td>Binary Shift Left</td></tr><tr><td><code>a &gt;&gt; b</code></td><td>Binary Shift Right</td></tr></tbody></table><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">           ┌── True ──┐</span><br><span class="line">Result = Condition ? Exp1 : Exp2;</span><br><span class="line">           └───── False ─────┘</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">3</span>, y = <span class="number">5</span>, max;</span><br><span class="line">max = (x &gt; y) ? x : y;</span><br><span class="line"><span class="comment">// 输出: 5</span></span><br><span class="line">std::cout &lt;&lt; max &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">3</span>, y = <span class="number">5</span>, max;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    max = x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    max = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 5</span></span><br><span class="line">std::cout &lt;&lt; max &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Zero&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;One&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Two&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Three&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;What?&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-循环"><a href="#C-循环" class="headerlink" title="C++ 循环"></a>C++ 循环</h2><h3 id="While"><a href="#While" class="headerlink" title="While"></a>While</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">6</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 012345</span></span><br></pre></td></tr></table></figure><h3 id="Do-while"><a href="#Do-while" class="headerlink" title="Do-while"></a>Do-while</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    std::cout &lt;&lt; i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 输出: 12345</span></span><br></pre></td></tr></table></figure><h3 id="Continue-语句"><a href="#Continue-语句" class="headerlink" title="Continue 语句"></a>Continue 语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; i;</span><br><span class="line">&#125; <span class="comment">// 输出: 13579</span></span><br></pre></td></tr></table></figure><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// true or 1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;无限循环&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;无限循环&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;infinite loop&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-each-C-11-起"><a href="#for-each-C-11-起" class="headerlink" title="for_each (C++11 起)"></a>for_each (C++11 起)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> print = [](<span class="type">int</span> num) &#123;</span><br><span class="line">      std::cout &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::array&lt;<span class="type">int</span>, 4&gt; arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    std::for_each(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), print);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="基于范围-C-11-起"><a href="#基于范围-C-11-起" class="headerlink" title="基于范围 (C++11 起)"></a>基于范围 (C++11 起)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n : &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;) &#123;</span><br><span class="line">    std::cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::string hello = <span class="string">&quot;Quick Reference.ME&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c: hello)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: Q u i c k R e f . M E</span></span><br></pre></td></tr></table></figure><h3 id="中断语句"><a href="#中断语句" class="headerlink" title="中断语句"></a>中断语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> password, times = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (password != <span class="number">1234</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (times++ &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Locked!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Password: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; password; <span class="comment">// input</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Several-variations"><a href="#Several-variations" class="headerlink" title="Several variations"></a>Several variations</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">2</span>; i &lt; <span class="number">3</span>; i++, j--)&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;j=&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: i=0,j=2;i=1,j=1;i=2,j=0;</span></span><br></pre></td></tr></table></figure><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std:: string s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c: s)&#123;</span><br><span class="line">    std:: cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: h e l l o   w o r l d</span></span><br></pre></td></tr></table></figure><h2 id="C-函数"><a href="#C-函数" class="headerlink" title="C++ 函数"></a>C++ 函数</h2><h3 id="参数和返回"><a href="#参数和返回" class="headerlink" title="参数和返回"></a>参数和返回</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">add</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add</code> 是一个接受 2 个整数并返回整数的函数</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a + <span class="string">&quot; &quot;</span> + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(string a)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> <span class="comment">// 导入库</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// sqrt() 来自 cmath</span></span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><!--rehype:wrap-class=col-span-2--><p>Lambda 表达式可以在函数内定义，可以理解为在函数内定义的临时函数。格式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> func = []() -&gt; return_type &#123; &#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>[]</code>为捕获列表，能够捕获其所在函数的局部变量</p><ul><li><p>一个空的捕获列表代表Lambda表达式不捕获任何的变量</p></li><li><p>对于值捕获，直接在中括号中填写要捕获的变量即可：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> func = [val]() -&gt; return_type &#123; &#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对于引用捕获，需要在捕获的变量前添加<code>&amp;</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> func = [&amp;str]() -&gt; return_type &#123; &#125;;</span><br></pre></td></tr></table></figure></li><li><p>如果变量太多，需要编译器根据我们编写的代码自动捕获，可以采用隐式捕获的方式。</p><ul><li><p>全部值捕获：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val1, val2;</span><br><span class="line"><span class="keyword">auto</span> func = [=]() -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val1 + val2;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>全部引用捕获：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span>, <span class="title">str2</span><span class="params">(<span class="string">&quot;word!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> func = [&amp;]() -&gt; string</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str1 + str2;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>混合隐式捕获：</p><p>  如果希望对一部分变量采用值捕获，对其他变量采用引用捕获，可以混合使用：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val1 = <span class="number">123</span>, val2 = <span class="number">456</span>;</span><br><span class="line"><span class="function">string <span class="title">str1</span><span class="params">(<span class="string">&quot;123&quot;</span>)</span>, <span class="title">str2</span><span class="params">(<span class="number">456</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func1 = [=, &amp;str1]() -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>   val1 == std::<span class="built_in">stoi</span>(str1)</span><br><span class="line">              ? val1 : val2;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func2 = [&amp;, val1]() -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>   str1 == std::<span class="built_in">to_string</span>(val1)</span><br><span class="line">              ? str1 : str2;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>()</code> 是参数列表，我们只需要按照普通函数的使用方法来使用即可</p></li><li><p><code>return_type</code> 是函数的返回类型，<code>-&gt; return_type</code> 可以不写，编译器会自动推导</p></li><li><p><code>&#123;&#125;</code> 中的内容就是函数体，依照普通函数的使用方法使用即可</p></li></ul><!--rehype:className=style-timeline--><p>此处给出一个 Lambda 表达式的实际使用例子(当然可以使用 <code>str::copy</code>):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vec中包含1, 2, 3, 4, 5</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;)</span></span>;</span><br><span class="line">std::for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(),</span><br><span class="line">              [](<span class="type">int</span>&amp; ele) -&gt; <span class="type">void</span></span><br><span class="line">          &#123;</span><br><span class="line">              std::cout &lt;&lt; ele</span><br><span class="line">                          &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h2 id="C-多线程"><a href="#C-多线程" class="headerlink" title="C++多线程"></a>C++多线程</h2><h3 id="多线程介绍"><a href="#多线程介绍" class="headerlink" title="多线程介绍"></a>多线程介绍</h3><p>g++编译选项：<code>-std=c++11</code>。包含头文件：</p><ul><li><code>#include &lt;thread&gt;</code>：C++多线程库</li><li><code>#include &lt;mutex&gt;</code>：C++互斥量库</li><li><code>#include &lt;future&gt;</code>：C++异步库</li></ul><h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><!--rehype:wrap-class=row-span-2--><p>以普通函数作为线程入口函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">entry_1</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">entry_2</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">my_thread_1</span><span class="params">(entry_1)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">my_thread_2</span><span class="params">(entry_2, <span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>以类对象作为线程入口函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entry</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">entry_function</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Entry entry;</span><br><span class="line"><span class="comment">// 调用operator()()</span></span><br><span class="line"><span class="function">std::thread <span class="title">my_thread_1</span><span class="params">(entry)</span></span>;</span><br><span class="line"><span class="comment">// 调用Entry::entry_function</span></span><br><span class="line"><span class="function">std::thread <span class="title">my_thread_2</span><span class="params">(&amp;Entry::entry_function, &amp;entry)</span></span>;</span><br></pre></td></tr></table></figure><p>以lambda表达式作为线程入口函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">my_thread</span><span class="params">([]() -&gt; <span class="type">void</span></span></span></span><br><span class="line"><span class="params"><span class="function">      &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="params"><span class="function">      &#125;)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="线程的销毁"><a href="#线程的销毁" class="headerlink" title="线程的销毁"></a>线程的销毁</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thread my_thread;</span><br><span class="line"><span class="comment">// 阻塞</span></span><br><span class="line">my_thread.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">// 非阻塞</span></span><br><span class="line">my_thread.<span class="built_in">detach</span>();</span><br></pre></td></tr></table></figure><h3 id="this-thread"><a href="#this-thread" class="headerlink" title="this_thread"></a><code>this_thread</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前线程ID</span></span><br><span class="line">std::this_thread::<span class="built_in">get_id</span>();</span><br><span class="line"><span class="comment">// 使当前线程休眠一段指定时间</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>();</span><br><span class="line"><span class="comment">// 使当前线程休眠到指定时间</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_until</span>();</span><br><span class="line"><span class="comment">// 暂停当前线程的执行，让别的线程执行</span></span><br><span class="line">std::this_thread::<span class="built_in">yield</span>();</span><br></pre></td></tr></table></figure><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><!--rehype:wrap-class=row-span-5--><blockquote><p><code>#include &lt;mutex&gt;</code></p></blockquote><h4 id="锁的基本操作"><a href="#锁的基本操作" class="headerlink" title="锁的基本操作"></a>锁的基本操作</h4><p>创建锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::mutex m;</span><br></pre></td></tr></table></figure><p>上锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">lock</span>();</span><br></pre></td></tr></table></figure><p>解锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure><p>尝试上锁：成功返回<code>true</code>，失败返回<code>false</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">try_lock</span>();</span><br></pre></td></tr></table></figure><p>解锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure><h4 id="更简单的锁-——-std-lock-guard"><a href="#更简单的锁-——-std-lock-guard" class="headerlink" title="更简单的锁 —— std::lock_guard&lt;Mutex&gt;"></a>更简单的锁 —— <code>std::lock_guard&lt;Mutex&gt;</code></h4><p>构造时上锁，析构时解锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::mutex m;</span><br><span class="line"><span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m)</span></span>;</span><br></pre></td></tr></table></figure><p>额外参数：<code>std::adopt_lock</code>：只需解锁，无需上锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动上锁</span></span><br><span class="line">m.<span class="built_in">lock</span>();</span><br><span class="line"><span class="function">std::lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(m,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::adopt_lock)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="unique-lock"><a href="#unique-lock" class="headerlink" title="unique_lock&lt;Mutex&gt;"></a><code>unique_lock&lt;Mutex&gt;</code></h4><p>构造上锁，析构解锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::mutex m;</span><br><span class="line"><span class="function">std::unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="std-adopt-lock"><a href="#std-adopt-lock" class="headerlink" title="std::adopt_lock"></a><code>std::adopt_lock</code></h5><p>只需解锁，无需上锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动上锁</span></span><br><span class="line">m.<span class="built_in">lock</span>();</span><br><span class="line"><span class="function">std::unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::adopt_lock)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="std-try-to-lock"><a href="#std-try-to-lock" class="headerlink" title="std::try_to_lock"></a><code>std::try_to_lock</code></h5><p>尝试上锁，可以通过<code>std::unique_lock&lt;Mutex&gt;::owns_lock()</code>查看状态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::try_to_lock)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (lock.<span class="built_in">owns_lock</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 拿到了锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="std-defer-lock"><a href="#std-defer-lock" class="headerlink" title="std::defer_lock"></a><code>std::defer_lock</code></h5><p>绑定锁，但不上锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::defer_lock)</span></span>;</span><br><span class="line">lock.<span class="built_in">lock</span>();</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure><h5 id="std-unique-lock-release"><a href="#std-unique-lock-release" class="headerlink" title="std::unique_lock&lt;Mutex&gt;::release"></a><code>std::unique_lock&lt;Mutex&gt;::release</code></h5><p>返回所管理的<code>mutex</code>对象指针，**释放所有权。**一旦释放了所有权，那么如果原来互斥量处于互斥状态，程序员有责任手动解锁。</p><h4 id="std-call-once"><a href="#std-call-once" class="headerlink" title="std::call_once"></a><code>std::call_once</code></h4><p>当多个线程通过这个函数调用一个可调用对象时，只会有一个线程成功调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::once_flag flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">call_once</span>(flag, foo);</span><br></pre></td></tr></table></figure><h3 id="std-condition-variable"><a href="#std-condition-variable" class="headerlink" title="std::condition_variable"></a><code>std::condition_variable</code></h3><h4 id="创建条件变量"><a href="#创建条件变量" class="headerlink" title="创建条件变量"></a>创建条件变量</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::condition_variable cond;</span><br></pre></td></tr></table></figure><h4 id="等待条件变量被通知"><a href="#等待条件变量被通知" class="headerlink" title="等待条件变量被通知"></a>等待条件变量被通知</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">std::unique_lock&lt;std::mutex&gt;</span><br><span class="line">    lock;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">bool</span> <span class="title">predicate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式 1</span></span><br><span class="line">cond.<span class="built_in">wait</span>(lock);</span><br><span class="line"><span class="comment">// 调用方式 2</span></span><br><span class="line">cond.<span class="built_in">wait</span>(lock, predicate);</span><br></pre></td></tr></table></figure><hr><ul><li><code>wait</code>不断地尝试重新获取并加锁该互斥量，如果获取不到，它就卡在这里并反复尝试重新获取，如果获取到了，执行流程就继续往下走</li><li><code>wait</code>在获取到互斥量并加锁了互斥量之后：<ul><li>如果<code>wait</code>被提供了可调用对象，那么就执行这个可调用对象：<ul><li>如果返回值为<code>false</code>，那么<code>wait</code>继续加锁，直到再次被 notified</li><li>如果返回值为<code>true</code>，那么<code>wait</code>返回，继续执行流程</li></ul></li><li>如果<code>wait</code>没有第二个参数，那么直接返回，继续执行</li></ul></li></ul><h4 id="std-condition-variable-notify-one"><a href="#std-condition-variable-notify-one" class="headerlink" title="std::condition_variable::notify_one"></a><code>std::condition_variable::notify_one</code></h4><p><code>notify_one</code> 唤醒一个调用 <code>wait</code> 的线程。注意在唤醒之前要解锁，否则调用 <code>wait</code> 的线程也会因为无法加锁而阻塞。</p><h4 id="std-condition-variable-notify-all"><a href="#std-condition-variable-notify-all" class="headerlink" title="std::condition_variable::notify_all"></a><code>std::condition_variable::notify_all</code></h4><p>唤醒所有调用 <code>wait</code> 的线程。</p><h3 id="获取线程的运行结果"><a href="#获取线程的运行结果" class="headerlink" title="获取线程的运行结果"></a>获取线程的运行结果</h3><!--rehype:wrap-class=row-span-5--><blockquote><p><code>#include &lt;future&gt;</code></p></blockquote><h4 id="创建异步任务"><a href="#创建异步任务" class="headerlink" title="创建异步任务"></a>创建异步任务</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">func</span><span class="params">(<span class="type">int</span> val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用std::async创建异步任务</span></span><br><span class="line"><span class="comment">// 使用std::future获取结果</span></span><br><span class="line"><span class="comment">// future模板中存放返回值类型</span></span><br><span class="line">std::future&lt;<span class="type">double</span>&gt; result =</span><br><span class="line">    std::<span class="built_in">async</span>(func, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="获取异步任务的返回值"><a href="#获取异步任务的返回值" class="headerlink" title="获取异步任务的返回值"></a>获取异步任务的返回值</h4><p>等待异步任务结束，但是不获取返回值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.<span class="built_in">wait</span>();</span><br></pre></td></tr></table></figure><p>获取异步任务的返回值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = result.<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>get()</code>返回右值，因此只可调用一次</li><li>只要调用上述任意函数，线程就会一直阻塞到返回值可用（入口函数运行结束）</li></ul><h4 id="std-async-的额外参数"><a href="#std-async-的额外参数" class="headerlink" title="std::async 的额外参数"></a><code>std::async</code> 的额外参数</h4><p>额外参数可以被放在 <code>std::async</code> 的第一个参数位置，用于设定 <code>std::async</code> 的行为：</p><ul><li><code>std::launch::deferred</code>：入口函数的运行会被推迟到<code>std::future&lt;T&gt;::get()</code>或者<code>std::future&lt;T&gt;::wait()</code>被调用时。此时调用线程会直接运行线程入口函数，换言之，<strong>不会创建子线程</strong></li><li><code>std::launch::async</code>：立即创建子线程，并运行线程入口函数</li><li><code>std::launch::deferred | std::launch::async</code>：默认值，由系统自行决定</li></ul><h4 id="返回值的状态"><a href="#返回值的状态" class="headerlink" title="返回值的状态"></a>返回值的状态</h4><p>让当前线程等待一段时间（等待到指定时间点），以期待返回值准备好：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">double</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">std::future&lt;<span class="type">double</span>&gt; result =</span><br><span class="line">    <span class="built_in">async</span>(foo, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值类型</span></span><br><span class="line">std::future_status status;</span><br><span class="line"><span class="comment">// 等待一段时间</span></span><br><span class="line">status = result.<span class="built_in">wait_for</span>(</span><br><span class="line">  std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// 等待到某一时间点</span></span><br><span class="line">status = result.<span class="built_in">wait_for</span>(</span><br><span class="line">  std::chrono::<span class="built_in">now</span>() +</span><br><span class="line">    std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>在指定的时间过去后，可以获取等待的结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值已经准备好</span></span><br><span class="line"><span class="keyword">if</span> (status ==</span><br><span class="line">     std::future_status::ready)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超时：尚未准备好</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status ==</span><br><span class="line">    std::future_status::timeout)</span><br><span class="line">&#123; &#125;</span><br><span class="line"><span class="comment">// 尚未启动: std::launch::deferred</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status ==</span><br><span class="line">    std::future_status::deferred)</span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure><h4 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h4><p>如果要多次获取结果，可以使用<code>std::shared_future</code>，其会返回结果的一个<strong>拷贝</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::shared_future&lt;T&gt; result;</span><br></pre></td></tr></table></figure><p>对于不可拷贝对象，可以在<code>std::shared_future</code>中存储对象的指针，而非指针本身。</p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 线程函数体</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;From thread&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建线程并开始执行线程函数</span></span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(threadFunction)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 等待线程执行完毕</span></span><br><span class="line">  t.<span class="built_in">join</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递参数给线程函数"><a href="#传递参数给线程函数" class="headerlink" title="传递参数给线程函数"></a>传递参数给线程函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 线程函数体</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Received value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> data = <span class="number">42</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(threadFunction, data)</span></span>;</span><br><span class="line">  t.<span class="built_in">join</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Lambda表达式创建线程"><a href="#使用Lambda表达式创建线程" class="headerlink" title="使用Lambda表达式创建线程"></a>使用Lambda表达式创建线程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> data = <span class="number">42</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">([data]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="comment">// Lambda 表达式作为线程函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">      std::cout &lt;&lt; <span class="string">&quot;Received value: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;)</span></span>;</span><br><span class="line">  t.<span class="built_in">join</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理线程间的同步："><a href="#处理线程间的同步：" class="headerlink" title="处理线程间的同步："></a><strong>处理线程间的同步：</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Thread safe output.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::thread <span class="title">t1</span><span class="params">(threadFunction)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t2</span><span class="params">(threadFunction)</span></span>;</span><br><span class="line">  t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">  t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用std-async启动异步任务："><a href="#使用std-async启动异步任务：" class="headerlink" title="使用std::async启动异步任务："></a><strong>使用<code>std::async</code>启动异步任务：</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">taskFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 异步任务</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 启动异步任务</span></span><br><span class="line">  std::future&lt;<span class="type">int</span>&gt; fut = std::<span class="built_in">async</span>(std::launch::async, taskFunction);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取异步任务的结果</span></span><br><span class="line">  <span class="type">int</span> result = fut.<span class="built_in">get</span>();</span><br><span class="line">  </span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Result: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-预处理器"><a href="#C-预处理器" class="headerlink" title="C++ 预处理器"></a>C++ 预处理器</h2><h3 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3><!--rehype:wrap-class=row-span-3--><ul><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">if</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">elif</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">else</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">endif</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">ifdef</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">ifndef</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/replace">define</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/replace">undef</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/include">include</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/line">line</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/error">error</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/impl">pragma</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">defined</a></li><li><a href="https://zh.cppreference.com/w/cpp/feature_test">__has_include</a></li><li><a href="https://zh.cppreference.com/w/cpp/feature_test">__has_cpp_attribute</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/export">export</a></li><li><a href="https://zh.cppreference.com/mwiki/index.php?title=cpp/keyword/import&amp;action=edit&amp;redlink=1">import</a></li><li><a href="https://zh.cppreference.com/mwiki/index.php?title=cpp/keyword/module&amp;action=edit&amp;redlink=1">module</a></li></ul><!--rehype:className=style-none cols-2--><h3 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Defines"><a href="#Defines" class="headerlink" title="Defines"></a>Defines</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FOO</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOO <span class="string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> FOO</span></span><br></pre></td></tr></table></figure><h3 id="If"><a href="#If" class="headerlink" title="If"></a>If</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined VERBOSE</span></span><br><span class="line">  ...</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  ...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> VERSION == 2.0</span></span><br><span class="line">  <span class="meta">#<span class="keyword">error</span> Unsupported</span></span><br><span class="line">  <span class="meta">#<span class="keyword">warning</span> Not really supported</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEG(x) ((x) * 57.29)</span></span><br></pre></td></tr></table></figure><h3 id="令牌连接"><a href="#令牌连接" class="headerlink" title="令牌连接"></a>令牌连接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DST(name) name##_s name##_t</span></span><br><span class="line"><span class="built_in">DST</span>(object);   #=&gt; object_s <span class="type">object_t</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串化"><a href="#字符串化" class="headerlink" title="字符串化"></a>字符串化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STR(name) #name</span></span><br><span class="line"><span class="type">char</span> * a = <span class="built_in">STR</span>(object);   #=&gt; <span class="type">char</span> * a = <span class="string">&quot;object&quot;</span>;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="文件和行"><a href="#文件和行" class="headerlink" title="文件和行"></a>文件和行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(msg) console.log(__FILE__, __LINE__, msg)</span></span><br><span class="line">#=&gt; console.<span class="built_in">log</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="number">3</span>, <span class="string">&quot;hey&quot;</span>)</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h2 id="各种各样的"><a href="#各种各样的" class="headerlink" title="各种各样的"></a>各种各样的</h2><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><table><thead><tr><th align="left">转义序列</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>\b</code></td><td>退格键</td></tr><tr><td align="left"><code>\f</code></td><td>换页</td></tr><tr><td align="left"><code>\n</code></td><td>换行</td></tr><tr><td align="left"><code>\r</code></td><td>返回</td></tr><tr><td align="left"><code>\t</code></td><td>水平制表符</td></tr><tr><td align="left"><code>\v</code></td><td>垂直制表符</td></tr><tr><td align="left"><code>\\</code></td><td>反斜杠</td></tr><tr><td align="left"><code>\&#39;</code></td><td>单引号</td></tr><tr><td align="left"><code>\&quot;</code></td><td>双引号</td></tr><tr><td align="left"><code>\?</code></td><td>问号</td></tr><tr><td align="left"><code>\0</code></td><td>空字符</td></tr></tbody></table><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><!--rehype:wrap-class=row-span-2 col-span-2--><ul><li><a href="https://zh.cppreference.com/w/cpp/keyword/alignas">alignas</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/alignof">alignof</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/and">and</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/and_eq">and_eq</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/asm">asm</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/atomic_cancel">atomic_cancel</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/atomic_commit">atomic_commit</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/atomic_noexcept">atomic_noexcept</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/auto">auto</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/bitand">bitand</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/bitor">bitor</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/bool">bool</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/break">break</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/case">case</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/catch">catch</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/char">char</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/char8_t">char8_t</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/char16_t">char16_t</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/char32_t">char32_t</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/class">class</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/compl">compl</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/concept">concept</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/const">const</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/consteval">consteval</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/constexpr">constexpr</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/constinit">constinit</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/const_cast">const_cast</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/continue">continue</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/co_await">co_await</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/co_return">co_return</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/co_yield">co_yield</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/decltype">decltype</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/default">default</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/delete">delete</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/do">do</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/double">double</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/dynamic_cast">dynamic_cast</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/else">else</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/enum">enum</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/explicit">explicit</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/export">export</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/extern">extern</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/false">false</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/float">float</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/for">for</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/friend">friend</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/goto">goto</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/if">if</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/inline">inline</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/int">int</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/long">long</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/mutable">mutable</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/namespace">namespace</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/new">new</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/noexcept">noexcept</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/not">not</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/not_eq">not_eq</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/nullptr">nullptr</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/operator">operator</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/or">or</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/or_eq">or_eq</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/private">private</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/protected">protected</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/public">public</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/reflexpr">reflexpr</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/register">register</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/reinterpret_cast">reinterpret_cast</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/requires">requires</a></li><li><a href="https://zh.cppreference.com/w/cpp/language/return">return</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/short">short</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/signed">signed</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/sizeof">sizeof</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/static">static</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/static_assert">static_assert</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/static_cast">static_cast</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/struct">struct</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/switch">switch</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/synchronized">synchronized</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/template">template</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/this">this</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/thread_local">thread_local</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/throw">throw</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/true">true</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/try">try</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/typedef">typedef</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/typeid">typeid</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/typename">typename</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/union">union</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/unsigned">unsigned</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/using">using</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/virtual">virtual</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/void">void</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/volatile">volatile</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/wchar_t">wchar_t</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/while">while</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/xor">xor</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/xor_eq">xor_eq</a></li><li><a href="https://zh.cppreference.com/w/cpp/language/final">final</a></li><li><a href="https://zh.cppreference.com/w/cpp/language/override">override</a></li><li><a href="https://zh.cppreference.com/w/cpp/language/transactional_memory">transaction_safe</a></li><li><a href="https://zh.cppreference.com/w/cpp/language/transactional_memory">transaction_safe_dynamic</a></li></ul><!--rehype:className=style-none cols-5--><h3 id="预处理器-1"><a href="#预处理器-1" class="headerlink" title="预处理器"></a>预处理器</h3><ul><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">if</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">elif</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">else</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">endif</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">ifdef</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">ifndef</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/replace">define</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/replace">undef</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/include">include</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/line">line</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/error">error</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/impl">pragma</a></li><li><a href="https://zh.cppreference.com/w/cpp/preprocessor/conditional">defined</a></li><li><a href="https://zh.cppreference.com/w/cpp/feature_test">__has_include</a></li><li><a href="https://zh.cppreference.com/w/cpp/feature_test">__has_cpp_attribute</a></li><li><a href="https://zh.cppreference.com/w/cpp/keyword/export">export</a></li><li><a href="https://zh.cppreference.com/mwiki/index.php?title=cpp/keyword/import&amp;action=edit&amp;redlink=1">import</a></li><li><a href="https://zh.cppreference.com/mwiki/index.php?title=cpp/keyword/module&amp;action=edit&amp;redlink=1">module</a></li></ul><!--rehype:className=style-none cols-2--><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://hackingcpp.com/cpp/cheat_sheets.html">C++ Infographics &amp; Cheat Sheets</a> <em>(hackingcpp.com)</em></li><li><a href="https://zh.cppreference.com/w/">C++ reference</a> <em>(cppreference.com)</em></li><li><a href="http://www.cplusplus.com/doc/tutorial/">C++ Language Tutorials</a> <em>(cplusplus.com)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-备忘清单&quot;&gt;&lt;a href=&quot;#C-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;C++ 备忘清单&quot;&gt;&lt;/a&gt;C++ 备忘清单&lt;/h1&gt;&lt;p&gt;提供基本语法和方法的 &lt;a href=&quot;https://zh.cppreference.com/&quot;&gt;</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++" scheme="https://tdcqcx.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CSS 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/css/"/>
    <id>https://tdcqcx.github.io/2025/01/08/css/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-备忘清单"><a href="#CSS-备忘清单" class="headerlink" title="CSS 备忘清单"></a>CSS 备忘清单</h1><p>这是一份关于 CSS 优点的快速参考备忘单，列出了选择器语法、属性、单位和其他有用的信息</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><!--rehype:wrap-class=row-span-3--><p>CSS 功能丰富，不仅仅是布局页面</p><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表 &lt;link&gt;&lt;/link&gt;"></a>外部样式表 <code>&lt;link&gt;&lt;/link&gt;</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;./path/to/stylesheet/style.css&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表 &lt;style&gt;"></a>内部样式表 <code>&lt;style&gt;</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: linen;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联样式-style"><a href="#内联样式-style" class="headerlink" title="内联样式 style"></a>内联样式 <code>style</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">  居中文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue; font-size: 18px;&quot;</span>&gt;</span></span><br><span class="line">  蓝色，18像素文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h3 id="添加-class-类"><a href="#添加-class-类" class="headerlink" title="添加 class 类"></a>添加 class 类</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;classname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class1 ... classn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>支持一个元素上的多个类</p><h3 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>覆盖所有以前的样式规则</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; &#125; </span><br><span class="line"><span class="selector-id">#job-title</span> &#123; &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.hero</span> &#123; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-%E9%80%89%E6%8B%A9%E5%99%A8">CSS 选择器</a></p><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#2a2aff</span>;</span><br><span class="line"><span class="attribute">color</span>: green;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">30</span> <span class="number">100%</span> <span class="number">50%</span> / <span class="number">0.6</span>);</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-%E9%A2%9C%E8%89%B2">Colors</a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: blue;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;nyan-cat.gif&quot;</span>);</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../image.png&quot;</span>);</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-%E8%83%8C%E6%99%AF">Backgrounds</a></p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Courier New&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-%E5%AD%97%E4%BD%93">Fonts</a></p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://learn-the-web.algonquindesign.ca/topics/css-layout-cheat-sheet/">Position</a></p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: <span class="number">300ms</span> linear <span class="number">0s</span> infinite;</span><br><span class="line"><span class="attribute">animation</span>: bounce <span class="number">300ms</span> linear infinite;</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-%E5%8A%A8%E7%94%BB">Animation</a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是一行注释 */</span></span><br><span class="line"><span class="comment">/* 这是</span></span><br><span class="line"><span class="comment">   多行注释 */</span></span><br></pre></td></tr></table></figure><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-flexbox">Flexbox</a> | <a href="#css-flexbox-%E6%8A%80%E5%B7%A7">Flex Tricks</a></p><h3 id="Grid-布局"><a href="#Grid-布局" class="headerlink" title="Grid 布局"></a>Grid 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">60px</span>) / auto-flow <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#8ca0ff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#grid-%E5%B8%83%E5%B1%80">Grid Layout</a></p><h3 id="变量和计数器"><a href="#变量和计数器" class="headerlink" title="变量和计数器"></a>变量和计数器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">counter-set</span>: subsection;</span><br><span class="line"><span class="attribute">counter-increment</span>: subsection;</span><br><span class="line"><span class="attribute">counter-reset</span>: subsection <span class="number">0</span>;</span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--bg-color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line">element &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#css-%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9">动态内容</a></p><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><!--rehype:wrap-class=row-span-2--><h4 id="组选择器"><a href="#组选择器" class="headerlink" title="组选择器"></a>组选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链选择器"><a href="#链选择器" class="headerlink" title="链选择器"></a>链选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.section-heading</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[attribute=<span class="string">&quot;SomeValue&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第一个子选择器"><a href="#第一个子选择器" class="headerlink" title="第一个子选择器"></a>第一个子选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无子选择器"><a href="#无子选择器" class="headerlink" title="无子选择器"></a>无子选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: lime;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>*</code></td><td align="left">所有元素</td></tr><tr><td align="left"><code>div</code></td><td align="left">所有 div 标签</td></tr><tr><td align="left"><code>.classname</code></td><td align="left">具有类的所有元素</td></tr><tr><td align="left"><code>#idname</code></td><td align="left">带 ID 的元素</td></tr><tr><td align="left"><code>div,p</code></td><td align="left">所有 div 和段落</td></tr><tr><td align="left"><code>#idname *</code></td><td align="left">#idname 中的所有元素</td></tr></tbody></table><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">元素</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通配</a> 选择器</p><h3 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>div.classname</code></td><td align="left">具有特定类名的 div</td></tr><tr><td align="left"><code>div#idname</code></td><td align="left">具有特定 ID 的 div</td></tr><tr><td align="left"><code>div p</code></td><td align="left">div 中的所有段落</td></tr><tr><td align="left"><code>div &gt; p</code></td><td align="left">父元素是 div 的 <code>P</code> 标签</td></tr><tr><td align="left"><code>div + p</code></td><td align="left">div 之后的第一个同级 <code>P</code> 标签</td></tr><tr><td align="left"><code>div ~ p</code></td><td align="left">div 之后所有的同级 <code>P</code> 标签</td></tr></tbody></table><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator">相邻兄弟</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator">通用兄弟</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">子</a> 选择器</p><h3 id="属性选择器-1"><a href="#属性选择器-1" class="headerlink" title="属性选择器"></a>属性选择器</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>a[target]</code></td><td align="left">带有 <yel>target</yel> 属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attr">#</a></td></tr><tr><td align="left"><code>a[target=&quot;_blank&quot;]</code></td><td align="left">在新标签中打开 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue">#</a></td></tr><tr><td align="left"><code>a[href^=&quot;/index&quot;]</code></td><td align="left">以 <yel>&#x2F;index</yel> 开头 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue_4">#</a></td></tr><tr><td align="left"><code>[class|=&quot;chair&quot;]</code></td><td align="left">以<yel>chair</yel>开头 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue_3">#</a></td></tr><tr><td align="left"><code>[class*=&quot;chair&quot;]</code></td><td align="left">包含<yel>chair</yel> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue_6">#</a></td></tr><tr><td align="left"><code>[title~=&quot;chair&quot;]</code></td><td align="left">包含单词 <yel>chair</yel> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue_2">#</a></td></tr><tr><td align="left"><code>a[href$=&quot;.doc&quot;]</code></td><td align="left">以 <yel>.doc</yel> 结尾 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue_5">#</a></td></tr><tr><td align="left"><code>[type=&quot;button&quot;]</code></td><td align="left">指定类型 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors#attrvalue">#</a></td></tr></tbody></table><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">属性选择器</a></p><h3 id="用户操作伪类"><a href="#用户操作伪类" class="headerlink" title="用户操作伪类"></a>用户操作伪类</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>a:link</code></td><td align="left">链接正常 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:link">#</a></td></tr><tr><td align="left"><code>a:active</code></td><td align="left">链接处于点击状态 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:active">#</a></td></tr><tr><td align="left"><code>a:hover</code></td><td align="left">鼠标悬停链接 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover">#</a></td></tr><tr><td align="left"><code>a:visited</code></td><td align="left">访问链接 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited">#</a></td></tr></tbody></table><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: blue; &#125;        </span><br><span class="line"><span class="comment">/* 已访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: purple; &#125;   </span><br><span class="line"><span class="comment">/* 用户鼠标悬停 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">background</span>: yellow; &#125;</span><br><span class="line"><span class="comment">/* 激活链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: red; &#125;       </span><br></pre></td></tr></table></figure><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>p::after</code></td><td align="left">在 p 之后添加内容 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after">#</a></td></tr><tr><td align="left"><code>p::before</code></td><td align="left">在 p 之前添加内容 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before">#</a></td></tr><tr><td align="left"><code>p::first-letter</code></td><td align="left">p中的第一个字母 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter">#</a></td></tr><tr><td align="left"><code>p::first-line</code></td><td align="left">p 中的第一行 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line">#</a></td></tr><tr><td align="left"><code>::selection</code></td><td align="left">由用户选择 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection">#</a></td></tr><tr><td align="left"><code>::placeholder</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::placeholder">占位符</a> 属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::placeholder">#</a></td></tr><tr><td align="left"><code>:root</code></td><td align="left">文档根元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root">#</a></td></tr><tr><td align="left"><code>:target</code></td><td align="left">突出显示活动锚点 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:target">#</a></td></tr><tr><td align="left"><code>div:empty</code></td><td align="left">没有子元素的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty">#</a></td></tr><tr><td align="left"><code>p:lang(en)</code></td><td align="left">带有 en 语言属性的 P <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:lang">#</a></td></tr><tr><td align="left"><code>:not(span)</code></td><td align="left">不是跨度的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not">#</a></td></tr><tr><td align="left"><code>:host</code></td><td align="left">shadowDOM 中选择自定义元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root">#</a></td></tr><tr><td align="left"><code>::backdrop</code></td><td align="left">处于全屏模式的元素样式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::backdrop">#</a></td></tr><tr><td align="left"><code>::marker</code></td><td align="left"><code>li</code> 项目符号或者数字 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::marker">#</a></td></tr><tr><td align="left"><code>::file-selector-button</code></td><td align="left">type&#x3D;”file” <code>input</code> 按钮 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::file-selector-button">#</a></td></tr></tbody></table><h3 id="输入伪类"><a href="#输入伪类" class="headerlink" title="输入伪类"></a>输入伪类</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>input:checked</code></td><td align="left">检查 <code>input</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked">#</a></td></tr><tr><td align="left"><code>input:disabled</code></td><td align="left">禁用 <code>input</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:disabled">#</a></td></tr><tr><td align="left"><code>input:enabled</code></td><td align="left">启用的 <code>input</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:enabled">#</a></td></tr><tr><td align="left"><code>input:default</code></td><td align="left">有默认值的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:default">#</a></td></tr><tr><td align="left"><code>input:blank</code></td><td align="left">空的输入框 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:blank">#</a></td></tr><tr><td align="left"><code>input:focus</code></td><td align="left"><code>input</code> 有焦点 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus">#</a></td></tr><tr><td align="left"><code>input:in-range</code></td><td align="left">范围内的值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:in-range">#</a></td></tr><tr><td align="left"><code>input:out-of-range</code></td><td align="left"><code>input</code> 值超出范围 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:out-of-range">#</a></td></tr><tr><td align="left"><code>input:valid</code></td><td align="left"><code>input</code> 有效值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:valid">#</a></td></tr><tr><td align="left"><code>input:invalid</code></td><td align="left"><code>input</code> 无效值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:invalid">#</a></td></tr><tr><td align="left"><code>input:optional</code></td><td align="left">没有必需的属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:optional">#</a></td></tr><tr><td align="left"><code>input:required</code></td><td align="left">带有必需属性的 <code>input</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:required">#</a></td></tr><tr><td align="left"><code>input:read-only</code></td><td align="left">具有只读属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-only">#</a></td></tr><tr><td align="left"><code>input:read-write</code></td><td align="left">没有只读属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-write">#</a></td></tr><tr><td align="left"><code>input:indeterminate</code></td><td align="left">带有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:indeterminate">indeterminate</a> 状态 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:indeterminate">#</a></td></tr></tbody></table><h3 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h3><table><thead><tr><th align="left">选择器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>p:first-child</code></td><td align="left">第一个孩子 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-child">#</a></td></tr><tr><td align="left"><code>p:last-child</code></td><td align="left">最后一个孩子 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-child">#</a></td></tr><tr><td align="left"><code>p:first-of-type</code></td><td align="left">第一个 p 类型的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-of-type">#</a></td></tr><tr><td align="left"><code>p:last-of-type</code></td><td align="left">某种类型的最后一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-of-type">#</a></td></tr><tr><td align="left"><code>p:nth-child(2)</code></td><td align="left">其父母的第二个孩子 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child">#</a></td></tr><tr><td align="left"><code>p:nth-child(3n42)</code></td><td align="left">Nth-child(an + b) 公式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child">#</a></td></tr><tr><td align="left"><code>p:nth-last-child(2)</code></td><td align="left">后面的二孩 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-child">#</a></td></tr><tr><td align="left"><code>p:nth-of-type(2)</code></td><td align="left">其父级的第二个 p <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type">#</a></td></tr><tr><td align="left"><code>p:nth-last-of-type(2)</code></td><td align="left">…从后面 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-of-type">#</a></td></tr><tr><td align="left"><code>p:only-of-type</code></td><td align="left">其父级的唯一性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-of-type">#</a></td></tr><tr><td align="left"><code>p:only-child</code></td><td align="left">其父母的唯一孩子 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-child">#</a></td></tr><tr><td align="left"><code>:is(header, div) p</code></td><td align="left">可以选择的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is">#</a></td></tr><tr><td align="left"><code>:where(header, div) p</code></td><td align="left">与 <code>:is</code> 相同 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where">#</a></td></tr><tr><td align="left"><code>a:has(&gt; img)</code></td><td align="left">包含 <code>img</code> 元素的 <code>a</code> 元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has">#</a></td></tr><tr><td align="left"><code>::first-letter</code></td><td align="left">第一行的第一个字母 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter">#</a></td></tr><tr><td align="left"><code>::first-line</code></td><td align="left">第一行应用样式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line">#</a></td></tr></tbody></table><h2 id="CSS-字体"><a href="#CSS-字体" class="headerlink" title="CSS 字体"></a>CSS 字体</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><!--rehype:wrap-class=row-span-3--><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>font-family:</code></td><td align="left">字体族名或通用字体族名 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">#</a></td></tr><tr><td align="left"><code>font-size:</code></td><td align="left">字体的大小 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size">#</a></td></tr><tr><td align="left"><code>letter-spacing:</code></td><td align="left">文本字符的间距 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/letter-spacing">#</a></td></tr><tr><td align="left"><code>line-height:</code></td><td align="left">多行文本间距 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height">#</a></td></tr><tr><td align="left"><code>font-weight:</code></td><td align="left">粗细程度 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight">#</a></td></tr><tr><td align="left"><code>font-style:</code></td><td align="left">字体样式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style">#</a></td></tr><tr><td align="left"><code>text-decoration:</code></td><td align="left">文本的修饰线外观 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration">#</a></td></tr><tr><td align="left"><code>text-align:</code></td><td align="left">相对它的块父元素对齐 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align">#</a></td></tr><tr><td align="left"><code>text-transform:</code></td><td align="left">指定文本大小写 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-transform">#</a></td></tr></tbody></table><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font">Font</a></p><h3 id="速记"><a href="#速记" class="headerlink" title="速记"></a>速记</h3><!--rehype:wrap-class=col-span-2&style=background:#ffeb3bcf;color:#333;--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>: italic    <span class="number">400</span>     <span class="number">14px</span>    /     <span class="number">1.5</span>        sans-serif</span><br><span class="line">      ┈┈┬┈┈┈    ┈┬┈     ┈┬┈┈          ┈┬┈        ┈┬┈┈┈┈┈┈┈┈</span><br><span class="line">       样式      粗细    大小(必需的)    行高        字体(必需的)</span><br></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12pt</span>;</span><br><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">0.02em</span>;</span><br></pre></td></tr></table></figure><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 首字母大写 Hello */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">  <span class="comment">/* 字母大写 HELLO */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="comment">/* 字母小写 hello */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: lowercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Glegoo&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../Glegoo.woff&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-颜色"><a href="#CSS-颜色" class="headerlink" title="CSS 颜色"></a>CSS 颜色</h2><h3 id="命名颜色"><a href="#命名颜色" class="headerlink" title="命名颜色"></a>命名颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">color</span>: orange;</span><br><span class="line"><span class="attribute">color</span>: tan;</span><br><span class="line"><span class="attribute">color</span>: rebeccapurple;</span><br></pre></td></tr></table></figure><p>更多标准<a href="./colors-named.md">颜色名称</a></p><h3 id="十六进制颜色"><a href="#十六进制颜色" class="headerlink" title="十六进制颜色"></a>十六进制颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#090</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#009900</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#090a</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#009900aa</span>;</span><br></pre></td></tr></table></figure><h3 id="rgb-颜色"><a href="#rgb-颜色" class="headerlink" title="rgb() 颜色"></a>rgb() 颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">34</span> <span class="number">12</span> <span class="number">64</span> / <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">34</span> <span class="number">12</span> <span class="number">64</span> / <span class="number">0.3</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">34.0</span> <span class="number">12</span> <span class="number">64</span> / <span class="number">60%</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">34.6</span> <span class="number">12</span> <span class="number">64</span> / <span class="number">30%</span>);</span><br></pre></td></tr></table></figure><h3 id="HSL-颜色"><a href="#HSL-颜色" class="headerlink" title="HSL 颜色"></a>HSL 颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">30</span>, <span class="number">100%</span>, <span class="number">50%</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">30</span>, <span class="number">100%</span>, <span class="number">50%</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">30</span> <span class="number">100%</span> <span class="number">50%</span> / <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">30</span> <span class="number">100%</span> <span class="number">50%</span> / <span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">30.0</span> <span class="number">100%</span> <span class="number">50%</span> / <span class="number">60%</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsla</span>(<span class="number">30.2</span> <span class="number">100%</span> <span class="number">50%</span> / <span class="number">60%</span>);</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: inherit;</span><br><span class="line"><span class="attribute">color</span>: initial;</span><br><span class="line"><span class="attribute">color</span>: unset;</span><br><span class="line"><span class="attribute">color</span>: transparent;</span><br><span class="line"><span class="attribute">color</span>: currentcolor; <span class="comment">/* 关键字 */</span></span><br></pre></td></tr></table></figure><h3 id="全局值"><a href="#全局值" class="headerlink" title="全局值"></a>全局值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局值 */</span></span><br><span class="line"><span class="attribute">color</span>: inherit;</span><br><span class="line"><span class="attribute">color</span>: initial;</span><br><span class="line"><span class="attribute">color</span>: unset;</span><br></pre></td></tr></table></figure><h2 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>background:</code></td><td align="left"><em>(<a href="#%E9%80%9F%E8%AE%B0-1">速记</a>)</em></td></tr><tr><td align="left"><code>background-color:</code></td><td align="left">查看: <a href="#css-%E9%A2%9C%E8%89%B2">Colors</a></td></tr><tr><td align="left"><code>background-image:</code></td><td align="left">一个或者多个背景图像</td></tr><tr><td align="left"><code>background-position:</code></td><td align="left">背景图片设置初始位置</td></tr><tr><td align="left"><code>background-size:</code></td><td align="left">背景图片大小</td></tr><tr><td align="left"><code>background-clip:</code></td><td align="left">背景(图片或颜色)是否延伸到边框、内边距盒子、内容盒子下面</td></tr><tr><td align="left"><code>background-repeat:</code></td><td align="left">图像重复方式</td></tr><tr><td align="left"><code>background-attachment:</code></td><td align="left"><code>scroll</code>&#x2F;<code>fixed</code>&#x2F;<code>local</code></td></tr></tbody></table><h3 id="速记-1"><a href="#速记-1" class="headerlink" title="速记"></a>速记</h3><!--rehype:wrap-class=col-span-2&style=background:#ffeb3bcf;color:#333;--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#ff0</span>   <span class="built_in">url</span>(<span class="string">a.jpg</span>)   left     top    /  <span class="number">100px</span> auto   no-repeat   fixed;</span><br><span class="line">            <span class="selector-id">#abc</span>   url(<span class="selector-tag">b</span><span class="selector-class">.png</span>)   center   center /  cover        repeat-<span class="attribute">x</span>    local;</span><br><span class="line">            ┈┬┈┈    ┈┬┈┈┈┈┈┈┈   ┈┬┈┈     ┈┬┈       ┈┈┬┈┈┈┈┈┈┈   ┈┈┬┈┈┈┈┈┈   ┈┈┬┈┈┈</span><br><span class="line">            颜色     图片         位置<span class="attribute">x</span>    位置<span class="attribute">x</span>       图片大小     图像重复方式  位置是在视口内固定</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img_flwr.gif</span>) right bottom no-repeat, <span class="built_in">url</span>(<span class="string">paper.gif</span>) left top repeat;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img_man.jpg</span>) no-repeat center;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">36</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="built_in">rgba</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">36</span>,<span class="number">1</span>) <span class="number">0%</span>,</span><br><span class="line">  <span class="built_in">rgba</span>(<span class="number">13</span>,<span class="number">232</span>,<span class="number">230</span>,<span class="number">1</span>) <span class="number">35%</span>,</span><br><span class="line">  <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">212</span>,<span class="number">255</span>,<span class="number">1</span>) <span class="number">100%</span>);</span><br></pre></td></tr></table></figure><h2 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h2><h3 id="最大值-最小值"><a href="#最大值-最小值" class="headerlink" title="最大值&#x2F;最小值"></a>最大值&#x2F;最小值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>; <span class="comment">/* 最大宽度 200 像素 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;     <span class="comment">/* 宽度 500 像素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-width">max-width</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-width">min-width</a> &#x2F;  <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-height">max-height</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-height">min-height</a></p><h3 id="边距-补白"><a href="#边距-补白" class="headerlink" title="边距&#x2F;补白"></a>边距&#x2F;补白</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-one</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;  <span class="comment">/* 边距 20 像素 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="comment">/* 补白 10 像素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin">边距(margin)</a> &#x2F; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding">补白(padding)</a></p><h3 id="Box-sizing"><a href="#Box-sizing" class="headerlink" title="Box-sizing"></a>Box-sizing</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 设置的边框和补白的值是包含在 width 内的 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Box-sizing">box-sizing</a></p><h3 id="能见度"><a href="#能见度" class="headerlink" title="能见度"></a>能见度</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.invisible-elements</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden; <span class="comment">/* 隐藏元素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility">Visibility</a></p><h3 id="Auto-关键字"><a href="#Auto-关键字" class="headerlink" title="Auto 关键字"></a>Auto 关键字</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 览器自己选择一个合适的外边距 */</span></span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin">边距(margin)</a></p><h3 id="溢出-Overflow"><a href="#溢出-Overflow" class="headerlink" title="溢出(Overflow)"></a>溢出(Overflow)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.small-block</span> &#123;</span><br><span class="line">  <span class="comment">/* 浏览器总是显示滚动条 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow">溢出(overflow)</a></p><h2 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h2><!--rehype:wrap-class=col-5--><h3 id="速记-2"><a href="#速记-2" class="headerlink" title="速记"></a>速记</h3><!--rehype:wrap-class=col-span-5&style=background:#ffeb3bcf;color:#333;--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>:  bounce   <span class="number">300ms</span>      linear     <span class="number">100ms</span>    infinite   alternate-reverse  both                   reverse  </span><br><span class="line">            ┈┬┈┈     ┈┬┈┈┈      ┈┬┈┈┈┈     ┈┈┬┈┈    ┈┈┈┬┈┈┈┈   ┈┈┬┈┈┈┈┈┈┈┈┈┈┈┈┈┈  ┈┈┬┈┈┈                 ┈┈┬┈┈┈</span><br><span class="line">            动画名    动画时间     缓动函数    延迟     运行的次数   动画是否反向播放      如何将样式应用于其目标    是否运行或者暂停</span><br></pre></td></tr></table></figure><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><!--rehype:wrap-class=row-span-2 col-span-3--><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>animation:</code></td><td align="left"><em>(<a href="#%E9%80%9F%E8%AE%B0-2">速记</a>)</em></td></tr><tr><td align="left"><code>animation-name:</code></td><td align="left">动画名 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-name">#</a></td></tr><tr><td align="left"><code>animation-duration:</code></td><td align="left">动画周期的时长 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-duration">#</a></td></tr><tr><td align="left"><code>animation-timing-function:</code></td><td align="left">缓动函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timing-function">#</a></td></tr><tr><td align="left"><code>animation-delay:</code></td><td align="left">延迟 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-delay">#</a></td></tr><tr><td align="left"><code>animation-iteration-count:</code></td><td align="left">运行的次数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-iteration-count">#</a></td></tr><tr><td align="left"><code>animation-direction:</code></td><td align="left">动画是否反向播放 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-direction">#</a></td></tr><tr><td align="left"><code>animation-fill-mode:</code></td><td align="left">如何将样式应用于其目标 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-fill-mode">#</a></td></tr><tr><td align="left"><code>animation-play-state:</code></td><td align="left">是否运行或者暂停 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-play-state">#</a></td></tr></tbody></table><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">动画(Animation)</a></p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @keyframes duration | timing-function | delay |</span></span><br><span class="line"><span class="comment">   iteration-count | direction | fill-mode | play-state | name */</span></span><br><span class="line"><span class="attribute">animation</span>: <span class="number">3s</span> ease-in <span class="number">1s</span> <span class="number">2</span> reverse both paused slidein;</span><br><span class="line"><span class="comment">/* @keyframes duration | timing-function | delay | name */</span></span><br><span class="line"><span class="attribute">animation</span>: <span class="number">3s</span> linear <span class="number">1s</span> slidein;</span><br><span class="line"><span class="comment">/* @keyframes duration | name */</span></span><br><span class="line"><span class="attribute">animation</span>: <span class="number">3s</span> slidein;</span><br><span class="line"><span class="attribute">animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line"><span class="attribute">animation</span>: bounce <span class="number">300ms</span> linear <span class="number">0s</span> infinite normal;</span><br><span class="line"><span class="attribute">animation</span>: bounce <span class="number">300ms</span> linear infinite;</span><br><span class="line"><span class="attribute">animation</span>: bounce <span class="number">300ms</span> linear infinite alternate-reverse;</span><br><span class="line"><span class="attribute">animation</span>: bounce <span class="number">300ms</span> linear <span class="number">2s</span> infinite alternate-reverse forwards normal;</span><br></pre></td></tr></table></figure><h3 id="Javascript-事件"><a href="#Javascript-事件" class="headerlink" title="Javascript 事件"></a>Javascript 事件</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">one</span>(<span class="string">&#x27;webkitAnimationEnd oanimationend msAnimationEnd animationend&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="CSS-Flexbox"><a href="#CSS-Flexbox" class="headerlink" title="CSS Flexbox"></a>CSS Flexbox</h2><!--rehype:body-class=cols-2--><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><figcaption><span>&#123;2-3,5-8,10-11,13-16,18-23&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">flex-direction</span>: row;            <span class="comment">/* ltr - 行(左向右) ▶ */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;    <span class="comment">/* rtl - 行(右向左) ◀ */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column;         <span class="comment">/* top-bottom ▼ */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/* bottom-top ▲ */</span></span><br><span class="line">  </span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;       <span class="comment">/* 摆放到一行 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;         <span class="comment">/* 被打断到多个行中 */</span></span><br><span class="line">  </span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; <span class="comment">/* 垂直对齐 - 顶部 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;   <span class="comment">/* 垂直对齐 - 底部 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;     <span class="comment">/* 垂直对齐 - 中间 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: stretch;    <span class="comment">/* 所有人都一样的高度 (默认) */</span></span><br><span class="line">  </span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;    <span class="comment">/* [◀◀◀        ] */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;        <span class="comment">/* [    ■■■    ] */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;      <span class="comment">/* [        ▶▶▶] */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* [◀    ■    ▶] */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;  <span class="comment">/* [ ■   ■   ■ ] */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;  <span class="comment">/* [  ■  ■  ■  ] */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 这个: */</span></span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> auto;</span><br><span class="line">  <span class="comment">/* 相当于这个： */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">align-self</span>: flex-start;  <span class="comment">/* left */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: auto;       <span class="comment">/* right */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between</span><br></pre></td></tr></table></figure><p><code>flex-start</code>：左对齐(默认值)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆╭┈┈╮╭┈╮╭┈┈┈╮                     ┆</span><br><span class="line">┆╰┈┈╯╰┈╯╰┈┈┈╯                     ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p><code>flex-end</code>：右对齐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆                     ╭┈┈╮╭┈╮╭┈┈┈╮┆</span><br><span class="line">┆                     ╰┈┈╯╰┈╯╰┈┈┈╯┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p><code>center</code>： 居中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆          ╭┈┈╮╭┈╮╭┈┈┈╮           ┆</span><br><span class="line">┆          ╰┈┈╯╰┈╯╰┈┈┈╯           ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p><code>space-between</code>：两端对齐，项目之间的间隔都相等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆╭┈┈╮           ╭┈╮          ╭┈┈┈╮┆</span><br><span class="line">┆╰┈┈╯           ╰┈╯          ╰┈┈┈╯┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p><code>space-around</code>：每个项目两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆   ╭┈┈╮        ╭┈╮       ╭┈┈┈╮   ┆</span><br><span class="line">┆   ╰┈┈╯        ╰┈╯       ╰┈┈┈╯   ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p>上面示例，假设主轴为从左到右</p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br></pre></td></tr></table></figure><p><code>nowrap</code>：不换行(默认)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭<span class="number">1</span>╮╭<span class="number">2</span>╮╭<span class="number">3</span>╮╭<span class="number">4</span>╮╭<span class="number">5</span>╮╭<span class="number">6</span>╮╭<span class="number">7</span>╮╭<span class="number">8</span>╮╭<span class="number">9</span>╮╭<span class="number">10</span>╮</span><br><span class="line">╰┈╯╰┈╯╰┈╯╰┈╯╰┈╯╰┈╯╰┈╯╰┈╯╰┈╯╰┈┈╯</span><br></pre></td></tr></table></figure><p><code>wrap</code>：换行，第一行在 <strong><code>上方</code></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭<span class="number">1</span>┈╮ ╭<span class="number">2</span>┈╮ ╭<span class="number">3</span>┈╮ ╭<span class="number">4</span>┈╮ ╭<span class="number">5</span>┈╮ ╭<span class="number">6</span>┈╮ ╭<span class="number">7</span>┈╮</span><br><span class="line">╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯</span><br><span class="line">╭<span class="number">8</span>┈╮ ╭<span class="number">9</span>┈╮ ╭<span class="number">10</span>╮</span><br><span class="line">╰┈┈╯ ╰┈┈╯ ╰┈┈╯</span><br></pre></td></tr></table></figure><p><code>wrap-reverse</code>：换行，第一行在 <strong><code>下方</code></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭<span class="number">8</span>┈╮ ╭<span class="number">9</span>┈╮ ╭<span class="number">10</span>╮</span><br><span class="line">╰┈┈╯ ╰┈┈╯ ╰┈┈╯</span><br><span class="line">╭<span class="number">1</span>┈╮ ╭<span class="number">2</span>┈╮ ╭<span class="number">3</span>┈╮ ╭<span class="number">4</span>┈╮ ╭<span class="number">5</span>┈╮ ╭<span class="number">6</span>┈╮ ╭<span class="number">7</span>┈╮</span><br><span class="line">╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯</span><br></pre></td></tr></table></figure><p>项目都排在一条线（又称”轴线”）上</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈╮  ▲         ╭┈┈╮  ┆</span><br><span class="line">╰┈┈╯  ┆         ╰┈┈╯  ┆</span><br><span class="line">╭┈┈╮  ┆         ╭┈┈╮  ┆</span><br><span class="line">╰┈┈╯  ┆         ╰┈┈╯  ┆     ┈┈┈┈┈┈┈┈┈┈┈▶    ◀┈┈┈┈┈┈┈┈┈┈┈</span><br><span class="line">╭┈┈╮  ┆         ╭┈┈╮  ┆    ╭┈┈╮ ╭┈┈╮ ╭┈┈╮  ╭┈┈╮ ╭┈┈╮ ╭┈┈╮</span><br><span class="line">╰┈┈╯  ┆         ╰┈┈╯  ▼    ╰┈┈╯ ╰┈┈╯ ╰┈┈╯  ╰┈┈╯ ╰┈┈╯ ╰┈┈╯</span><br><span class="line">┈┬┈┈┈┈┈┈        ┈┬┈┈┈┈┈┈    ┈┬┈┈┈┈┈┈┈┈┈┈┈   ┈┬┈┈┈┈┈┈┈┈┈┈┈ </span><br><span class="line">column-reverse  column       row             row-reverse</span><br></pre></td></tr></table></figure><p>属性决定主轴的方向（即项目的排列方向）</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  ▶ <span class="attribute">flex</span>-start(起点对齐)    ▶ <span class="attribute">flex</span>-end(终点对齐)</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ ╭┈┈╮ ╭┈┈╮ ╭┈┈╮ ╭┈┈╮ ┆  ┆                     ┆</span><br><span class="line">┆ ┆  ┆ ┆  ┆ ╰┈┈╯ ┆  ┆ ┆  ┆      ╭┈┈╮           ┆</span><br><span class="line">┆ ╰┈┈╯ ┆  ┆      ╰┈┈╯ ┆  ┆ ╭┈┈╮ ┆  ┆      ╭┈┈╮ ┆</span><br><span class="line">┆      ╰┈┈╯           ┆  ┆ ┆  ┆ ┆  ┆ ╭┈┈╮ ┆  ┆ ┆</span><br><span class="line">┆                     ┆  ┆ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">  ▶ center(中点对齐)        ▶ stretch(占满整个容器的高度)</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆      ╭┈┈╮           ┆  ┆ ╭┈┈╮ ╭┈┈╮ ╭┈┈╮ ╭┈┈╮ ┆</span><br><span class="line">┆ ╭┈┈╮ ┆  ┆      ╭┈┈╮ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆</span><br><span class="line">┆ ┆  ┆ ┆  ┆ ╭┈┈╮ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆</span><br><span class="line">┆ ┆  ┆ ┆  ┆ ╰┈┈╯ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆</span><br><span class="line">┆ ╰┈┈╯ ┆  ┆      ╰┈┈╯ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆  ┆ ┆</span><br><span class="line">┆      ╰┈┈╯           ┆  ┆ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈╯ ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">  ▶ baseline(第一行文字的基线对齐)</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆  ╭┈┈┈┈┈┈╮               ╭┈┈┈┈┈┈╮             ┆</span><br><span class="line">┆  ┆      ┆ ╭┈┈┈┈╮ ╭┈┈┈┈╮ ┆      ┆ ╭┈┈┈┈╮╭┈┈┈┈╮┆</span><br><span class="line">┆  ┆ <span class="selector-tag">text</span> ┆ ┆<span class="selector-tag">text</span>┆ ┆<span class="selector-tag">text</span>┆ ┆ <span class="selector-tag">text</span> ┆ ┆<span class="selector-tag">text</span>┆┆<span class="selector-tag">text</span>┆┆</span><br><span class="line">┆  ┆      ┆ ╰┈┈┈┈╯ ┆    ┆ ┆      ┆ ╰┈┈┈┈╯┆    ┆┆</span><br><span class="line">┆  ╰┈┈┈┈┈┈╯        ╰┈┈┈┈╯ ╰┈┈┈┈┈┈╯       ╰┈┈┈┈╯┆</span><br><span class="line">┆                                              ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> ▶ <span class="attribute">flex</span>-start(起点对齐)     ▶ <span class="attribute">flex</span>-end(终点对齐)</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ ╭┈┈╮╭┈╮╭┈┈┈╮╭╮╭┈┈┈┈╮ ┆  ┆                      ┆</span><br><span class="line">┆ ╰┈┈╯╰┈╯╰┈┈┈╯╰╯╰┈┈┈┈╯ ┆  ┆ ╭┈┈╮╭┈╮╭┈┈┈╮╭╮╭┈┈┈┈╮ ┆</span><br><span class="line">┆ ╭┈┈┈╮╭╮              ┆  ┆ ╰┈┈╯╰┈╯╰┈┈┈╯╰╯╰┈┈┈┈╯ ┆</span><br><span class="line">┆ ╰┈┈┈╯╰╯              ┆  ┆ ╭┈┈┈╮╭╮              ┆</span><br><span class="line">┆                      ┆  ┆ ╰┈┈┈╯╰╯              ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line"> ▶ center(中点对齐)         ▶ stretch(满整个交叉轴)</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆                      ┆  ┆ ╭┈┈╮╭┈╮╭┈┈┈╮╭╮╭┈┈┈┈╮ ┆</span><br><span class="line">┆ ╭┈┈╮╭┈╮╭┈┈┈╮╭╮╭┈┈┈┈╮ ┆  ┆ ┆  ┆┆ ┆┆   ┆┆┆┆    ┆ ┆</span><br><span class="line">┆ ╰┈┈╯╰┈╯╰┈┈┈╯╰╯╰┈┈┈┈╯ ┆  ┆ ╰┈┈╯╰┈╯╰┈┈┈╯╰╯╰┈┈┈┈╯ ┆</span><br><span class="line">┆ ╭┈┈┈╮╭╮              ┆  ┆ ╭┈┈┈╮╭╮╭┈╮           ┆</span><br><span class="line">┆ ╰┈┈┈╯╰╯              ┆  ┆ ┆   ┆┆┆┆ ┆           ┆</span><br><span class="line">┆                      ┆  ┆ ╰┈┈┈╯╰╯╰┈╯           ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line"> ▶ space-between(两端对齐)  ▶ space-around(均匀分布项目)</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ </span><br><span class="line">┆ ╭┈┈╮╭┈┈╮╭┈┈╮╭┈┈╮╭┈┈╮ ┆  ┆                      ┆ </span><br><span class="line">┆ ╰┈┈╯╰┈┈╯╰┈┈╯╰┈┈╯╰┈┈╯ ┆  ┆ ╭┈┈╮╭┈┈╮╭┈┈╮╭┈┈╮╭┈┈╮ ┆ </span><br><span class="line">┆                      ┆  ┆ ╰┈┈╯╰┈┈╯╰┈┈╯╰┈┈╯╰┈┈╯ ┆ </span><br><span class="line">┆                      ┆  ┆                      ┆ </span><br><span class="line">┆                      ┆  ┆ ╭┈┈╮                 ┆ </span><br><span class="line">┆ ╭┈┈╮                 ┆  ┆ ╰┈┈╯                 ┆ </span><br><span class="line">┆ ╰┈┈╯                 ┆  ┆                      ┆ </span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ </span><br></pre></td></tr></table></figure><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ ╭┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ ╭<span class="number">1</span>┈╮ ╭<span class="number">1</span>┈┈╮ ╭<span class="number">1</span>┈╮ ╭<span class="number">2</span>┈╮ ╭<span class="number">3</span>┈┈┈┈┈┈╮ ┆ ┆ ╭<span class="number">2</span>┈┈┈┈╮ ┆</span><br><span class="line">┆ ╰┈┈╯ ╰┈┈┈╯ ╰┈┈╯ ╰┈┈╯ ╰┈┈┈┈┈┈┈╯ ┆ ┆ ╰┈┈┈┈┈╯ ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ┆ ╭<span class="number">2</span>┈┈┈┈╮ ┆</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ ┆ ╰┈┈┈┈┈╯ ┆</span><br><span class="line">┆ ╭-┈┈╮ ╭┈┈┈╮ ╭┈┈┈┈┈┈┈┈╮ ╭┈┈┈╮   ┆ ┆ ╭<span class="number">99</span>┈┈┈╮ ┆</span><br><span class="line">┆ ┆-<span class="number">1</span> ┆ ┆ <span class="number">1</span> ┆ ┆ <span class="number">2</span>      ┆ ┆ <span class="number">5</span> ┆   ┆ ┆ ┆     ┆ ┆</span><br><span class="line">┆ ╰┈┈┈╯ ╰┈┈┈╯ ╰┈┈┈┈┈┈┈┈╯ ╰┈┈┈╯   ┆ ┆ ╰┈┈┈┈┈╯ ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ╰┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p>属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/order">order</a> 定义项目的排列顺序。数值越小，排列越靠前，默认为 <code>0</code></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ ╭┈┈<span class="number">1</span>┈┈╮╭┈┈<span class="number">2</span>┈┈╮╭┈┈<span class="number">1</span>┈┈╮ ┆</span><br><span class="line">┆ ╰┈┈┈┈┈╯╰┈┈┈┈┈╯╰┈┈┈┈┈╯ ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ ╭┈<span class="number">1</span>┈╮╭┈┈┈┈<span class="number">2</span>┈┈┈┈╮╭┈<span class="number">1</span>┈╮ ┆</span><br><span class="line">┆ ╰┈┈┈╯╰┈┈┈┈┈┈┈┈┈╯╰┈┈┈╯ ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><p>属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow">flex-grow</a> 定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大</p><h2 id="CSS-Flexbox-技巧"><a href="#CSS-Flexbox-技巧" class="headerlink" title="CSS Flexbox 技巧"></a>CSS Flexbox 技巧</h2><h3 id="垂直中心"><a href="#垂直中心" class="headerlink" title="垂直中心"></a>垂直中心</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垂直中心-2"><a href="#垂直中心-2" class="headerlink" title="垂直中心 (2)"></a>垂直中心 (2)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 垂直的 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; </span><br><span class="line">  <span class="comment">/* 水平的 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新排序"><a href="#重新排序" class="headerlink" title="重新排序"></a>重新排序</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.top</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.bottom</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动布局"><a href="#移动布局" class="headerlink" title="移动布局"></a>移动布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个固定高度的顶部栏和一个动态高度的内容区域</p><h3 id="Table-like-像表格"><a href="#Table-like-像表格" class="headerlink" title="Table-like 像表格"></a>Table-like 像表格</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这里的“px”值只是建议的百分比 */</span></span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.checkbox</span> &#123; <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.subject</span>  &#123; <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">400px</span>; &#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.date</span>     &#123; <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">120px</span>; &#125;</span><br></pre></td></tr></table></figure><p>这会创建具有不同宽度的列，但会根据情况相应地调整大小</p><h3 id="Vertical-垂直的"><a href="#Vertical-垂直的" class="headerlink" title="Vertical 垂直的"></a>Vertical 垂直的</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>垂直居中所有项目</p><h3 id="左和右"><a href="#左和右" class="headerlink" title="左和右"></a>左和右</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-class">.left</span>  &#123; <span class="attribute">align-self</span>: flex-start; &#125;</span><br><span class="line"><span class="selector-class">.menu</span> &gt; <span class="selector-class">.right</span> &#123; <span class="attribute">align-self</span>: flex-end; &#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-Grid-网格布局"><a href="#CSS-Grid-网格布局" class="headerlink" title="CSS Grid 网格布局"></a>CSS Grid 网格布局</h2><h3 id="网格模板列"><a href="#网格模板列" class="headerlink" title="网格模板列"></a>网格模板列</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20px</span> <span class="number">20%</span> <span class="number">60%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fr-相对单位"><a href="#fr-相对单位" class="headerlink" title="fr 相对单位"></a>fr 相对单位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">60px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Grid-Gap-网格间隙"><a href="#Grid-Gap-网格间隙" class="headerlink" title="Grid Gap 网格间隙"></a>Grid Gap 网格间隙</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 行间距为 20px */</span></span><br><span class="line"><span class="comment">/* 列之间的距离是 10px */</span></span><br><span class="line"><span class="selector-id">#grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-网格行"><a href="#CSS-网格行" class="headerlink" title="CSS 网格行"></a>CSS 网格行</h3><!--rehype:wrap-class=row-span-2--><p>CSS 语法:</p><ul><li>grid-row: grid-row-start &#x2F; grid-row-end;</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-块级网格"><a href="#CSS-块级网格" class="headerlink" title="CSS 块级网格"></a>CSS 块级网格</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grid-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-内联级别网格"><a href="#CSS-内联级别网格" class="headerlink" title="CSS 内联级别网格"></a>CSS 内联级别网格</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-网格行间隙"><a href="#CSS-网格行间隙" class="headerlink" title="CSS 网格行间隙"></a>CSS 网格行间隙</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-row</span>-<span class="attribute">gap</span>: length;</span><br></pre></td></tr></table></figure><p>任何合法的长度值，例如 <code>px</code> 或 <code>%</code>。<code>0</code> 是默认值</p><h3 id="CSS-网格区域"><a href="#CSS-网格区域" class="headerlink" title="CSS 网格区域"></a>CSS 网格区域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">1</span> / span <span class="number">2</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="minmax-函数"><a href="#minmax-函数" class="headerlink" title="minmax() 函数"></a>minmax() 函数</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">500px</span>) <span class="number">100px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><p>定义了一个长宽范围的闭区间</p><h3 id="grid-row-start-grid-row-end"><a href="#grid-row-start-grid-row-end" class="headerlink" title="grid-row-start &amp; grid-row-end"></a>grid-row-start &amp; grid-row-end</h3><p>CSS 语法:</p><ul><li>grid-row-start: auto|row-line;</li><li>grid-row-end: auto|row-line|span n;</li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line"><span class="attribute">grid-row-end</span>: span <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="对齐项目"><a href="#对齐项目" class="headerlink" title="对齐项目"></a>对齐项目</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">justify-items</span>: center;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-网格模板区域"><a href="#CSS-网格模板区域" class="headerlink" title="CSS 网格模板区域"></a>CSS 网格模板区域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: nav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">  <span class="string">&#x27;nav nav . .&#x27;</span></span><br><span class="line">  <span class="string">&#x27;nav nav . .&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Justify-Self"><a href="#Justify-Self" class="headerlink" title="Justify Self"></a>Justify Self</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">justify-items</span>: start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-items</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网格项目位于行的右侧（末尾）</p><h3 id="对齐项目-1"><a href="#对齐项目-1" class="headerlink" title="对齐项目"></a>对齐项目</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">align-items</span>: start;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-动态内容"><a href="#CSS-动态内容" class="headerlink" title="CSS 动态内容"></a>CSS 动态内容</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>定义 CSS 变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--first-color</span>: <span class="number">#16f</span>;</span><br><span class="line">  <span class="attr">--second-color</span>: <span class="number">#ff7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量用法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#firstParagraph</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--first-color);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--second-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/--*">CSS Variable</a></p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Set &quot;my-counter&quot; to 0 */</span></span><br><span class="line"><span class="attribute">counter-set</span>: my-counter;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Increment &quot;my-counter&quot; by 1 */</span></span><br><span class="line"><span class="attribute">counter-increment</span>: my-counter;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Decrement &quot;my-counter&quot; by 1 */</span></span><br><span class="line"><span class="attribute">counter-increment</span>: my-counter -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Reset &quot;my-counter&quot; to 0 */</span></span><br><span class="line"><span class="attribute">counter-reset</span>: my-counter;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/counter-set">Counter set</a></p><h3 id="使用计数器"><a href="#使用计数器" class="headerlink" title="使用计数器"></a>使用计数器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">counter-reset</span>: section; &#125;</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: section; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Section.&quot;</span> <span class="built_in">counter</span>(section);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>: section;   </span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: section;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counters</span>(section, <span class="string">&quot;.&quot;</span>) <span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-函数"><a href="#CSS-函数" class="headerlink" title="CSS 函数"></a>CSS 函数</h2><h3 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc"><code>calc()</code></a> CSS 函数允许您在指定 CSS 属性值时执行计算</p><h3 id="clamp"><a href="#clamp" class="headerlink" title="clamp()"></a>clamp()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">10vw</span>, <span class="number">2rem</span>);</span><br></pre></td></tr></table></figure><p>设置随窗口大小改变的字体大小</p><h3 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-foo) <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取选择到的元素的某一 HTML 属性值</p><h3 id="counter"><a href="#counter" class="headerlink" title="counter()"></a>counter()</h3><!--rehype:wrap-class=row-span-2--><p>返回一个代表计数器的当前值的字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>: listCounter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: listCounter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;[&quot;</span> <span class="built_in">counter</span>(listCounter) <span class="string">&quot;] == [&quot;</span></span><br><span class="line">    <span class="built_in">counter</span>(listCounter, upper-roman) <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. [1]==[I]</span><br><span class="line">2. [2]==[II]</span><br><span class="line">3. [3]==[III]</span><br></pre></td></tr></table></figure><h3 id="counters"><a href="#counters" class="headerlink" title="counters()"></a>counters()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">counter-reset</span>: count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::marker</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>: <span class="built_in">counters</span>(count, <span class="string">&#x27;.&#x27;</span>, upper-alpha) <span class="string">&#x27;) &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counters</span>(count, <span class="string">&quot;.&quot;</span>, decimal-leading-zero) <span class="string">&quot; == &quot;</span> <span class="built_in">counters</span>(count, <span class="string">&quot;.&quot;</span>, lower-alpha);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套计数器，返回表示指定计数器当前值的连接字符串</p><h3 id="env"><a href="#env" class="headerlink" title="env()"></a>env()</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;... viewport-fit=cover&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:</span><br><span class="line">    <span class="built_in">env</span>(safe-area-inset-top, <span class="number">20px</span>)</span><br><span class="line">    <span class="built_in">env</span>(safe-area-inset-right, <span class="number">20px</span>)</span><br><span class="line">    <span class="built_in">env</span>(safe-area-inset-bottom, <span class="number">20px</span>)</span><br><span class="line">    <span class="built_in">env</span>(safe-area-inset-left, <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户代理定义的环境变量值插入你的 CSS 中</p><h3 id="fit-content"><a href="#fit-content" class="headerlink" title="fit-content()"></a>fit-content()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fit-<span class="attribute">content</span>(<span class="number">200px</span>)</span><br><span class="line">fit-<span class="attribute">content</span>(<span class="number">5cm</span>)</span><br><span class="line">fit-<span class="attribute">content</span>(<span class="number">30vw</span>)</span><br><span class="line">fit-<span class="attribute">content</span>(<span class="number">100ch</span>)</span><br></pre></td></tr></table></figure><p>将给定大小夹紧为可用大小</p><h3 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h3><p>从一个逗号分隔的表达式列表中选择最大（正方向）的值作为属性的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">10vw</span>, <span class="number">4em</span>, <span class="number">80px</span>);</span><br></pre></td></tr></table></figure><p>例子中，宽度最小会是 80px，除非视图宽度大于 800px 或者是一个 em 比 20px 宽</p><h3 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">1vw</span>, <span class="number">4em</span>, <span class="number">80px</span>);</span><br></pre></td></tr></table></figure><p>从逗号分隔符表达式中选择一个最小值作为 CSS 的属性值</p><h3 id="minmax"><a href="#minmax" class="headerlink" title="minmax()"></a>minmax()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minmax(<span class="number">200px</span>, <span class="number">1</span>fr)</span><br><span class="line">minmax(<span class="number">400px</span>, <span class="number">50%</span>)</span><br><span class="line">minmax(<span class="number">30%</span>, <span class="number">300px</span>)</span><br><span class="line">minmax(<span class="number">100px</span>, max-<span class="attribute">content</span>)</span><br><span class="line">minmax(min-<span class="attribute">content</span>, <span class="number">400px</span>)</span><br><span class="line">minmax(max-<span class="attribute">content</span>, auto)</span><br><span class="line">minmax(auto, <span class="number">300px</span>)</span><br><span class="line">minmax(min-<span class="attribute">content</span>, auto)</span><br></pre></td></tr></table></figure><h3 id="repeat-轨道列表的重复片段"><a href="#repeat-轨道列表的重复片段" class="headerlink" title="repeat() 轨道列表的重复片段"></a>repeat() 轨道列表的重复片段</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repeat(auto-<span class="attribute">fill</span>, <span class="number">250px</span>)</span><br><span class="line">repeat(auto-fit, <span class="number">250px</span>)</span><br><span class="line">repeat(<span class="number">4</span>, <span class="number">1</span>fr)</span><br><span class="line">repeat(<span class="number">4</span>, <span class="selector-attr">[col-start]</span> <span class="number">250px</span> <span class="selector-attr">[col-end]</span>)</span><br><span class="line">repeat(<span class="number">4</span>, <span class="selector-attr">[col-start]</span> <span class="number">60%</span> <span class="selector-attr">[col-end]</span>)</span><br></pre></td></tr></table></figure><p>定义了一个长宽范围的闭区间</p><h3 id="url"><a href="#url" class="headerlink" title="url()"></a>url()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;topbanner.png&quot;</span>) <span class="number">#00D</span> no-repeat fixed;</span><br><span class="line"><span class="attribute">list-style</span>: square <span class="built_in">url</span>(<span class="string">http://www.example.com/redball.png</span>)</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-bg-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><p>代替元素中任何属性中的值的任何部分</p><h2 id="CSS-技巧"><a href="#CSS-技巧" class="headerlink" title="CSS 技巧"></a>CSS 技巧</h2><h3 id="强制不换行"><a href="#强制不换行" class="headerlink" title="强制不换行"></a>强制不换行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">word-break</span>:break-all; <span class="comment">/* 英文 */</span></span><br><span class="line">  <span class="attribute">white-space</span>:pre-wrap; <span class="comment">/* 中文 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滚动条平滑"><a href="#滚动条平滑" class="headerlink" title="滚动条平滑"></a>滚动条平滑</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">scroll-behavior</span>: smooth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#%E5%85%A5%E9%97%A8">点击我</a>页面会平滑滚动到入门</p><h3 id="修改浏览器自动填充-input-样式"><a href="#修改浏览器自动填充-input-样式" class="headerlink" title="修改浏览器自动填充 input 样式"></a>修改浏览器自动填充 input 样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>:autofill &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1000px</span> <span class="number">#000</span> inset;</span><br><span class="line">  -webkit-<span class="selector-tag">text</span>-<span class="attribute">fill</span>-<span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:autofill">:autofill</a></p><h3 id="修改-input-type-”color”-样式"><a href="#修改-input-type-”color”-样式" class="headerlink" title="修改 input type&#x3D;”color” 样式"></a>修改 input type&#x3D;”color” 样式</h3><!--rehype:wrap-class=col-span-2 row-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;color&quot;</span>]</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;color&quot;</span>]</span>::-webkit-color-swatch-wrapper &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;color&quot;</span>]</span>::-webkit-color-swatch &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="忽略用作间距的换行符"><a href="#忽略用作间距的换行符" class="headerlink" title="忽略用作间距的换行符 &lt;br &#x2F;&gt;"></a>忽略用作间距的换行符 &lt;br &#x2F;&gt;</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">br + br &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-empty-隐藏空-HTML-元素"><a href="#使用-empty-隐藏空-HTML-元素" class="headerlink" title="使用 :empty 隐藏空 HTML 元素"></a>使用 :empty 隐藏空 HTML 元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-重置"><a href="#CSS-重置" class="headerlink" title="CSS 重置"></a>CSS 重置</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有助于在不同的浏览器之间强制样式一致性，并为样式元素提供干净的盒子</p><h3 id="设置光标样式"><a href="#设置光标样式" class="headerlink" title="设置光标样式"></a>设置光标样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">caret-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置整个页面灰色"><a href="#设置整个页面灰色" class="headerlink" title="设置整个页面灰色"></a>设置整个页面灰色</h3><!--rehype:wrap-style=-webkit-filter: grayscale(.95);--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(.<span class="number">95</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例设置了当前卡片灰色</p><h3 id="自动增加其高度"><a href="#自动增加其高度" class="headerlink" title="&lt;textarea&gt;自动增加其高度"></a><code>&lt;textarea&gt;</code>自动增加其高度</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="selector-tag">form</span>-sizing: normal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义容器的长宽比"><a href="#定义容器的长宽比" class="headerlink" title="定义容器的长宽比"></a>定义容器的长宽比</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">aspect-ratio</span>: <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/aspect-ratio">aspect-ratio</a> 可以非常容易的定义一个容器的长宽比</p><h3 id="使用-unset-而不是重置所有属性"><a href="#使用-unset-而不是重置所有属性" class="headerlink" title="使用 unset 而不是重置所有属性"></a>使用 unset 而不是重置所有属性</h3><p>使用 <code>all</code> 速记来指定元素的所有属性。将值设置为 <code>unset</code> 会将元素的属性更改为其初始值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">all</span>: unset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>IE11</code> 不支持 <code>all</code> 和 <code>unset</code> 速记</p><h3 id="超出显示省略号"><a href="#超出显示省略号" class="headerlink" title="超出显示省略号"></a>超出显示省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;<span class="comment">/*超出部分隐藏*/</span></span><br><span class="line">  <span class="comment">/* 超出部分显示省略号 */</span></span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">  <span class="comment">/* 规定段落中的文本不进行换行 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;<span class="comment">/*需要配合宽度来使用*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给正文添加行高"><a href="#给正文添加行高" class="headerlink" title="给正文添加行高"></a>给正文添加行高</h3><p>您不需要为每个 <code>&lt;p&gt;</code>、<code>&lt;h*&gt;</code> 等添加行高。相反，将其添加到正文：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样文本元素可以很容易地从 <code>body</code> 继承</p><h3 id="使用图像作为光标"><a href="#使用图像作为光标" class="headerlink" title="使用图像作为光标"></a>使用图像作为光标</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;path-to-image.png&#x27;</span>), <span class="built_in">url</span>(<span class="string">&#x27;path-to-fallback-image.png&#x27;</span>), auto;</span><br><span class="line">  <span class="comment">/* 表情符号作为光标 */</span></span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&quot;data:image/svg+xml;utf8,&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;  width=&#x27;40&#x27; height=&#x27;48&#x27; viewport=&#x27;0 0 100 100&#x27; style=&#x27;fill:black;font-size:24px;&#x27;&gt;&lt;text y=&#x27;50%&#x27;&gt;🚀&lt;/text&gt;&lt;/svg&gt;&quot;</span>), auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h3 id="文本溢出显示省略号"><a href="#文本溢出显示省略号" class="headerlink" title="文本溢出显示省略号"></a>文本溢出显示省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.overflow-ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一行文本截断显示省略号 <em>(…)</em></p><h3 id="将文本截断到特定的行数"><a href="#将文本截断到特定的行数" class="headerlink" title="将文本截断到特定的行数"></a>将文本截断到特定的行数</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.overflow-truncate</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多行文本截断到特定的行数，末尾显示省略号 <em>(…)</em></p><h3 id="粘性定位元素"><a href="#粘性定位元素" class="headerlink" title="粘性定位元素"></a>粘性定位元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#sticky">sticky</a> 能在滚动到顶部的位置固定住元素</p><h3 id="使用带有空链接的属性选择器"><a href="#使用带有空链接的属性选择器" class="headerlink" title="使用带有空链接的属性选择器"></a>使用带有空链接的属性选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;http&quot;</span>]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(href);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>&lt;a&gt;</code> 标签里面没有内容，将 <code>href</code> 的值作为内容展示</p><h3 id="使用-root-表示灵活类型"><a href="#使用-root-表示灵活类型" class="headerlink" title="使用 :root 表示灵活类型"></a>使用 :root 表示灵活类型</h3><!--rehype:wrap-class=row-span-2--><p>响应式布局中的字体大小应该能够根据每个视口进行调整，您可以使用 <code>:root</code> 根据视口高度和宽度计算字体大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">1vw</span> + <span class="number">1vh</span> + .<span class="number">5vmin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以根据 <code>:root</code> 计算的值使用根 <code>em</code> 单位：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">1rem</span>/<span class="number">1.6</span> sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吸附滚动"><a href="#吸附滚动" class="headerlink" title="吸附滚动"></a>吸附滚动</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><figcaption><span>&#123;5,12&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: scroll;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">scroll-snap-type</span>: x mandatory;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">66%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#663399</span>;</span><br><span class="line">  <span class="attribute">scroll-snap-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用于 <code>轮播图</code> 效果，<a href="https://codesandbox.io/embed/pensive-leftpad-w9p8rk?fontsize=14&hidenavigation=1&theme=dark">效果预览</a></p><h3 id="类似-contenteditable-的样式"><a href="#类似-contenteditable-的样式" class="headerlink" title="类似 contenteditable 的样式"></a>类似 contenteditable 的样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">user-modify</span>: </span><br><span class="line">    read-write-plaintext-only;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><p>通过样式来控制一个元素 <code>div</code> 是否可以编辑</p><h3 id="等宽表格单元格"><a href="#等宽表格单元格" class="headerlink" title="等宽表格单元格"></a>等宽表格单元格</h3><p>尝试使用 <code>table-layout: fixed</code> 以保持单元格宽度相等：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用属性选择器来选择空链接"><a href="#利用属性选择器来选择空链接" class="headerlink" title="利用属性选择器来选择空链接"></a>利用属性选择器来选择空链接</h3><p>当 <code>&lt;a&gt;</code> 元素没有文本内容，但有 <code>href</code> 属性的时候，显示它的 <code>href</code> 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;http&quot;</span>]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(href);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给-“默认”-链接定义样式"><a href="#给-“默认”-链接定义样式" class="headerlink" title="给 “默认” 链接定义样式"></a>给 “默认” 链接定义样式</h3><p>给 “默认” 链接定义样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[class]</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常没有 <code>class</code> 属性，以上样式可以甄别它们，而且不会影响其它样式</p><h3 id="用-rem-调整全局大小；用-em-调整局部大小"><a href="#用-rem-调整全局大小；用-em-调整局部大小" class="headerlink" title="用 rem 调整全局大小；用 em 调整局部大小"></a>用 rem 调整全局大小；用 em 调整局部大小</h3><!--rehype:wrap-class=row-span-2--><p>在根元素设置基本字体大小后 (<code>html &#123; font-size: 100%; &#125;</code>), 使用 em 设置文本元素的字体大小:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123; </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置模块的字体大小为 rem:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> <span class="selector-class">.module</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，每个模块变得独立，更容易、灵活的样式便于维护</p><h3 id="隐藏没有静音、自动播放的影片"><a href="#隐藏没有静音、自动播放的影片" class="headerlink" title="隐藏没有静音、自动播放的影片"></a>隐藏没有静音、自动播放的影片</h3><p>这是一个自定义用户样式表的不错的技巧。避免在加载页面时自动播放。如果没有静音，则不显示视频：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">video</span><span class="selector-attr">[autoplay]</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[muted]</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次，我们利用了 <code>:not()</code> 的优点</p><h3 id="为更好的移动体验，为表单元素设置字体大小"><a href="#为更好的移动体验，为表单元素设置字体大小" class="headerlink" title="为更好的移动体验，为表单元素设置字体大小"></a>为更好的移动体验，为表单元素设置字体大小</h3><p>当触发 <code>&lt;select&gt;</code> 的下拉列表时，为了避免表单元素在移动浏览器（iOS Safari 和其它）上的缩放，加上font-size：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;number&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用指针事件来控制鼠标事件"><a href="#使用指针事件来控制鼠标事件" class="headerlink" title="使用指针事件来控制鼠标事件"></a>使用指针事件来控制鼠标事件</h3><p>指针事件允许您指定鼠标如何与其触摸的元素进行交互。要禁用按钮上的默认指针事件，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这么简单</p><h3 id="子元素选中父元素"><a href="#子元素选中父元素" class="headerlink" title="子元素选中父元素"></a>子元素选中父元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">img</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置包含子元素 <code>img</code> 的 <code>div</code> 元素样式，还可以嵌套：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">h2</span>)<span class="selector-pseudo">:has</span>(<span class="selector-tag">ul</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在用作间距的换行符上设置-display-none"><a href="#在用作间距的换行符上设置-display-none" class="headerlink" title="在用作间距的换行符上设置 display: none"></a>在用作间距的换行符上设置 <code>display: none</code></h3><p>用户使用额外的换行符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">br + br &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给-body-添加行高"><a href="#给-body-添加行高" class="headerlink" title="给 body 添加行高"></a>给 <code>body</code> 添加行高</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您不需要为每个 <code>&lt;p&gt;</code>、<code>&lt;h*&gt;</code> 等分别添加行高。相反，将其添加到正文</p><h3 id="检查本地是否安装了字体"><a href="#检查本地是否安装了字体" class="headerlink" title="检查本地是否安装了字体"></a>检查本地是否安装了字体</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Dank Mono&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>:</span><br><span class="line">    <span class="comment">/* Full name */</span></span><br><span class="line">    <span class="built_in">local</span>(<span class="string">&quot;Dank Mono&quot;</span>),</span><br><span class="line">    <span class="comment">/* Postscript name */</span></span><br><span class="line">    <span class="built_in">local</span>(<span class="string">&quot;Dank-Mono&quot;</span>),</span><br><span class="line">    <span class="comment">/* 否则，请下载它！ */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&quot;//...a.server/DankMono.woff&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Dank Mono&quot;</span>,</span><br><span class="line">        system-ui-monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以在远程获取字体之前检查是否在本地安装了字体，这也是一个很好的性能提示</p><h3 id="获取-HTML-元素的属性"><a href="#获取-HTML-元素的属性" class="headerlink" title="获取 HTML 元素的属性"></a>获取 HTML 元素的属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>attr HTML 元素的属性名。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; (&quot;</span> <span class="built_in">attr</span>(href) <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为表单元素设置-focus"><a href="#为表单元素设置-focus" class="headerlink" title="为表单元素设置 :focus"></a>为表单元素设置 <code>:focus</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">button</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">#000</span> dotted <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">outline-offset</span>: .<span class="number">05em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有视力的键盘用户依靠焦点来确定键盘事件在页面中的位置。使表单元素的焦点比浏览器的默认实现更加突出和一致</p><h3 id="垂直居中任何东西"><a href="#垂直居中任何东西" class="headerlink" title="垂直居中任何东西"></a>垂直居中任何东西</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">align-items</span>: center;</span><br><span class="line">  -ms-<span class="attribute">flex</span>-align: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…还有 CSS 网格：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">place-items</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片对齐不变形"><a href="#图片对齐不变形" class="headerlink" title="图片对齐不变形"></a>图片对齐不变形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/** 确保图片按原始宽高比例进行缩放 */</span></span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">object-position</span>: left top;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/** 指定图片显示的位置，结合鼠标移动+过渡动画 */</span></span><br><span class="line">  <span class="attribute">object-position</span>: right bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行截断，展示省略号"><a href="#多行截断，展示省略号" class="headerlink" title="多行截断，展示省略号"></a>多行截断，展示省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clamp</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">3</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>html</code> 文本超过 3 行将被截断，显示省略号…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;clamp&quot;</span>&gt;</span></span><br><span class="line">  展示多行文本，超过 3 行将被截断，显示省略号...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="逗号分隔列表"><a href="#逗号分隔列表" class="headerlink" title="逗号分隔列表"></a>逗号分隔列表</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>)<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使列表项看起来像一个真实的逗号分隔列表，使用 <code>:not()</code> 伪类，最后一项不会添加逗号</p><h3 id="表格中数字使用制表数字"><a href="#表格中数字使用制表数字" class="headerlink" title="表格中数字使用制表数字"></a>表格中数字使用制表数字</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.revenue</span> &#123;</span><br><span class="line">    <span class="attribute">font-variant-numeric</span>: tabular-nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表格中一列数字列对其</p><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://frontend30.com/css-selectors-cheatsheet/">CSS selectors cheatsheet</a> <em>(frontend30.com)</em></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Flexible_boxes">MDN: Using CSS flexbox</a></li><li><a href="http://www.sketchingwithcss.com/samplechapter/cheatsheet.html">Ultimate flexbox cheatsheet</a></li><li><a href="http://grid.malven.co/">GRID: A simple visual cheatsheet</a></li><li><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">CSS Tricks: A Complete Guide to Grid</a></li><li><a href="https://caniuse.com/#feat=css-grid">Browser support</a></li><li><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool">Flex 布局教程：语法篇</a></li><li><a href="https://github.com/AllThingsSmitty/css-protips/tree/master/translations/zh-CN">CSS 专业技巧</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-备忘清单&quot;&gt;&lt;a href=&quot;#CSS-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;CSS 备忘清单&quot;&gt;&lt;/a&gt;CSS 备忘清单&lt;/h1&gt;&lt;p&gt;这是一份关于 CSS 优点的快速参考备忘单，列出了选择器语法、属性、单位和其他有用的信息&lt;/</summary>
      
    
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="CSS" scheme="https://tdcqcx.github.io/tags/CSS/"/>
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Docker 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/docker/"/>
    <id>https://tdcqcx.github.io/2025/01/08/docker/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-备忘清单"><a href="#Docker-备忘清单" class="headerlink" title="Docker 备忘清单"></a>Docker 备忘清单</h1><p>这是 <a href="https://docs.docker.com/get-started/">Docker</a> 的快速参考备忘单。 你可以在这里找到最常见的 Docker 命令。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><!--rehype:body-class=cols-2--><h3 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line">sudo chmod 777 /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>在后台创建和运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -p 80:80 docker/getting-started</span></span><br></pre></td></tr></table></figure><hr><ul><li><code>-d</code> - 以分离（后台）模式运行容器</li><li><code>-p 80:80</code> -  将端口 80 映射到容器中的端口 80，格式：宿主机端口:容器端口</li><li><code>docker/getting-started</code> - 要使用的镜像</li></ul><p>在前台创建并运行容器（之后如果要退出容器但是不关闭容器，按<em>Ctrl+P+Q</em>即可）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --<span class="built_in">rm</span> -p  8001:8080 --name my-nginx nginx</span></span><br></pre></td></tr></table></figure><hr><ul><li><code>-it</code> - 交互式 bash 模式</li><li><code>--rm</code> - 容器终止运行后自动删除容器文件</li><li><code>-p 8001:8080</code> - 将 <code>8001</code> 端口映射到容器中的 <code>8080</code> 端口</li><li><code>--name my-nginx</code> - 指定名称</li><li><code>nginx</code> - 要使用的镜像</li></ul><h3 id="一般命令"><a href="#一般命令" class="headerlink" title="一般命令"></a>一般命令</h3><table><thead><tr><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><code>docker ps</code></td><td>列出正在运行的容器</td></tr><tr><td><code>docker ps -a</code></td><td>列出所有容器</td></tr><tr><td><code>docker ps -s</code></td><td>列出正在运行的容器 <em>(带 CPU &#x2F; 内存)</em></td></tr><tr><td><code>docker images</code></td><td>列出所有镜像</td></tr><tr><td><code>docker exec -it &lt;container&gt;  bash</code></td><td>连接到容器</td></tr><tr><td><code>docker logs &lt;container&gt;</code></td><td>显示容器的控制台日志</td></tr><tr><td><code>docker stop &lt;container&gt;</code></td><td>停止容器</td></tr><tr><td><code>docker restart &lt;container&gt;</code></td><td>重启一个容器</td></tr><tr><td><code>docker rm &lt;container&gt;</code></td><td>移除一个容器</td></tr><tr><td><code>docker port &lt;container&gt;</code></td><td>显示容器的端口映射</td></tr><tr><td><code>docker top &lt;container&gt;</code></td><td>列出进程</td></tr><tr><td><code>docker kill &lt;container&gt;</code></td><td>杀死一个容器</td></tr></tbody></table><p>参数 <code>&lt;container&gt;</code> 可以是容器 id 或名称</p><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><!--rehype:body-class=cols-2--><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><table><thead><tr><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>docker start nginx-server</code></td><td>开始</td></tr><tr><td><code>docker stop nginx-server</code></td><td>停止</td></tr><tr><td><code>docker restart nginx-server</code></td><td>重启</td></tr><tr><td><code>docker pause nginx-server</code></td><td>暂停</td></tr><tr><td><code>docker unpause nginx-server</code></td><td>取消暂停</td></tr><tr><td><code>docker wait nginx-server</code></td><td>阻塞容器</td></tr><tr><td><code>docker kill nginx-server</code></td><td>发送 SIGKILL</td></tr><tr><td><code>docker attach nginx-server</code></td><td>连接到现有容器</td></tr></tbody></table><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><table><thead><tr><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><code>docker ps</code></td><td>列出正在运行的容器</td></tr><tr><td><code>docker ps -a</code></td><td>列出所有容器</td></tr><tr><td><code>docker logs nginx-server</code></td><td>容器日志</td></tr><tr><td><code>docker inspect nginx-server</code></td><td>检查容器</td></tr><tr><td><code>docker events nginx-server</code></td><td>容器事件</td></tr><tr><td><code>docker port nginx-server</code></td><td>公共端口</td></tr><tr><td><code>docker top nginx-server</code></td><td>运行进程</td></tr><tr><td><code>docker stats nginx-server</code></td><td>容器资源使用</td></tr><tr><td><code>docker diff nginx-server</code></td><td>列出对容器所做的更改</td></tr></tbody></table><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker create [options] IMAGE</span><br><span class="line">  -a, --attach               # 附加标准输出/错误</span><br><span class="line">  -i, --interactive          # 附加标准输入（交互式）</span><br><span class="line">  -t, --tty                  # 伪终端 pseudo-tty</span><br><span class="line">      --name NAME            # 命名你的镜像</span><br><span class="line">  -p, --publish 5000:5000    # 端口映射（主机:容器）</span><br><span class="line">      --expose 5432          # 向容器公开端口 </span><br><span class="line">  -P, --publish-all          # 发布所有端口</span><br><span class="line">      --link container:alias # 链接 linking</span><br><span class="line">  -v, --volume `pwd`:/app    # mount（需要绝对路径）</span><br><span class="line">  -e, --env NAME=hello       # 环境变量 env vars</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker create --name my_redis --expose 6379 redis:3.0.2</span></span><br></pre></td></tr></table></figure><h3 id="操控"><a href="#操控" class="headerlink" title="操控"></a>操控</h3><p>重命名容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename my-nginx nginx-server</span><br></pre></td></tr></table></figure><p>移除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm nginx-server</span><br></pre></td></tr></table></figure><p>更新容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --cpu-shares 512 -m 300M nginx-server</span><br></pre></td></tr></table></figure><h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><!--rehype:body-class=cols-2--><h3 id="操控-1"><a href="#操控-1" class="headerlink" title="操控"></a>操控</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th><code>Example</code></th><th>Description</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>列出镜像</td></tr><tr><td><code>docker rmi nginx</code></td><td>删除镜像</td></tr><tr><td><code>docker load &lt; ubuntu.tar.gz</code></td><td>加载一个 tarred 存储库</td></tr><tr><td><code>docker load --input ubuntu.tar</code></td><td>加载一个 tarred 存储库</td></tr><tr><td><code>docker save busybox &gt; ubuntu.tar</code></td><td>将镜像保存到 tar 存档</td></tr><tr><td><code>docker history</code></td><td>显示镜像的历史</td></tr><tr><td><code>docker commit nginx my_nginx</code></td><td>将容器另存为镜像</td></tr><tr><td><code>docker tag nginx eon01/nginx</code></td><td>标记镜像</td></tr><tr><td><code>docker push eon01/nginx</code></td><td>推送镜像</td></tr></tbody></table><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意有的最后面是英文 .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build github.com/creack/docker-firefox</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build - &lt; Dockerfile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build - &lt; context.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t eon/nginx-server .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -f myOtherDockerfile .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build --build-arg https_proxy=127.0.0.1:8088 <span class="comment"># 使用http代理构建</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl example.com/remote/Dockerfile | docker build -f - .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker save -o &lt;保存路径&gt;/myimage.tar myimage:latest <span class="comment"># 导出</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker load -i &lt;路径&gt;/myimage.tar <span class="comment"># 导入</span></span></span><br></pre></td></tr></table></figure><h3 id="删除-镜像"><a href="#删除-镜像" class="headerlink" title="删除 &lt;none&gt; 镜像"></a>删除 &lt;none&gt; 镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi -f $(docker images | grep <span class="string">&quot;none&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><!--rehype:body-class=cols-2--><h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay MyOverlayNetwork</span><br><span class="line">docker network create -d bridge MyBridgeNetwork</span><br></pre></td></tr></table></figure><p>自定义网络子网和网关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay \</span><br><span class="line">  --subnet=192.168.0.0/16 \</span><br><span class="line">  --subnet=192.170.0.0/16 \</span><br><span class="line">  --gateway=192.168.0.100 \</span><br><span class="line">  --gateway=192.170.0.100 \</span><br><span class="line">  --ip-range=192.168.1.0/24 \</span><br><span class="line">  --aux-address=&quot;my-router=192.168.1.5&quot; \</span><br><span class="line">  --aux-address=&quot;my-switch=192.168.1.6&quot; \</span><br><span class="line">  --aux-address=&quot;my-printer=192.170.1.5&quot; \</span><br><span class="line">  --aux-address=&quot;my-nas=192.170.1.6&quot; \</span><br><span class="line">  MyOverlayNetwork</span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><!--rehype:wrap-class=row-span-3--><p>获取容器连接的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect MyContainer | grep Network</span><br></pre></td></tr></table></figure><p>获取有关网络的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect &lt;network_name&gt;</span><br></pre></td></tr></table></figure><p>将正在运行的容器连接到网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect &lt;network_name&gt; &lt;container_name&gt;</span><br></pre></td></tr></table></figure><p>启动时将容器连接到网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --network=&lt;network_name&gt; &lt;container_name&gt;</span><br></pre></td></tr></table></figure><p>断开容器与网络的连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network disconnect &lt;network_name&gt; &lt;container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="删除网络"><a href="#删除网络" class="headerlink" title="删除网络"></a>删除网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">rm</span> &lt;network_name&gt;</span><br></pre></td></tr></table></figure><h3 id="列出网络"><a href="#列出网络" class="headerlink" title="列出网络"></a>列出网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h2 id="Docker-快捷键"><a href="#Docker-快捷键" class="headerlink" title="Docker 快捷键"></a>Docker 快捷键</h2><p>需要特别注意的是，退出快捷键中的删除容器实例，只对于使用 <code>docker attach</code> 进入的容器生效，使用 <code>docker exec</code> 进入容器后，使用上面的快捷键后将隔离容器，且不会删除容器实例。</p><h3 id="退出-关闭容器"><a href="#退出-关闭容器" class="headerlink" title="退出 - 关闭容器"></a>退出 - 关闭容器</h3><table><thead><tr><th>Docker 快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>ctrl</code> <code>c</code></td><td>将关闭容器</td></tr></tbody></table><!--rehype:className=shortcuts--><p>将关闭容器, 并删除当前的容器实例</p><h3 id="退出-保留容器"><a href="#退出-保留容器" class="headerlink" title="退出 - 保留容器"></a>退出 - 保留容器</h3><table><thead><tr><th>Docker 快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>ctrl</code> <code>d</code></td><td>保留容器</td></tr></tbody></table><!--rehype:className=shortcuts--><p>将保留容器，并退出到Docker主机的命令行界面</p><h3 id="退出-容器分离"><a href="#退出-容器分离" class="headerlink" title="退出 - 容器分离"></a>退出 - 容器分离</h3><table><thead><tr><th>Docker 快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>ctrl</code> <code>p</code> <code>q</code></td><td>容器分离</td></tr></tbody></table><!--rehype:className=shortcuts--><p>将容器分离，保留容器，但是不退出</p><h2 id="各种各样的"><a href="#各种各样的" class="headerlink" title="各种各样的"></a>各种各样的</h2><!--rehype:body-class=cols-2--><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker search search_word  <span class="comment"># 在 docker hub 中搜索镜像</span></span><br><span class="line">$ docker pull user/image     <span class="comment"># 从 docker hub 下载镜像</span></span><br><span class="line">$ docker login               <span class="comment"># 向 docker hub 进行身份验证</span></span><br><span class="line">$ docker push user/image     <span class="comment"># 将镜像上传到 docker hub</span></span><br></pre></td></tr></table></figure><h3 id="镜像仓库命令"><a href="#镜像仓库命令" class="headerlink" title="镜像仓库命令"></a>镜像仓库命令</h3><!--rehype:wrap-class=row-span-2--><p>登录到镜像仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker login</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker login localhost:8080</span></span><br></pre></td></tr></table></figure><p>从镜像仓库注销</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">logout</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">logout</span> localhost:8080</span></span><br></pre></td></tr></table></figure><p>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker search nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker search nginx --stars=3 --no-trunc busybox</span></span><br></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull eon01/nginx localhost:5000/myadmin/nginx</span></span><br></pre></td></tr></table></figure><p>推送镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push eon01/nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push eon01/nginx localhost:5000/myadmin/nginx</span></span><br></pre></td></tr></table></figure><h3 id="批量清除"><a href="#批量清除" class="headerlink" title="批量清除"></a>批量清除</h3><table><thead><tr><th>实例</th><th>说明</th></tr></thead><tbody><tr><td><code>docker stop -f $(docker ps -a -q)</code></td><td>停止所有容器</td></tr><tr><td><code>docker rm -f $(docker ps -a -q)</code></td><td>删除所有容器</td></tr><tr><td><code>docker rmi -f $(docker images -q)</code></td><td>删除所有镜像</td></tr><tr><td><code>docker volume prune</code></td><td>删除所有未使用的Docker Volume</td></tr><tr><td><code>docker network prune</code></td><td>删除所有未使用的Docker网络</td></tr><tr><td><code>docker system prune</code></td><td>清理所有空闲或与任何Docker容器无关的资源</td></tr><tr><td><code>docker image prune</code></td><td>删除悬空的Docker镜像</td></tr><tr><td><code>docker container prune</code></td><td>删除所有未使用的Docker 容器</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="卷-volume"><a href="#卷-volume" class="headerlink" title="卷 volume"></a>卷 volume</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume <span class="built_in">ls</span>    <span class="comment"># 检查卷</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume prune <span class="comment"># 清理未使用的卷</span></span></span><br></pre></td></tr></table></figure><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>docker-compose up</code></td><td align="left">创建和启动容器</td></tr><tr><td align="left"><code>docker-compose up -d</code></td><td align="left">以分离模式创建和启动容器</td></tr><tr><td align="left"><code>docker-compose down</code></td><td align="left">停止和删除容器、网络、映像和卷</td></tr><tr><td align="left"><code>docker-compose logs</code></td><td align="left">查看容器的输出</td></tr><tr><td align="left"><code>docker-compose restart</code></td><td align="left">重启所有服务</td></tr><tr><td align="left"><code>docker-compose pull</code></td><td align="left">拉取所有服务的镜像</td></tr><tr><td align="left"><code>docker-compose build</code></td><td align="left">构建所有服务的镜像</td></tr><tr><td align="left"><code>docker-compose config</code></td><td align="left">验证并查看 Compose 文件</td></tr><tr><td align="left"><code>docker-compose scale &lt;service_name&gt;=&lt;replica&gt;</code></td><td align="left">为服务指定容器个数</td></tr><tr><td align="left"><code>docker-compose top</code></td><td align="left">显示正在运行的进程</td></tr><tr><td align="left"><code>docker-compose run -rm -p 2022:22 web bash</code></td><td align="left">启动 Web 服务并运行 bash 作为其命令，删除旧容器</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="Docker-Services"><a href="#Docker-Services" class="headerlink" title="Docker Services"></a>Docker Services</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>docker service create &lt;options&gt; &lt;image&gt; &lt;command&gt;</code></td><td align="left">创建新服务</td></tr><tr><td align="left"><code>docker service inspect --pretty &lt;service_name&gt;</code></td><td align="left">显示详细信息服务</td></tr><tr><td align="left"><code>docker service ls</code></td><td align="left">列出服务</td></tr><tr><td align="left"><code>docker service ps</code></td><td align="left">列出服务的任务</td></tr><tr><td align="left"><code>docker service scale &lt;service_name&gt;=&lt;replica&gt;</code></td><td align="left">规模特殊服务</td></tr><tr><td align="left"><code>docker service update &lt;options&gt; &lt;service_name&gt;</code></td><td align="left">更新服务选项</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>docker stack ls</code></td><td align="left">列出此 Docker 主机上所有正在运行的应用程序</td></tr><tr><td align="left"><code>docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;</code></td><td align="left">运行指定的 Compose 文件</td></tr><tr><td align="left"><code>docker stack services &lt;appname&gt;</code></td><td align="left">列出与应用关联的服务</td></tr><tr><td align="left"><code>docker stack ps &lt;appname&gt;</code></td><td align="left">列出与应用关联的正在运行的容器</td></tr><tr><td align="left"><code>docker stack rm &lt;appname&gt;</code></td><td align="left">拆掉一个应用程序</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>docker-machine create --driver virtualbox myvm1</code></td><td align="left">创建虚拟机（Mac、Win7、Linux）</td></tr><tr><td align="left"><code>docker-machine create -d hyperv --hyperv-virtual-switch &quot;myswitch&quot; myvm1</code></td><td align="left">Win10</td></tr><tr><td align="left"><code>docker-machine env myvm1</code></td><td align="left">查看有关您的节点的基本信息</td></tr><tr><td align="left"><code>docker-machine ssh myvm1 &quot;docker node ls&quot;</code></td><td align="left">列出集群中的节点</td></tr><tr><td align="left"><code>docker-machine ssh myvm1 &quot;docker node inspect &lt;node ID&gt;&quot;</code></td><td align="left">检查节点</td></tr><tr><td align="left"><code>docker-machine ssh myvm1 &quot;docker swarm join-token -q worker&quot;</code></td><td align="left">查看加入令牌</td></tr><tr><td align="left"><code>docker-machine ssh myvm1</code></td><td align="left">打开与 VM 的 SSH 会话； 输入“exit”结束</td></tr><tr><td align="left"><code>docker-machine ssh myvm2 &quot;docker swarm leave&quot;</code></td><td align="left">让工人离开群体</td></tr><tr><td align="left"><code>docker-machine ssh myvm1 &quot;docker swarm leave -f&quot;</code></td><td align="left">让主人离开，杀群</td></tr><tr><td align="left"><code>docker-machine start myvm1</code></td><td align="left">启动当前未运行的 VM</td></tr><tr><td align="left"><code>docker-machine stop $(docker-machine ls -q)</code></td><td align="left">停止所有正在运行的虚拟机</td></tr><tr><td align="left"><code>docker-machine rm $(docker-machine ls -q)</code></td><td align="left">删除所有虚拟机及其磁盘映像</td></tr><tr><td align="left"><code>docker-machine scp docker-compose.yml myvm1:~</code></td><td align="left">将文件复制到节点的主目录</td></tr><tr><td align="left"><code>docker-machine ssh myvm1 &quot;docker stack deploy -c &lt;file&gt; &lt;app&gt;&quot;</code></td><td align="left">部署应用</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="docker-主要命令"><a href="#docker-主要命令" class="headerlink" title="docker 主要命令"></a>docker 主要命令</h3><!--rehype:wrap-class=row-span-3--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>attach</code></td><td align="left">将本地标准输入、输出和错误流附加到正在运行的容器</td></tr><tr><td align="left"><code>build</code></td><td align="left">从 Dockerfile 构建镜像</td></tr><tr><td align="left"><code>commit</code></td><td align="left">从容器的更改创建新镜像</td></tr><tr><td align="left"><code>cp</code></td><td align="left">在容器和本地文件系统之间复制文件&#x2F;文件夹</td></tr><tr><td align="left"><code>create</code></td><td align="left">创建一个新容器</td></tr><tr><td align="left"><code>diff</code></td><td align="left">检查容器文件系统上文件或目录的更改</td></tr><tr><td align="left"><code>events</code></td><td align="left">从服务器获取实时事件</td></tr><tr><td align="left"><code>exec</code></td><td align="left">在正在运行的容器中运行命令</td></tr><tr><td align="left"><code>export</code></td><td align="left">将容器的文件系统导出为 tar 存档</td></tr><tr><td align="left"><code>history</code></td><td align="left">显示镜像的历史</td></tr><tr><td align="left"><code>images</code></td><td align="left">列出镜像</td></tr><tr><td align="left"><code>import</code></td><td align="left">从 tarball 导入内容以创建文件系统映像</td></tr><tr><td align="left"><code>info</code></td><td align="left">显示系统范围的信息</td></tr><tr><td align="left"><code>inspect</code></td><td align="left">返回有关 Docker 对象的低级信息</td></tr><tr><td align="left"><code>kill</code></td><td align="left">杀死一个或多个正在运行的容器</td></tr><tr><td align="left"><code>load</code></td><td align="left">从 tar 存档或 STDIN 加载镜像</td></tr><tr><td align="left"><code>login</code></td><td align="left">登录到 Docker 注册表</td></tr><tr><td align="left"><code>logout</code></td><td align="left">从 Docker 注册表中注销</td></tr><tr><td align="left"><code>logs</code></td><td align="left">获取容器的日志</td></tr><tr><td align="left"><code>pause</code></td><td align="left">暂停一个或多个容器内的所有进程</td></tr><tr><td align="left"><code>port</code></td><td align="left">列出容器的端口映射或特定映射</td></tr><tr><td align="left"><code>ps</code></td><td align="left">列出容器</td></tr><tr><td align="left"><code>pull</code></td><td align="left">从注册表中提取镜像或存储库</td></tr><tr><td align="left"><code>push</code></td><td align="left">将镜像或存储库推送到注册表</td></tr><tr><td align="left"><code>rename</code></td><td align="left">重命名容器</td></tr><tr><td align="left"><code>restart</code></td><td align="left">重启一个或多个容器</td></tr><tr><td align="left"><code>rm</code></td><td align="left">移除一个或多个容器</td></tr><tr><td align="left"><code>rmi</code></td><td align="left">移除一张或多张镜像</td></tr><tr><td align="left"><code>run</code></td><td align="left">在新容器中运行命令</td></tr><tr><td align="left"><code>save</code></td><td align="left">将一个或多个镜像保存到 tar 存档（默认流式传输到 STDOUT）</td></tr><tr><td align="left"><code>search</code></td><td align="left">在 <code>Docker Hub</code> 中搜索镜像</td></tr><tr><td align="left"><code>start</code></td><td align="left">启动一个或多个停止的容器</td></tr><tr><td align="left"><code>stats</code></td><td align="left">显示容器资源使用统计的实时流</td></tr><tr><td align="left"><code>stop</code></td><td align="left">停止一个或多个正在运行的容器</td></tr><tr><td align="left"><code>tag</code></td><td align="left">创建一个引用 SOURCE_IMAGE 的标记 TARGET_IMAGE</td></tr><tr><td align="left"><code>top</code></td><td align="left">显示容器的运行进程</td></tr><tr><td align="left"><code>unpause</code></td><td align="left">取消暂停一个或多个容器中的所有进程</td></tr><tr><td align="left"><code>update</code></td><td align="left">更新一个或多个容器的配置</td></tr><tr><td align="left"><code>version</code></td><td align="left">显示 Docker 版本信息</td></tr><tr><td align="left"><code>wait</code></td><td align="left">阻塞直到一个或多个容器停止，然后打印它们的退出代码</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="docker-管理命令"><a href="#docker-管理命令" class="headerlink" title="docker 管理命令"></a>docker 管理命令</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>docker builder</code></td><td align="left">管理构建</td></tr><tr><td align="left"><code>docker buildx*</code></td><td align="left">Docker Buildx（Docker Inc.，v0.7.1）</td></tr><tr><td align="left"><code>docker compose*</code></td><td align="left">Docker Compose（Docker Inc.，v2.2.3）</td></tr><tr><td align="left"><code>docker config</code></td><td align="left">管理 Docker 配置</td></tr><tr><td align="left"><code>docker container</code></td><td align="left">管理容器</td></tr><tr><td align="left"><code>docker context</code></td><td align="left">管理上下文</td></tr><tr><td align="left"><code>docker image</code></td><td align="left">管理镜像</td></tr><tr><td align="left"><code>docker manifest</code></td><td align="left">管理 Docker 镜像清单和清单列表</td></tr><tr><td align="left"><code>docker network</code></td><td align="left">管理网络</td></tr><tr><td align="left"><code>docker node</code></td><td align="left">管理 Swarm 节点</td></tr><tr><td align="left"><code>docker plugin</code></td><td align="left">管理插件</td></tr><tr><td align="left"><code>docker scan*</code></td><td align="left">Docker 扫描（Docker Inc.，v0.16.0）</td></tr><tr><td align="left"><code>docker secret</code></td><td align="left">管理 Docker 机密</td></tr><tr><td align="left"><code>docker service</code></td><td align="left">管理服务</td></tr><tr><td align="left"><code>docker stack</code></td><td align="left">管理 Docker 堆栈</td></tr><tr><td align="left"><code>docker swarm</code></td><td align="left">管理群</td></tr><tr><td align="left"><code>docker system</code></td><td align="left">管理 Docker</td></tr><tr><td align="left"><code>docker trust</code></td><td align="left">管理对 Docker 映像的信任</td></tr><tr><td align="left"><code>docker volume</code></td><td align="left">管理卷</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="docker-全局参数"><a href="#docker-全局参数" class="headerlink" title="docker 全局参数"></a>docker 全局参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    --config string     <span class="comment"># 客户端配置文件的位置（默认“~/.docker”）</span></span><br><span class="line">-c, --context string    <span class="comment"># 用于连接到守护程序的上下文的名称（</span></span><br><span class="line">                        <span class="comment"># 覆盖 DOCKER_HOST 环境变量和使用</span></span><br><span class="line">                        <span class="comment"># “docker context use” 设置的默认上下文）</span></span><br><span class="line">-D, --debug             <span class="comment"># 启用调试模式</span></span><br><span class="line">-H, --host list         <span class="comment"># 要连接的守护进程套接字</span></span><br><span class="line">-l, --log-level string  <span class="comment"># 设置日志级别</span></span><br><span class="line">        <span class="comment"># （默认“info”） (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) </span></span><br><span class="line">    --tls               <span class="comment"># 使用 TLS； 由 --tlsverify 暗示</span></span><br><span class="line">    --tlscacert string  <span class="comment"># 仅由该 CA 签署的信任证书</span></span><br><span class="line">        <span class="comment">#（默认为“~/.docker/ca.pem”）</span></span><br><span class="line">    --tlscert string    <span class="comment"># TLS证书文件路径</span></span><br><span class="line">        <span class="comment">#（默认“~/.docker/cert.pem”）</span></span><br><span class="line">    --tlskey string     <span class="comment"># TLS 密钥文件的路径</span></span><br><span class="line">        <span class="comment">#（默认为“~/.docker/key.pem”）</span></span><br><span class="line">    --tlsverify         <span class="comment"># 使用 TLS 并验证远程</span></span><br><span class="line">-v, --version           <span class="comment"># 打印版本信息并退出</span></span><br></pre></td></tr></table></figure><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a, --all             显示所有镜像（默认隐藏中间镜像）</span><br><span class="line">    --digests         显示摘要</span><br><span class="line">-f, --filter filter   根据提供的条件过滤输出</span><br><span class="line">    --format string   使用 Go 模板打印漂亮的镜像</span><br><span class="line">    --no-trunc        不要截断输出</span><br><span class="line">-q, --quiet           仅显示镜像 ID</span><br></pre></td></tr></table></figure><h3 id="docker-run-create"><a href="#docker-run-create" class="headerlink" title="docker run&#x2F;create"></a>docker run&#x2F;create</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">    --add-host list            <span class="comment"># 添加自定义主机到 IP 映射 (host:ip)</span></span><br><span class="line">-a, --attach list              <span class="comment"># 连接到 STDIN、STDOUT 或 STDERR</span></span><br><span class="line">    --blkio-weight uint16      <span class="comment"># 块 IO（相对权重），介于 10 和 1000 之间，或 0 禁用（默认 0）</span></span><br><span class="line">    --blkio-weight-device list <span class="comment"># 块 IO 权重（相对设备权重）（默认 []）</span></span><br><span class="line">    --cap-add list             <span class="comment"># 添加 Linux 功能</span></span><br><span class="line">    --cap-drop list            <span class="comment"># 放弃 Linux 功能</span></span><br><span class="line">    --cgroup-parent string     <span class="comment"># 容器的可选父 cgroup</span></span><br><span class="line">    --cgroupns string          <span class="comment"># 要使用的 Cgroup 命名空间（主机|私有）</span></span><br><span class="line">                               <span class="comment">#  &#x27;host&#x27;:    在 Docker 主机的 cgroup 命名空间中运行容器</span></span><br><span class="line">                               <span class="comment">#  &#x27;private&#x27;: 在自己的私有 cgroup 命名空间中运行容器</span></span><br><span class="line">                               <span class="comment">#  &#x27;&#x27;:        使用由守护进程上的 </span></span><br><span class="line">                               <span class="comment">#        default-cgroupns-mode 选项配置的 cgroup 命名空间（默认）</span></span><br><span class="line">    --cidfile string           <span class="comment"># 将容器 ID 写入文件</span></span><br><span class="line">    --cpu-period int           <span class="comment"># 限制 CPU CFS（完全公平调度器）周期</span></span><br><span class="line">    --cpu-quota int            <span class="comment"># 限制 CPU CFS（完全公平调度器）配额</span></span><br><span class="line">    --cpu-rt-period int        <span class="comment"># 以微秒为单位限制 CPU 实时周期</span></span><br><span class="line">    --cpu-rt-runtime int       <span class="comment"># 以微秒为单位限制 CPU 实时运行时间</span></span><br><span class="line">-c, --cpu-shares int           <span class="comment"># CPU 份额（相对权重）</span></span><br><span class="line">    --cpus decimal             <span class="comment"># CPU 数量</span></span><br><span class="line">    --cpuset-cpus string       <span class="comment"># 允许执行的 CPU (0-3, 0,1)</span></span><br><span class="line">    --cpuset-mems string       <span class="comment"># 允许执行的 MEM (0-3, 0,1)</span></span><br><span class="line">    --device list              <span class="comment"># 将主机设备添加到容器</span></span><br><span class="line">    --device-cgroup-rule list  <span class="comment"># 将规则添加到 cgroup 允许的设备列表</span></span><br><span class="line">    --device-read-bps list     <span class="comment"># 限制设备的读取速率（每秒字节数）（默认 []）</span></span><br><span class="line">    --device-read-iops list    <span class="comment"># 限制设备的读取速率（每秒 IO）（默认 []）</span></span><br><span class="line">    --device-write-bps list    <span class="comment"># 限制设备的写入速率（每秒字节数）（默认 []）</span></span><br><span class="line">    --device-write-iops list   <span class="comment"># 限制设备的写入速率（每秒 IO）（默认 []）</span></span><br><span class="line">    --disable-content-trust    <span class="comment"># 跳过镜像验证（默认为 true）</span></span><br><span class="line">    --dns list                 <span class="comment"># 设置自定义 DNS 服务器</span></span><br><span class="line">    --dns-option list          <span class="comment"># 设置 DNS 选项</span></span><br><span class="line">    --dns-search list          <span class="comment"># 设置自定义 DNS 搜索域</span></span><br><span class="line">    --domainname string        <span class="comment"># 容器 NIS 域名</span></span><br><span class="line">    --entrypoint string        <span class="comment"># 覆盖镜像的默认入口点</span></span><br><span class="line">-e, --<span class="built_in">env</span> list                 <span class="comment"># 设置环境变量</span></span><br><span class="line">    --env-file list            <span class="comment"># 读入环境变量文件</span></span><br><span class="line">    --expose list              <span class="comment"># 公开一个端口或一系列端口</span></span><br><span class="line">    --gpus gpu-request         <span class="comment"># 要添加到容器中的 GPU 设备（“全部”以传递所有 GPU）</span></span><br><span class="line">    --group-add list           <span class="comment"># 添加其他组以加入</span></span><br><span class="line">    --health-cmd string        <span class="comment"># 运行以检查运行状况的命令</span></span><br><span class="line">    --health-interval duration <span class="comment"># 运行检查之间的时间 (ms|s|m|h) (默认 0s)</span></span><br><span class="line">    --health-retries int           <span class="comment"># 需要报告不健康的连续失败</span></span><br><span class="line">    --health-start-period duration <span class="comment"># 开始健康重试倒计时之前容器初始化的开始时间（ms|s|m|h）（默认 0s）</span></span><br><span class="line">    --health-timeout duration      <span class="comment"># 允许运行一项检查的最长时间 (ms|s|m|h) (默认 0s)</span></span><br><span class="line">    --<span class="built_in">help</span>                     <span class="comment"># 打印使用</span></span><br><span class="line">-h, --hostname string          <span class="comment"># 容器主机名</span></span><br><span class="line">    --init                     <span class="comment"># 在容器内运行一个 init 来转发信号并收获进程</span></span><br><span class="line">-i, --interactive              <span class="comment"># 即使没有连接，也保持 STDIN 打开</span></span><br><span class="line">    --ip string                <span class="comment"># IPv4 地址（例如 172.30.100.104）</span></span><br><span class="line">    --ip6 string               <span class="comment"># IPv6 地址（例如，2001:db8::33）</span></span><br><span class="line">    --ipc string               <span class="comment"># 要使用的 IPC 模式</span></span><br><span class="line">    --isolation string         <span class="comment"># 容器隔离技术</span></span><br><span class="line">    --kernel-memory bytes      <span class="comment"># 内核内存限制</span></span><br><span class="line">-l, --label list               <span class="comment"># 在容器上设置元数据</span></span><br><span class="line">    --label-file list          <span class="comment"># 读入以行分隔的标签文件</span></span><br><span class="line">    --<span class="built_in">link</span> list                <span class="comment"># 添加到另一个容器的链接</span></span><br><span class="line">    --link-local-ip list       <span class="comment"># 容器 IPv4/IPv6 链路本地地址</span></span><br><span class="line">    --log-driver string        <span class="comment"># 容器的日志记录驱动程序</span></span><br><span class="line">    --log-opt list             <span class="comment"># 日志驱动程序选项</span></span><br><span class="line">    --mac-address string       <span class="comment"># 容器 MAC 地址（例如 92:d0:c6:0a:29:33）</span></span><br><span class="line">-m, --memory bytes             <span class="comment"># 内存限制</span></span><br><span class="line">    --memory-reservation bytes <span class="comment"># 内存软限制</span></span><br><span class="line">    --memory-swap bytes        <span class="comment"># 交换限制等于内存加上交换：&#x27;-1&#x27; 启用无限交换</span></span><br><span class="line">    --memory-swappiness int    <span class="comment"># 调整容器内存交换（0 到 100）（默认 -1）</span></span><br><span class="line">    --mount mount              <span class="comment"># 将文件系统挂载附加到容器</span></span><br><span class="line">    --name string              <span class="comment"># 为容器分配名称</span></span><br><span class="line">    --network network          <span class="comment"># 将容器连接到网络</span></span><br><span class="line">    --network-alias list       <span class="comment"># 为容器添加网络范围的别名</span></span><br><span class="line">    --no-healthcheck           <span class="comment"># 禁用任何容器指定的 HEALTHCHECK</span></span><br><span class="line">    --oom-kill-disable         <span class="comment"># 禁用 OOM 杀手</span></span><br><span class="line">    --oom-score-adj int        <span class="comment"># 调整主机的 OOM 首选项（-1000 到 1000）</span></span><br><span class="line">    --pid string               <span class="comment"># 要使用的 PID 命名空间</span></span><br><span class="line">    --pids-limit int           <span class="comment"># 调整容器 pids 限制（设置 -1 表示无限制）</span></span><br><span class="line">    --platform string          <span class="comment"># 如果服务器支持多平台，则设置平台</span></span><br><span class="line">    --privileged               <span class="comment"># 授予此容器扩展权限</span></span><br><span class="line">-p, --publish list             <span class="comment"># 将容器的端口发布到主机</span></span><br><span class="line">-P, --publish-all              <span class="comment"># 将所有暴露的端口发布到随机端口</span></span><br><span class="line">    --pull string              <span class="comment"># 创建前拉取镜像(&quot;always&quot;|&quot;missing&quot;|&quot;never&quot;)(默认&quot;missing&quot;)</span></span><br><span class="line">    --read-only                <span class="comment"># 将容器的根文件系统挂载为只读</span></span><br><span class="line">    --restart string           <span class="comment"># 容器退出时应用的重启策略（默认“否”）</span></span><br><span class="line">    --<span class="built_in">rm</span>                       <span class="comment"># 容器退出时自动移除</span></span><br><span class="line">    --runtime string           <span class="comment"># 用于此容器的运行时</span></span><br><span class="line">    --security-opt list        <span class="comment"># 安全选项</span></span><br><span class="line">    --shm-size bytes           <span class="comment"># /dev/shm 的大小</span></span><br><span class="line">    --stop-signal string       <span class="comment"># 停止容器的信号（默认“SIGTERM”）</span></span><br><span class="line">    --stop-timeout int         <span class="comment"># 停止容器的超时（以秒为单位）</span></span><br><span class="line">    --storage-opt list         <span class="comment"># 容器的存储驱动程序选项</span></span><br><span class="line">    --sysctl map               <span class="comment"># Sysctl 选项（默认 map[]）</span></span><br><span class="line">    --tmpfs list               <span class="comment"># 挂载 tmpfs 目录</span></span><br><span class="line">-t, --<span class="built_in">tty</span>                      <span class="comment"># 分配一个伪 TTY</span></span><br><span class="line">    --<span class="built_in">ulimit</span> <span class="built_in">ulimit</span>            <span class="comment"># ulimit 选项（默认 []）</span></span><br><span class="line">-u, --user string              <span class="comment"># 用户名或 UID（格式：&lt;name|uid&gt;[:&lt;group|gid&gt;]）</span></span><br><span class="line">    --userns string            <span class="comment"># 要使用的用户命名空间</span></span><br><span class="line">    --uts string               <span class="comment"># 要使用的 UTS 命名空间</span></span><br><span class="line">-v, --volume list              <span class="comment"># 绑定挂载卷</span></span><br><span class="line">    --volume-driver string     <span class="comment"># 容器的可选卷驱动程序</span></span><br><span class="line">    --volumes-from list        <span class="comment"># 从指定容器挂载卷</span></span><br><span class="line">-w, --workdir string           <span class="comment"># 容器内的工作目录</span></span><br></pre></td></tr></table></figure><p><code>run</code>&#x2F;<code>create</code> 大部分参数一致</p><h3 id="修改Docker镜像拉取地址"><a href="#修改Docker镜像拉取地址" class="headerlink" title="修改Docker镜像拉取地址"></a>修改Docker镜像拉取地址</h3><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://1ojaslt1.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改-Docker-数据存储路径"><a href="#修改-Docker-数据存储路径" class="headerlink" title="修改 Docker 数据存储路径"></a>修改 Docker 数据存储路径</h3><!--rehype:wrap-class=row-span-2--><ul><li><p>停止 Docker 服务：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop docker</span><br></pre></td></tr></table></figure></li><li><p>将现有的 Docker 数据移动到新的目录：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /var/lib/docker /new/path/docker</span><br></pre></td></tr></table></figure></li><li><p>更新 Docker 的配置文件 <code>/etc/docker/daemon.json</code>，添加或修改 <code>data-root</code> 选项：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;data-root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/new/path/docker&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>重新启动 Docker 服务：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure></li></ul><!--rehype:className=style-timeline--><p>⚠️注意：当你执行此操作时，旧的容器和镜像可能无法正常工作，因为它们的路径已更改。建议在部署 Docker 时执行此操作，以避免这些问题。如有必要，重新启动容器或重新创建它们，以确保它们的配置指向新的路径。</p><h3 id="Docker降级版本的方法"><a href="#Docker降级版本的方法" class="headerlink" title="Docker降级版本的方法"></a>Docker降级版本的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum downgrade --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">    -y docker-ce-<span class="variable">$&#123;version&#125;</span> docker-ce-selinux-<span class="variable">$&#123;version&#125;</span></span><br></pre></td></tr></table></figure><p><code>$&#123;version&#125;</code> 指定要降级的版本</p><h2 id="Docker-常用示例"><a href="#Docker-常用示例" class="headerlink" title="Docker 常用示例"></a>Docker 常用示例</h2><!--rehype:body-class=cols-2--><h3 id="Docker-Web-管理工具-portainer"><a href="#Docker-Web-管理工具-portainer" class="headerlink" title="Docker Web 管理工具 portainer"></a>Docker Web 管理工具 portainer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name portainer \</span><br><span class="line">  -p 8000:8000 \</span><br><span class="line">  -p 9443:9443 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v <span class="variable">$HOME</span>/portainer:/data \</span><br><span class="line">    portainer/portainer-ee:latest</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 80:80 --restart=always --name Nginx \</span><br><span class="line">-v <span class="variable">$HOME</span>/nginx_data/html:/usr/share/nginx/html \</span><br><span class="line">-v <span class="variable">$HOME</span>/nginx_data/conf:/etc/nginx/conf.d \</span><br><span class="line">-v <span class="variable">$HOME</span>/nginx_data/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><ul><li><code>-itd</code>: 启动容器并保持后台运行</li><li><code>-p 80:80</code>: 将主机的 80 端口映射到容器的 80 端口，用于访问 Nginx 站点页面</li><li><code>--name Nginx</code>: 给容器指定一个名称为 “Nginx”</li><li><code>--restart=always</code>: 在容器退出时，总是重新启动容器</li></ul><h4 id="持久化解释"><a href="#持久化解释" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/nginx_data/html:/usr/share/nginx/html</code></td><td>将容器中的 Nginx 站点页面路径映射到本地</td></tr><tr><td align="left"><code>-v $HOME/nginx_data/conf:/etc/nginx/conf.d</code></td><td>将容器中的 Nginx 虚拟主机配置文件路径映射到本地 <em>(需要提前准备好文件)</em></td></tr><tr><td align="left"><code>-v $HOME/nginx_data/nginx.conf:/etc/nginx/nginx.conf</code></td><td>将容器中的 Nginx 主配置文件路径映射到本地 <em>(需要提前准备好文件)</em></td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 8080:8080 --restart=always \</span><br><span class="line">--name Tomcat \</span><br><span class="line">-v <span class="variable">$HOME</span>/Tomcat_data/webapps:/usr/local/tomcat/webapps/ROOT \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure><h4 id="参数解释-1"><a href="#参数解释-1" class="headerlink" title="参数解释"></a>参数解释</h4><ul><li><code>-itd</code>: 以后台运行的方式启动容器，并分配一个伪终端（pseudo-TTY）和保持 STDIN 打开</li><li><code>-p 8080:8080</code>: 将主机的端口 8080 映射到容器的 8080 端口，用于访问 Tomcat 站点页面</li><li><code>--name Tomcat</code>: 为容器指定名称为 “Tomcat”</li><li><code>--restart=always</code>: 当容器退出时，总是重新启动容器</li></ul><h4 id="持久化解释-1"><a href="#持久化解释-1" class="headerlink" title="持久化解释"></a>持久化解释</h4><p>将容器中的 <code>/usr/local/tomcat/webapps/ROOT</code> 路径挂载到宿主机中的 <code>$HOME/Tomcat_data/webapps</code> 目录下。</p><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><!--rehype:style=background:#d7a100;--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">-p 7001:7001 \</span><br><span class="line">-p 7002:7002 \</span><br><span class="line">-p 5556:5556 \</span><br><span class="line">--restart=always --name Weblogic ismaleiva90/weblogic12</span><br></pre></td></tr></table></figure><p>注意：<code>ismaleiva90/weblogic12</code> 是非官方或认证的 <code>Docker</code> 镜像！</p><h4 id="参数解释-2"><a href="#参数解释-2" class="headerlink" title="参数解释"></a>参数解释</h4><ul><li><code>-itd</code>: 后台运行容器，保持 STDIN 打开</li><li><code>-p 7001:7001</code>: 映射主机 7001 端口到容器 7001 端口，访问 Weblogic 控制台页面</li><li><code>-p 7002:7002</code>: 映射主机 7002 端口到容器 7002 端口，访问 Weblogic 站点页面</li><li><code>-p 5556:5556</code>: 映射主机 5556 端口到容器 5556 端口，访问 Weblogic 站点页面</li><li><code>--name Weblogic</code>: 容器名称为 “Weblogic”</li><li><code>--restart=always</code>: 容器退出时，总是重新启动容器</li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it -p 3306:3306 --name MySQL --restart=always \</span><br><span class="line">-v <span class="variable">$HOME</span>/MySQL_Data/data:/var/lib/mysql \</span><br><span class="line">-v <span class="variable">$HOME</span>/MySQL_Data/conf:/etc/mysql/conf.d \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">&#x27;test_db&#x27;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&#x27;abc$123&#x27;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&#x27;testuser&#x27;</span> -e MYSQL_PASSWORD=<span class="string">&#x27;abc$123&#x27;</span> \</span><br><span class="line">mysql:8.0.31 \</span><br><span class="line">    --character-set-server=utf8mb4 \</span><br><span class="line">    --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h4 id="参数解释-3"><a href="#参数解释-3" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 3306:3306</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 3306 端口映射到容器的 3306 端口，用于访问 MySQL 数据库</td></tr><tr><td align="left"><code>--name MySQL</code></td><td>为容器指定一个名称，这里是 “MySQL”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr><tr><td align="left"><code>--privileged=true</code></td><td>若不加字段–privileged&#x3D;true可能会报权限错误</td></tr><tr><td align="left"><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code></td><td>这两个选项参数是改变所有表的默认编码和排序规则以使用 UTF-8 (utf8mb4)</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="持久化解释-2"><a href="#持久化解释-2" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/MySQL_Data/data:/var/lib/mysql</code></td><td>将容器中的 MySQL 数据库数据存储到本地，以确保在容器重启时数据得以保留。</td></tr><tr><td align="left"><code>-v $HOME/MySQL_Data/conf:/etc/mysql/conf.d</code></td><td>将容器中的 MySQL 自定义配置文件路径映射到本地，以方便自定义配置。<em>请确保提前准备好文件，否则可能会启动失败</em>。</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="环境变量解释"><a href="#环境变量解释" class="headerlink" title="环境变量解释"></a>环境变量解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>MYSQL_ROOT_PASSWORD</code> <em>【必填】</em></td><td>必需的变量，用于指定 MySQL 的 root 超级用户帐户的密码。如果设置了 <em><code>MYSQL_RANDOM_ROOT_PASSWORD=yes</code></em> ，则会随机生成一个密码，并打印到 stdout。</td></tr><tr><td align="left"><code>MYSQL_USER</code> <em>【可选】</em></td><td>可选变量，用于创建新用户。此用户将被授予指定数据库的超级用户权限。需要同时设置 <code>MYSQL_PASSWORD</code> 变量。</td></tr><tr><td align="left"><code>MYSQL_PASSWORD</code> <em>【可选】</em></td><td>可选变量，用于创建新用户并设置密码。此用户将被授予指定数据库的超级用户权限。需要同时设置 <code>MYSQL_USER</code> 变量。</td></tr><tr><td align="left"><code>MYSQL_DATABASE</code> <em>【可选】</em></td><td>可选变量，允许在容器启动时指定要创建的数据库的名称。如果设置了 <code>MYSQL_USER</code> 和 <code>MYSQL_PASSWORD</code>，则该用户将被授予对此数据库的超级用户访问权限。</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it -p 1521:1521 --name Oracle_11g --restart=always \</span><br><span class="line">--mount <span class="built_in">source</span>=oracle_vol,target=/home/oracle/app/oracle/oradata \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p>注意：registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g 是非官方或认证的Docker镜像！</p><h4 id="参数解释-4"><a href="#参数解释-4" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 1521:1521</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 1521 端口映射到容器的 1521 端口，用于访问 Oracle 数据库</td></tr><tr><td align="left"><code>--name Oracle_11g</code></td><td>为容器指定一个名称，这里是 “Oracle_11g”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="持久化解释-3"><a href="#持久化解释-3" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>--mount source=oracle_vol,target=/home/oracle/app/oracle/oradata</code></td><td>将名为 “oracle_vol” 的 Docker 卷挂载到容器中的 “&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;oradata” 路径。这样做的目的是将 Oracle 数据库的数据存储在持久化的卷中，以便数据在容器重启时得以保留</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5432:5432 --restart=always --name PostgreSQL \</span><br><span class="line">-e POSTGRES_USER=<span class="string">&#x27;postgres&#x27;</span> \</span><br><span class="line">-e POSTGRES_PASSWORD=<span class="string">&#x27;abc$123&#x27;</span> \</span><br><span class="line">-e POSTGRES_DB=<span class="string">&#x27;test&#x27;</span> \</span><br><span class="line">-e PGDATA=/var/lib/postgresql/data/pgdata \</span><br><span class="line">-v <span class="variable">$HOME</span>/Postgres_Data:/var/lib/postgresql/data \</span><br><span class="line">-d postgres</span><br></pre></td></tr></table></figure><h4 id="参数解释-5"><a href="#参数解释-5" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 5432:5432</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 5432 端口映射到容器的 5432 端口，用于访问 Postgre 数据库</td></tr><tr><td align="left"><code>--name PostgreSQL</code></td><td>为容器指定一个名称，这里是 “PostgreSQL”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr></tbody></table><!--rehype:className=auto-wrap left-align--><h4 id="持久化解释-4"><a href="#持久化解释-4" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/Postgres_Data:/var/lib/postgresql/data</code></td><td>将到容器中的 “&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data” 路径映射挂载到 宿主机中的 ”$HOME&#x2F;Postgres_Data“目录下,这样做的目的是将 Postgre 数据库的数据存储在本地中，以便数据在容器重启时得以保留</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="环境变量解释-1"><a href="#环境变量解释-1" class="headerlink" title="环境变量解释"></a>环境变量解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>POSTGRES_PASSWORD</code> <em>【必填】</em></td><td>PostgreSQL 映像所需的环境变量。设置 PostgreSQL 超级用户的密码。不能为空或未定义。</td></tr><tr><td align="left"><code>POSTGRES_USER</code> <em>【可选】</em></td><td>可选环境变量，用于创建用户及其密码。创建具有超级用户权限的指定用户和同名的数据库。默认用户是 “postgres”。</td></tr><tr><td align="left"><code>POSTGRES_DB</code> <em>【可选】</em></td><td>可选环境变量，用于定义首次启动映像时创建的默认数据库的名称。默认值是 <code>POSTGRES_USER</code> 的值，如果未设置，则默认为 “postgres”。</td></tr><tr><td align="left"><code>PGDATA</code> <em>【可选】</em></td><td>默认为 <code>/var/lib/postgresql/data</code>。如果使用的数据卷是文件系统挂载点或无法被用户 chowned 的远程文件夹，则需要设置此环境变量以包含数据。</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="达梦"><a href="#达梦" class="headerlink" title="达梦"></a>达梦</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5236:5236 --restart=always --name DaMengDB \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-e PAGE_SIZE=16 \</span><br><span class="line">-e LD_LIBRARY_PATH=/opt/dmdbms/bin \</span><br><span class="line">-e EXTENT_SIZE=32 \</span><br><span class="line">-e BLANK_PAD_MODE=1 \</span><br><span class="line">-e LOG_SIZE=1024 \</span><br><span class="line">-e UNICODE_FLAG=1 \</span><br><span class="line">-e LENGTH_IN_CHAR=1 \</span><br><span class="line">-e INSTANCE_NAME=dm8_test \</span><br><span class="line">-v <span class="variable">$HOME</span>/DaMeng_Data:/opt/dmdbms/data \</span><br><span class="line">if010/dameng</span><br></pre></td></tr></table></figure><p>注意：if010&#x2F;dameng 是从官网下载上传至 Docker Hub 的镜像！</p><h4 id="参数解释-6"><a href="#参数解释-6" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 5236:5236</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 5236 端口映射到容器的 5236 端口，用于访问达梦数据库</td></tr><tr><td align="left"><code>--name DaMengDB</code></td><td>为容器指定一个名称，这里是 “DaMengDB”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr></tbody></table><!--rehype:className=auto-wrap left-align--><h4 id="持久化解释-5"><a href="#持久化解释-5" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/DaMeng_Data:/opt/dmdbms/data</code></td><td>将容器中的达梦数据库数据存储路径 “&#x2F;opt&#x2F;dmdbms&#x2F;data” 映射到本地主机的 “$HOME&#x2F;DaMeng_Data” 目录，以确保在容器重启时数据得以保留</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="人大金仓"><a href="#人大金仓" class="headerlink" title="人大金仓"></a>人大金仓</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -idt -p 54321:54321 --restart=always \</span><br><span class="line">--name Kingbase --privileged=<span class="literal">true</span> \</span><br><span class="line">-e DB_MODE=oracle \</span><br><span class="line">-e NEED_START=<span class="built_in">yes</span> \</span><br><span class="line">-e DB_USER=kingbase \</span><br><span class="line">-e DB_PASSWORD=abc123 \</span><br><span class="line">-e ENABLE_CI=<span class="built_in">yes</span> \</span><br><span class="line">-v <span class="variable">$HOME</span>/Kingbase_Data:/home/kingbase/userdata \</span><br><span class="line">if010/kingbase:v009r001c001b0025 /usr/sbin/init</span><br></pre></td></tr></table></figure><p>注意：<code>if010/kingbase:v009r001c001b0025</code> 是从官网下载上传至 Docker Hub 的镜像，官网提供了两个下载版本，一个是 <code>v008r006c008b0014</code>，另一个是 <code>v009r001c001b0025</code>，可以拉取对应的 <code>tag</code> 镜像进行测试使用！</p><h4 id="参数解释-7"><a href="#参数解释-7" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-itd</code></td><td>以后台方式启动容器，保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 54321:54321</code></td><td>将主机的 54321 端口映射到容器的 54321 端口，访问数据库</td></tr><tr><td align="left"><code>--name Kingbase</code></td><td>给容器指定名称为 “Kingbase”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>容器退出时，总是重新启动容器</td></tr></tbody></table><!--rehype:className=auto-wrap left-align--><h4 id="持久化解释-6"><a href="#持久化解释-6" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/Kingbase_Data:/home/kingbase/userdata</code></td><td>将容器中的人大金仓数据库数据存储路径 “&#x2F;home&#x2F;kingbase&#x2F;userdata” 映射到本地主机的 “$HOME&#x2F;Kingbase_Data” 目录，以确保在容器重启时数据得以保留</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="环境变量解释-2"><a href="#环境变量解释-2" class="headerlink" title="环境变量解释"></a>环境变量解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>DB_USER</code> <em>【可选】</em></td><td>设置用户及其密码，默认为 “system”</td></tr><tr><td align="left"><code>DB_PASSWORD</code> <em>【可选】</em></td><td>设置用户密码，默认为 “123456”</td></tr><tr><td align="left"><code>DB_MODE</code> <em>【可选】</em></td><td>设置数据库模式，支持的模式有 oracle、pg、mysql</td></tr><tr><td align="left"><code>NEED_START</code> <em>【可选】</em></td><td>设置进入容器后是否启动数据库，默认为 “yes”</td></tr><tr><td align="left"><code>ENABLE_CI</code> <em>【可选】</em></td><td>设置是否需要配置大小写敏感，默认为 “yes”</td></tr></tbody></table><!--rehype:className=auto-wrap left-align--><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --restart=always --name Redis \</span><br><span class="line">-v <span class="variable">$HOME</span>/Redis_Data/conf:/usr/local/etc/redis \</span><br><span class="line">-v <span class="variable">$HOME</span>/Redis_Data/data:/data \</span><br><span class="line">redis redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h4 id="参数解释-8"><a href="#参数解释-8" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 6379:6379</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 6379 端口映射到容器的 6379 端口，用于访问 Redis 数据库</td></tr><tr><td align="left"><code>--name Redis</code></td><td>为容器指定一个名称，这里是 “Redis”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="持久化解释-7"><a href="#持久化解释-7" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/Redis_Data/conf:/usr/local/etc/redis</code></td><td><em>(需提前准备好文件，否则可能会启动失败)</em> 将到容器中的 “&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis” 路径映射挂载到 宿主机中的”$HOME&#x2F;Redis_Data&#x2F;conf”目录下,这样子做的目的是可以自定义Redis的配置文件</td></tr><tr><td align="left"><code>-v $HOME/Redis_Data/data:/data</code></td><td>将到容器中的 “&#x2F;data” 路径映射挂载到 宿主机中的”$HOME&#x2F;Redis_Data&#x2F;data”目录下,这样做的目的是将 Redis 数据库的数据存储在本地中，以便数据在容器重启时得以保留</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="关于启动命令"><a href="#关于启动命令" class="headerlink" title="关于启动命令"></a>关于启动命令</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>redis-server /usr/local/etc/redis/redis.conf</code></td><td>容器内部执行该命令是为了按照我们自定义的配置文件启动，这个不是必须的！！！</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 11211:11211 --name Memcached \</span><br><span class="line">    --restart=always memcached memcached -m 64</span><br></pre></td></tr></table></figure><h4 id="参数解释-9"><a href="#参数解释-9" class="headerlink" title="参数解释"></a>参数解释</h4><ul><li><code>-d</code>: 以后台方式启动容器。</li><li><code>-it</code>: 分配一个伪终端（pseudo-TTY）并保持 STDIN 打开。</li><li><code>-p 11211:11211</code>: 将主机的 11211 端口映射到容器的 11211 端口，用于访问 Memcached 消息队列的 web 管理界面。</li><li><code>--name Memcached</code>: 容器的名称为 “Memcached”。</li><li><code>--restart=always</code>: 容器退出时，总是重新启动容器。</li></ul><h4 id="命令执行解释"><a href="#命令执行解释" class="headerlink" title="命令执行解释"></a>命令执行解释</h4><ul><li><code>memcached -m 64</code> 这会将 Memcached 服务器设置为使用 64 MB 进行存储</li></ul><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 27017:27017 --restart=always --name MongoDB \</span><br><span class="line">-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \</span><br><span class="line">-e MONGO_INITDB_ROOT_PASSWORD=abc123 \</span><br><span class="line">-v <span class="variable">$HOME</span>/MongoDB_Data/data:/data/db \</span><br><span class="line">-v <span class="variable">$HOME</span>/MongoDB_Data/conf:/etc/mongo \</span><br><span class="line">mongo --config /etc/mongo/mongod.conf --wiredTigerCacheSizeGB 1.5</span><br></pre></td></tr></table></figure><h4 id="参数解释-10"><a href="#参数解释-10" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 27017:27017</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 27017 端口映射到容器的 27017 端口，用于访问 MongoDB 数据库</td></tr><tr><td align="left"><code>--name MongoDB</code></td><td>为容器指定一个名称，这里是 “MongoDB”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr><tr><td align="left"><code>--config /etc/mongo/mongod.conf</code></td><td>指定配置文件路径 (这个不是必须的，设置此选项之前需准备好mongod.conf文件映射到Docker内部)</td></tr><tr><td align="left"><code>--wiredTigerCacheSizeGB 1.5</code></td><td>设置WiredTiger缓存大小限制为1.5G</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="持久化解释-8"><a href="#持久化解释-8" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v $HOME/MongoDB_Data/conf:/etc/mongo</code></td><td>将到容器中的 “&#x2F;etc&#x2F;mongo” 路径映射挂载到 宿主机中的”$HOME&#x2F;MongoDB_Data&#x2F;conf”目录下,这样子做的目的是可以自定义MongoDB的配置文件 <em>(需提前准备好文件，否则可能会启动失败)</em></td></tr><tr><td align="left"><code>-v $HOME/Redis_Data/data:/data</code></td><td>将到容器中的 “&#x2F;data&#x2F;db” 路径映射挂载到 宿主机中的”$HOME&#x2F;MongoDB_Data&#x2F;data”目录下,这样做的目的是将 MongoDB 数据库的数据存储在本地中，以便数据在容器重启时得以保留</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="环境变量解释-3"><a href="#环境变量解释-3" class="headerlink" title="环境变量解释"></a>环境变量解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>MONGO_INITDB_ROOT_USERNAME</code> <em>【可选】</em></td><td>该变量是创建管理员用户，该用户是在 admin 身份验证数据库中创建的，并被赋予角色 root，这是一个”超级用户”角色。</td></tr><tr><td align="left"><code>MONGO_INITDB_ROOT_PASSWORD</code> <em>【可选】</em></td><td>该变量是为创建管理员用户设置密码，需配合 <code>MONGO_INITDB_ROOT_USERNAME</code> 变量参数使用</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 15672:15672 --name RabbitMQ \</span><br><span class="line">--hostname rmq-test \</span><br><span class="line">-e RABBITMQ_DEFAULT_VHOST=rmq-test \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=abc123 \</span><br><span class="line">rabbitmq:3-management </span><br></pre></td></tr></table></figure><h4 id="参数解释-11"><a href="#参数解释-11" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-itd</code></td><td>表示以后台运行的方式启动容器,并分配一个伪终端（pseudo-TTY）和保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 15672:15672</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 15672 端口映射到容器的 15672 端口，用于访问 RabbitMQ 控制台页面，内部除了该端口外，还开了4369&#x2F;tcp、5671-5672&#x2F;tcp、15671&#x2F;tcp、15691-15692&#x2F;tcp、25672&#x2F;tcp</td></tr><tr><td align="left"><code>--name RabbitMQ</code></td><td>为容器指定一个名称，这里是 “RabbitMQ”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr><tr><td align="left"><code>--hostname</code></td><td>设置容器主机名称</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="环境变量解释-4"><a href="#环境变量解释-4" class="headerlink" title="环境变量解释"></a>环境变量解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>RABBITMQ_DEFAULT_VHOST</code> <em>【可选】</em></td><td>该变量是可选的，是设置 RabbitMQ 的主机名称</td></tr><tr><td align="left"><code>RABBITMQ_DEFAULT_USER</code> <em>【可选】</em></td><td>该变量是可选的，是设置 RabbitMQ 的账户</td></tr><tr><td align="left"><code>RABBITMQ_DEFAULT_PASS</code> <em>【可选】</em></td><td>该变量是可选的，是设置 RabbitMQ 的密码</td></tr></tbody></table><!--rehype:className=auto-wrap left-align--><h3 id="远程协助工具-Guacd"><a href="#远程协助工具-Guacd" class="headerlink" title="远程协助工具 Guacd"></a>远程协助工具 Guacd</h3><!--rehype:wrap-class=row-span-3--><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4822:4822 --privileged=<span class="literal">true</span> \</span><br><span class="line">    --restart=always --name Guacd \</span><br><span class="line">    -e LANG=zh_CN.UTF-8 \</span><br><span class="line">    -v /docker_data/Guacd/rdp-rec:/rdp-rec \</span><br><span class="line">    -v /docker_data/Guacd/rdp-file:/rdp-file \</span><br><span class="line">    guacamole/guacd</span><br></pre></td></tr></table></figure><h4 id="参数解释-12"><a href="#参数解释-12" class="headerlink" title="参数解释"></a>参数解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td>表示以后台运行的方式启动容器</td></tr><tr><td align="left"><code>-it</code></td><td>分别表示分配一个伪终端（pseudo-TTY）并保持 STDIN 打开</td></tr><tr><td align="left"><code>-p 4822:4822</code></td><td>将主机的端口映射到容器的端口，这里是将主机的 4822 端口映射到容器的 4822 端口，用于访问 Guacd远程的API接口</td></tr><tr><td align="left"><code>--name Guacd</code></td><td>为容器指定一个名称，这里是 “Guacd”</td></tr><tr><td align="left"><code>--restart=always</code></td><td>表示当容器退出时，总是重新启动容器</td></tr><tr><td align="left"><code>--privileged=true</code></td><td>若不加字段–privileged&#x3D;true可能会报权限错误</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="持久化解释-9"><a href="#持久化解释-9" class="headerlink" title="持久化解释"></a>持久化解释</h4><table><thead><tr><th align="left">–</th><th>–</th></tr></thead><tbody><tr><td align="left"><code>-v /docker_data/Guacd/rdp-rec:/rdp-rec</code></td><td>代码内固定配置，guacd服务rdp录屏文件存放路径</td></tr><tr><td align="left"><code>-v /docker_data/Guacd/rdp-file:/rdp-file</code></td><td>代码内固定配置，guacd服务rdp远程磁盘文件存放路</td></tr></tbody></table><!--rehype:className=style-list-arrow--><h4 id="环境变量解释-5"><a href="#环境变量解释-5" class="headerlink" title="环境变量解释"></a>环境变量解释</h4><ul><li><code>LANG</code> 设置字符编码格式</li></ul><h3 id="在线代码编辑器-Code-Server"><a href="#在线代码编辑器-Code-Server" class="headerlink" title="在线代码编辑器 Code Server"></a>在线代码编辑器 Code Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/.config</span><br><span class="line">$ docker run -it --name code-server  \</span><br><span class="line">  -p 127.0.0.1:8080:8080 \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$HOME</span>/.config/code-server:/home/coder/.config&quot;</span> \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$PWD</span>:/home/coder/project&quot;</span> \</span><br><span class="line">  -u <span class="string">&quot;<span class="subst">$(id -u)</span>:<span class="subst">$(id -g)</span>&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;DOCKER_USER=<span class="variable">$USER</span>&quot;</span> \</span><br><span class="line">    codercom/code-server:latest</span><br></pre></td></tr></table></figure><h3 id="媒体管理工具-Dim"><a href="#媒体管理工具-Dim" class="headerlink" title="媒体管理工具 Dim"></a>媒体管理工具 Dim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name my-dim \</span><br><span class="line">   -p 8000:8000/tcp \</span><br><span class="line">   -v <span class="variable">$HOME</span>/.config/dim:/opt/dim/config \</span><br><span class="line">   -v <span class="variable">$HOME</span>/dim/media:/media:ro \</span><br><span class="line">   -d ghcr.io/dusk-labs/dim:dev</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Dusk-Labs/dim">Github</a></p><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name gitlab \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 8443:443 --publish 8081:80 -p 2222:22 \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="./dockerfile.md">Dockerfile 备忘清单</a> <em>(github.io)</em></li><li><a href="https://docs.docker.com/get-started/">Docker 官方入门教程</a> <em>(docker.com)</em></li><li><a href="https://jaywcjlove.github.io/docker-tutorial">Docker入门学习笔记</a> <em>(github.io)</em></li><li><a href="https://www.loganjin.cn/article/docker-install/">快速安装Docker及配置及Docker配置、Docker常用命令</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-备忘清单&quot;&gt;&lt;a href=&quot;#Docker-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;Docker 备忘清单&quot;&gt;&lt;/a&gt;Docker 备忘清单&lt;/h1&gt;&lt;p&gt;这是 &lt;a href=&quot;https://docs.docker.co</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Docker" scheme="https://tdcqcx.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>HTML 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/html/"/>
    <id>https://tdcqcx.github.io/2025/01/08/html/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-备忘清单"><a href="#HTML-备忘清单" class="headerlink" title="HTML 备忘清单"></a>HTML 备忘清单</h1><p>此 HTML 快速参考备忘单以可读布局列出了常见的 <code>HTML</code> 和 <code>HTML5</code> 标记。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="hello-html"><a href="#hello-html" class="headerlink" title="hello.html"></a>hello.html</h3><!--rehype:wrap-class=col-span-2 row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 Boilerplate<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world, hello 备忘清单!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在 <a href="https://jsfiddle.net/Randy8080/1e4wz20b/">jsfiddle</a></p><h3 id="注释-Comment"><a href="#注释-Comment" class="headerlink" title="注释 Comment"></a>注释 Comment</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是代码注释 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  或者你可以注释掉一个</span></span><br><span class="line"><span class="comment">  大量的行。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="段落-Paragraph"><a href="#段落-Paragraph" class="headerlink" title="段落 Paragraph"></a>段落 Paragraph</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我来自快速参考<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>分享快速参考备忘单。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">段落元素</a></p><h3 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/jaywcjlove/reference&quot;</span>&gt;</span></span><br><span class="line">  Github</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:jack@abc.com&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:+123456789&quot;</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:+123456789&amp;body=ha%20ha&quot;</span>&gt;</span></span><br><span class="line">  短信</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>href</code></td><td align="left">超链接指向的 URL</td></tr><tr><td align="left"><code>rel</code></td><td align="left">链接 URL 的关系</td></tr><tr><td align="left"><code>target</code></td><td align="left">链接目标位置：<code>_self</code>&#x2F;<code>_blank</code>&#x2F;<code>_top</code>&#x2F;<code>_parent</code></td></tr></tbody></table><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a#attributes">&lt;a&gt; 属性</a></p><h3 id="Image-标签"><a href="#Image-标签" class="headerlink" title="Image 标签"></a>Image 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://xxx.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;在此处描述图像&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><hr><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td><code>src</code> <em>(URL&#x2F;路径)</em></td><td>必填，图片位置</td></tr><tr><td></td><td><code>alt</code></td><td>描述图像</td></tr><tr><td></td><td><code>width</code></td><td>图像宽度</td></tr><tr><td></td><td><code>height</code></td><td>图像高度</td></tr><tr><td></td><td><code>loading</code></td><td>浏览器应该如何加载</td></tr></tbody></table><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img">图像嵌入元素</a></p><h3 id="文本格式标签"><a href="#文本格式标签" class="headerlink" title="文本格式标签"></a>文本格式标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文字<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这段文字很重要<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这段文字被强调<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>源代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除的文字<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>突出显示的文本 (HTML5)<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入的文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>使文本上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>使文本下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>使文本变小<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>文本块引用<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 这是标题 1 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 这是标题 2 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> 这是标题 3 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 这是标题 4 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span> 这是标题 5 <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span> 这是标题 6 <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>您的页面上应该只有一个 <code>h1</code></p><h3 id="Section-Divisions"><a href="#Section-Divisions" class="headerlink" title="Section Divisions"></a>Section Divisions</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>&lt;div&gt;&lt;/div&gt;</code></td><td align="left">页面内容的划分或部分</td></tr><tr><td align="left"><code>&lt;span&gt;&lt;/span&gt;</code></td><td align="left">其他内容中的文本部分</td></tr><tr><td align="left"><code>&lt;p&gt;&lt;/p&gt;</code></td><td align="left">文本段落</td></tr><tr><td align="left"><code>&lt;br&gt;</code></td><td align="left">换行</td></tr><tr><td align="left"><code>&lt;hr&gt;</code></td><td align="left">水平分割线</td></tr></tbody></table><p>这些标签用于将页面划分为多个部分</p><h3 id="内部框架"><a href="#内部框架" class="headerlink" title="内部框架"></a>内部框架</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;inlineFrameExample&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">&quot;Inline Frame Example&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776%2C0.00030577182769775396%2C51.478569861898606&amp;layer=mapnik&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h4 id="↓-预览"><a href="#↓-预览" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><iframe id="inlineFrameExample"  title="Inline Frame Example"  width="100%"  height="200"  frameborder="0"  src="https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776%2C0.00030577182769775396%2C51.478569861898606&layer=mapnik"></iframe><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe">内联框架元素</a></p><h3 id="HTML-中的-JavaScript"><a href="#HTML-中的-JavaScript" class="headerlink" title="HTML 中的 JavaScript"></a>HTML 中的 JavaScript</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> text = <span class="string">&quot;Hello 快速参考&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(text);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部-JavaScript"><a href="#外部-JavaScript" class="headerlink" title="外部 JavaScript"></a>外部 JavaScript</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-中的-CSS"><a href="#HTML-中的-CSS" class="headerlink" title="HTML 中的 CSS"></a>HTML 中的 CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML5-标签"><a href="#HTML5-标签" class="headerlink" title="HTML5 标签"></a>HTML5 标签</h2><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span>...<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>快速参考<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>©2023 快速参考<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标题导航"><a href="#标题导航" class="headerlink" title="标题导航"></a>标题导航</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>编辑页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML5-Tags"><a href="#HTML5-Tags" class="headerlink" title="HTML5 Tags"></a>HTML5 Tags</h3><!--rehype:wrap-class=row-span-4--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article">article</a></td><td align="left">独立的内容</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside">aside</a></td><td align="left">次要内容</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio">audio</a></td><td align="left">嵌入声音或音频流</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/bdi">bdi</a></td><td align="left">双向隔离元件</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas">canvas</a></td><td align="left">通过JavaScript绘制图形</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/data">data</a></td><td align="left">机器可读内容</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/datalist">datalist</a></td><td align="left">一组预定义选项</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/details">details</a></td><td align="left">其他信息</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dialog">dialog</a></td><td align="left">对话框或子窗口</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/embed">embed</a></td><td align="left">嵌入外部应用程序</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/figcaption">figcaption</a></td><td align="left">图形的标题或图例</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/figure">figure</a></td><td align="left">插图</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer">footer</a></td><td align="left">页脚或最不重要的</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header">header</a></td><td align="left">刊头或重要信息</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main">main</a></td><td align="left">文件的主要内容</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/mark">mark</a></td><td align="left">突出显示的文本</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meter">meter</a></td><td align="left">已知范围内的标量值</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav">nav</a></td><td align="left">导航链接的一部分</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/output">output</a></td><td align="left">计算的结果</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/picture">picture</a></td><td align="left">用于多个图像源的容器</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/progress">progress</a></td><td align="left">任务的完成进度</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/rp">rp</a></td><td align="left">提供回退括号</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/rt">rt</a></td><td align="left">定义字符的发音</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ruby">ruby</a></td><td align="left">表示ruby注释</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section">section</a></td><td align="left">一系列相关内容中的组</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/source">source</a></td><td align="left">媒体元素的资源</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/summary">summary</a></td><td align="left">元素的摘要</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template">template</a></td><td align="left">定义HTML片段</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/time">time</a></td><td align="left">时间或日期</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/track">track</a></td><td align="left">媒体元素的字幕信息</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video">video</a></td><td align="left">嵌入视频</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/wbr">wbr</a></td><td align="left">换行机会</td></tr></tbody></table><h3 id="HTML5-Video"><a href="#HTML5-Video" class="headerlink" title="HTML5 Video"></a>HTML5 Video</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    很抱歉，您的浏览器不支持嵌入式视频。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h4 id="↓-预览-1"><a href="#↓-预览-1" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><video controls="" width="100%">    <source src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4" type="video/mp4">    很抱歉，您的浏览器不支持嵌入式视频。</video><h3 id="HTML5-Audio"><a href="#HTML5-Audio" class="headerlink" title="HTML5 Audio"></a>HTML5 Audio</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span></span></span><br><span class="line"><span class="tag">  <span class="attr">controls</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持音频元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h4 id="↓-预览-2"><a href="#↓-预览-2" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><p><audio controls    src="https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3"><br>    您的浏览器不支持音频元素。<br></audio></p><h3 id="HTML5-Ruby"><a href="#HTML5-Ruby" class="headerlink" title="HTML5 Ruby"></a>HTML5 Ruby</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">  汉 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>hàn<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">  字 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>zì<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">  拼 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>pīn<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">  音 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>yīn<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h4 id="↓-预览-3"><a href="#↓-预览-3" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><!--rehype:wrap-style=text-align: center;--><ruby style="font-size: 4rem;">  汉 <rp>(</rp><rt>hàn</rt><rp>)</rp>  字 <rp>(</rp><rt>zì</rt><rp>)</rp>  拼 <rp>(</rp><rt>pīn</rt><rp>)</rp>  音 <rp>(</rp><rt>yīn</rt><rp>)</rp></ruby><h3 id="HTML5-kdi"><a href="#HTML5-kdi" class="headerlink" title="HTML5 kdi"></a>HTML5 kdi</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>User <span class="tag">&lt;<span class="name">bdi</span>&gt;</span>hrefs<span class="tag">&lt;/<span class="name">bdi</span>&gt;</span>: 60 points<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>User <span class="tag">&lt;<span class="name">bdi</span>&gt;</span>jdoe<span class="tag">&lt;/<span class="name">bdi</span>&gt;</span>: 80 points<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>User <span class="tag">&lt;<span class="name">bdi</span>&gt;</span>إيان<span class="tag">&lt;/<span class="name">bdi</span>&gt;</span>: 90 points<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-4"><a href="#↓-预览-4" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><ul> <li>User <bdi>hrefs</bdi>: 60 points</li> <li>User <bdi>jdoe</bdi>: 80 points</li> <li>User <bdi>إيان</bdi>: 90 points</li></ul><h3 id="HTML5-progress"><a href="#HTML5-progress" class="headerlink" title="HTML5 progress"></a>HTML5 progress</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><p><progress value="50" max="100" style="width: 100%"></progress></p><h3 id="HTML5-mark"><a href="#HTML5-mark" class="headerlink" title="HTML5 mark"></a>HTML5 mark</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我爱<span class="tag">&lt;<span class="name">mark</span>&gt;</span>备忘清单<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我爱<mark>备忘清单</mark></p><h2 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML 表格"></a>HTML 表格</h2><h3 id="Table-示例"><a href="#Table-示例" class="headerlink" title="Table 示例"></a>Table 示例</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Roberta<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>39<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Oliver<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML表格标签"><a href="#HTML表格标签" class="headerlink" title="HTML表格标签"></a>HTML表格标签</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">标签</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table">&lt;table&gt;</a></td><td align="left">定义表格</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/th">&lt;th&gt;</a></td><td align="left">定义表格中的标题单元格</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tr">&lt;tr&gt;</a></td><td align="left">定义表中的行</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/td">&lt;td&gt;</a></td><td align="left">定义表格中的单元格</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/caption">&lt;caption&gt;</a></td><td align="left">定义表格标题</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/colgroup">&lt;colgroup&gt;</a></td><td align="left">定义一组列</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/col">&lt;col&gt;</a></td><td align="left">定义表中的列</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/thead">&lt;thead&gt;</a></td><td align="left">对标题内容进行分组</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tbody">&lt;tbody&gt;</a></td><td align="left">将正文内容分组</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/tfoot">&lt;tfoot&gt;</a></td><td align="left">对页脚内容进行分组</td></tr></tbody></table><h3 id="属性"><a href="#属性" class="headerlink" title="&lt;td&gt; 属性"></a>&lt;td&gt; 属性</h3><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>colspan</code></td><td align="left">单元格应跨越的列数</td></tr><tr><td align="left"><code>headers</code></td><td align="left">单元格与一个或多个标题单元格相关</td></tr><tr><td align="left"><code>rowspan</code></td><td align="left">单元格应跨越的行数</td></tr></tbody></table><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/td#attributes">td#属性</a></p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="&lt;th&gt; 属性"></a>&lt;th&gt; 属性</h3><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>colspan</code></td><td align="left">单元格应跨越的列数</td></tr><tr><td align="left"><code>headers</code></td><td align="left">单元格与一个或多个标题单元格相关</td></tr><tr><td align="left"><code>rowspan</code></td><td align="left">单元格应跨越的行数</td></tr><tr><td align="left"><code>abbr</code></td><td align="left">单元格内容的描述</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/th#attr-scope">scope</a></td><td align="left">表头元素(在&lt;th&gt;中定义)关联的单元格</td></tr></tbody></table><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/th#attributes">th#属性</a></p><h2 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I&#x27;m an item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I&#x27;m another item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I&#x27;m another item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul">无序列表元素</a></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I&#x27;m the first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I&#x27;m the second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>I&#x27;m the third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ol">有序列表元素</a></p><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>A Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Definition of a term<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Another Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Definition of another term<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dl">描述列表元素</a></p><h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h2><h3 id="Form-标签"><a href="#Form-标签" class="headerlink" title="Form 标签"></a>Form 标签</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;api/login&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mail&quot;</span>&gt;</span>邮箱: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mail&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mail&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pw&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pw&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ck&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ck&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ck&quot;</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-5"><a href="#↓-预览-5" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form method="POST" action="api/login" style="padding: 20px;">  <label for="email">邮箱: </label>  <input type="email" id="email" name="email" class="border border-slate-400 mt-2">  <br/>  <label for="pwd">密码:</label>  <input type="password" id="pwd" name="pwd" class="border border-slate-400 mt-2">  <br/>  <input type="submit" value="登录" class="mt-2">  <br/>  <input type="checkbox" id="ck" name="ck" class="mt-2">  <label for="ck">记住我</label></form><p>HTML <code>&lt;form&gt;</code> 元素用于收集信息并将其发送到外部源。</p><h3 id="Form-属性"><a href="#Form-属性" class="headerlink" title="Form 属性"></a>Form 属性</h3><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>name</code></td><td align="left">脚本形式的名称</td></tr><tr><td align="left"><code>action</code></td><td align="left">表单脚本的URL</td></tr><tr><td align="left"><code>method</code></td><td align="left">HTTP方法，<code>POST</code>&#x2F;<code>GET</code> <em>(默认)</em></td></tr><tr><td align="left"><code>enctype</code></td><td align="left">介质类型，请参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLFormElement/enctype">enctype</a></td></tr><tr><td align="left"><code>onsubmit</code></td><td align="left">提交表单时运行</td></tr><tr><td align="left"><code>onreset</code></td><td align="left">在窗体重置时运行</td></tr></tbody></table><h3 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label 标签"></a>Label 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌套标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Click me </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &#x27;for&#x27; 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>for</code>在标签中引用输入的<code>id</code>属性</p><h3 id="Input-标签"><a href="#Input-标签" class="headerlink" title="Input 标签"></a>Input 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-6"><a href="#↓-预览-6" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px;">  <label for="username">Username:</label>  <input type="text" name="username" id="username" class="border border-slate-400"></form><p>请参阅：<a href="/html#html-input-tags">HTML输入标记</a></p><h3 id="Textarea-标签"><a href="#Textarea-标签" class="headerlink" title="Textarea 标签"></a>Textarea 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h4 id="↓-预览-7"><a href="#↓-预览-7" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px;">    <textarea rows="2" cols="30" name="address" id="address" class="border border-slate-400"style="width: 100%"></textarea></form><p>Textarea 是一个多行文本输入控件</p><h3 id="Radio-Buttons"><a href="#Radio-Buttons" class="headerlink" title="Radio Buttons"></a>Radio Buttons</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;m&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;m&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;f&quot;</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-8"><a href="#↓-预览-8" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px;">    <input type="radio" name="gender" id="m">    <label for="m">Male</label>    <input type="radio" name="gender" id="f">    <label for="f">Female</label></form><p>单选按钮用于让用户只选择一个</p><h3 id="Checkboxes"><a href="#Checkboxes" class="headerlink" title="Checkboxes"></a>Checkboxes</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s&quot;</span> <span class="attr">id</span>=<span class="string">&quot;soc&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;soc&quot;</span>&gt;</span>Soccer<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bas&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bas&quot;</span>&gt;</span>Baseball<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-9"><a href="#↓-预览-9" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px;">    <input type="checkbox" name="sports" id="soccer">    <label for="soccer">Soccer</label>    <input type="checkbox" name="sports" id="baseball">    <label for="baseball">Baseball</label></form><p>复选框允许用户选择一个或多个</p><h3 id="Select-标签"><a href="#Select-标签" class="headerlink" title="Select 标签"></a>Select 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;city&quot;</span>&gt;</span>City:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Sydney<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Melbourne<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Cromwell<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-10"><a href="#↓-预览-10" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px">  <label for="city">City:</label>  <select name="city" id="city" class="border border-slate-400">      <option value="1">Sydney</option>      <option value="2">Melbourne</option>      <option value="3">Cromwell</option>  </select></form><p>选择框是选项的下拉列表</p><h3 id="Fieldset-标签"><a href="#Fieldset-标签" class="headerlink" title="Fieldset 标签"></a>Fieldset 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Your favorite monster<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kra&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;kraken&quot;</span>&gt;</span>Kraken<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sas&quot;</span> <span class="attr">name</span>=<span class="string">&quot;m&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sas&quot;</span>&gt;</span>Sasquatch<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-11"><a href="#↓-预览-11" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px"><fieldset class="border border-slate-400" style="padding: 20px">  <legend>Your favorite monster</legend>  <input type="radio" id="kra" name="monster">  <label for="kra">Kraken</label><br/>  <input type="radio" id="sas" name="monster">  <label for="sas">Sasquatch</label></fieldset></form><h3 id="数据列表标签（HTML5）"><a href="#数据列表标签（HTML5）" class="headerlink" title="数据列表标签（HTML5）"></a>数据列表标签（HTML5）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;b&quot;</span>&gt;</span>Choose a browser: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">name</span>=<span class="string">&quot;browser&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Microsoft Edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-12"><a href="#↓-预览-12" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form style="padding: 20px">  <label for="myBrowser">Choose a browser:</label>  <input list="browsers" id="myBrowser" name="myBrowser"/>  <datalist id="browsers">    <option value="Chrome">    <option value="Firefox">    <option value="Internet Explorer">    <option value="Opera">    <option value="Safari">    <option value="Microsoft Edge">  </datalist></form><h3 id="提交和重置按钮"><a href="#提交和重置按钮" class="headerlink" title="提交和重置按钮"></a>提交和重置按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="↓-预览-13"><a href="#↓-预览-13" class="headerlink" title="↓ 预览"></a>↓ 预览</h4><form action="register.php" method="post" style="padding: 20px">  <label for="name">Name:</label>  <input type="text" name="name" id="name"">  <input type="submit" value="提交">  <input type="reset" value="重置"></form><p><code>将数据提交到服务器</code> 重置为默认值</p><h2 id="HTML-input-标签"><a href="#HTML-input-标签" class="headerlink" title="HTML input 标签"></a>HTML input 标签</h2><!--rehype:body-class=cols-2--><h3 id="Input-属性"><a href="#Input-属性" class="headerlink" title="Input 属性"></a>Input 属性</h3><!--rehype:wrap-class=row-span-2--><p>输入标记是一个空元素，用于标识要从用户处获取的特定类型的字段信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;?&quot;</span> <span class="attr">value</span>=<span class="string">&quot;?&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;6&quot;</span>  <span class="attr">required</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>type=&quot;…&quot;</code></td><td align="left">正在输入的数据类型</td></tr><tr><td align="left"><code>value=&quot;…&quot;</code></td><td align="left">默认值</td></tr><tr><td align="left"><code>name=&quot;…&quot;</code></td><td align="left">用于在 HTTP 请求中描述此数据</td></tr><tr><td align="left"><code>id=&quot;…&quot;</code></td><td align="left">其他 HTML 元素的唯一标识符</td></tr><tr><td align="left"><code>readonly</code></td><td align="left">停止用户修改</td></tr><tr><td align="left"><code>disabled</code></td><td align="left">停止任何交互</td></tr><tr><td align="left"><code>checked</code></td><td align="left">单选或复选框是否选中</td></tr><tr><td align="left"><code>required</code></td><td align="left">是强制性的，参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/required#example">必填</a></td></tr><tr><td align="left"><code>placeholder=&quot;…&quot;</code></td><td align="left">添加临时，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::placeholder#examples">::placeholder</a></td></tr><tr><td align="left"><code>autocomplete=&quot;off&quot;</code></td><td align="left">禁用自动完成</td></tr><tr><td align="left"><code>autocapitalize=&quot;none&quot;</code></td><td align="left">禁用自动大写</td></tr><tr><td align="left"><code>inputmode=&quot;…&quot;</code></td><td align="left">显示特定键盘，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/inputmode">inputmode</a></td></tr><tr><td align="left"><code>list=&quot;…&quot;</code></td><td align="left">关联的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/datalist">datalist</a>的id</td></tr><tr><td align="left"><code>maxlength=&quot;…&quot;</code></td><td align="left">最大字符数</td></tr><tr><td align="left"><code>minlength=&quot;…&quot;</code></td><td align="left">最小字符数</td></tr><tr><td align="left"><code>min=&quot;…&quot;</code></td><td align="left">范围和编号上的最小数值</td></tr><tr><td align="left"><code>max=&quot;…&quot;</code></td><td align="left">范围和编号上的最大数值</td></tr><tr><td align="left"><code>step=&quot;…&quot;</code></td><td align="left">数字如何在范围和数字中递增</td></tr><tr><td align="left"><code>pattern=&quot;…&quot;</code></td><td align="left">指定一个<a href="./regex.md">正则表达式</a>，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/pattern">pattern</a></td></tr><tr><td align="left"><code>autofocus</code></td><td align="left">集中精力</td></tr><tr><td align="left"><code>spellcheck</code></td><td align="left">执行拼写检查</td></tr><tr><td align="left"><code>multiple</code></td><td align="left">是否允许<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/multiple">多个</a>值</td></tr><tr><td align="left"><code>accept=&quot;&quot;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input/file">file</a> 中需要文件类型上载控件</td></tr></tbody></table><p>请参阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attributes">&lt;input&gt;元素 的属性</a></p><h3 id="Input-类型"><a href="#Input-类型" class="headerlink" title="Input 类型"></a>Input 类型</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>type=&quot;checkbox&quot;</code></td><td><input type="checkbox"></td></tr><tr><td><code>type=&quot;radio&quot;</code></td><td><input type="radio"></td></tr><tr><td><code>type=&quot;file&quot;</code></td><td><input type="file"></td></tr><tr><td><code>type=&quot;hidden&quot;</code></td><td><input type="hidden"></td></tr><tr><td><code>type=&quot;text&quot;</code></td><td><input type="text"></td></tr><tr><td><code>type=&quot;password&quot;</code></td><td><input type="password"></td></tr><tr><td><code>type=&quot;image&quot;</code></td><td><input type="image" src="https://raw.githubusercontent.com/mdn/learning-area/master/html/forms/image-type-example/login.png" width="70"></td></tr><tr><td><code>type=&quot;reset&quot;</code></td><td><input type="reset"></td></tr><tr><td><code>type=&quot;button&quot;</code></td><td><input type="button"></td></tr><tr><td><code>type=&quot;submit&quot;</code></td><td><input type="submit"></td></tr></tbody></table><h4 id="HTML5-中的新输入类型"><a href="#HTML5-中的新输入类型" class="headerlink" title="HTML5 中的新输入类型"></a>HTML5 中的新输入类型</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>type=&quot;color&quot;</code></td><td><input type="color" value="#0FB881"></td></tr><tr><td><code>type=&quot;date&quot;</code></td><td><input type="date"></td></tr><tr><td><code>type=&quot;time&quot;</code></td><td><input type="time"></td></tr><tr><td><code>type=&quot;month&quot;</code></td><td><input type="month"></td></tr><tr><td><code>type=&quot;datetime-local&quot;</code></td><td><input type="datetime-local"></td></tr><tr><td><code>type=&quot;week&quot;</code></td><td><input type="week"></td></tr><tr><td><code>type=&quot;email&quot;</code></td><td><input type="email"></td></tr><tr><td><code>type=&quot;tel&quot;</code></td><td><input type="tel"></td></tr><tr><td><code>type=&quot;url&quot;</code></td><td><input type="url"></td></tr><tr><td><code>type=&quot;number&quot;</code></td><td><input type="number"></td></tr><tr><td><code>type=&quot;search&quot;</code></td><td><input type="search"></td></tr><tr><td><code>type=&quot;range&quot;</code></td><td><input type="range"></td></tr></tbody></table><h3 id="Input-CSS-选择器"><a href="#Input-CSS-选择器" class="headerlink" title="Input CSS 选择器"></a>Input CSS 选择器</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>input:focus</code></td><td>当键盘聚焦时</td></tr></tbody></table><h2 id="HTML-meta-标签"><a href="#HTML-meta-标签" class="headerlink" title="HTML meta 标签"></a>HTML meta 标签</h2><!--rehype:body-class=cols-2--><h3 id="Meta-标签"><a href="#Meta-标签" class="headerlink" title="Meta 标签"></a>Meta 标签</h3><!--rehype:wrap-class=row-span-5--><p>meta 标记描述 HTML 文档中的元数据。它解释了关于 HTML 的其他材料。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>···<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span>  <span class="attr">content</span>=<span class="string">&quot;···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;···&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- url --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span>       <span class="attr">href</span>=<span class="string">&quot;https://···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span>  <span class="attr">content</span>=<span class="string">&quot;https://···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://···&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span>         <span class="attr">content</span>=<span class="string">&quot;网页描述···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span>  <span class="attr">content</span>=<span class="string">&quot;···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;···&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- image --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span>  <span class="attr">content</span>=<span class="string">&quot;https://···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://···&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ua --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- viewport --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=1024&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 重定向 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=http://example.com/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网站生成工具&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;token值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用-Meta"><a href="#常用-Meta" class="headerlink" title="常用 Meta"></a>常用 Meta</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页描述···&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词1,关键词2,关键词3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;作者名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用-Meta-1"><a href="#常用-Meta-1" class="headerlink" title="常用 Meta"></a>常用 Meta</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.png&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.jpg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/jpeg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Open-Graph"><a href="#Open-Graph" class="headerlink" title="Open Graph"></a>Open Graph</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;website&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:locale&quot;</span> <span class="attr">content</span>=<span class="string">&quot;en_CA&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML cheatsheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://jaywcjlove.github.io/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://xxx.com/image.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:site_name&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Name of your website&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Description of this page&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Facebook、Instagram、Pinterest、LinkedIn 等使用。</p><h3 id="Twitter-卡片"><a href="#Twitter-卡片" class="headerlink" title="Twitter 卡片"></a>Twitter 卡片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:card&quot;</span> <span class="attr">content</span>=<span class="string">&quot;summary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:site&quot;</span> <span class="attr">content</span>=<span class="string">&quot;@QuickRef_ME&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML cheatsheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://jaywcjlove.github.io/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Description of this page&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;twitter:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://xxx.com/image.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary">Twitter 卡片文档</a></p><h3 id="Geotagging"><a href="#Geotagging" class="headerlink" title="Geotagging"></a>Geotagging</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;ICBM&quot;</span> <span class="attr">content</span>=<span class="string">&quot;45.416667,-75.7&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;geo.position&quot;</span> <span class="attr">content</span>=<span class="string">&quot;45.416667;-75.7&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;geo.region&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ca-on&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;geo.placename&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Ottawa&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://en.wikipedia.org/wiki/Geotagging#HTML_pages">Geotagging</a></p><h2 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h2><h3 id="复杂布局"><a href="#复杂布局" class="headerlink" title="复杂布局"></a>复杂布局</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ &lt;header&gt;                                ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ &lt;nav&gt;                                   ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ &lt;section&gt;                               ┆</span><br><span class="line">┆╭┈┈┈┈┈┈┈┈╮╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮┆</span><br><span class="line">┆┆&lt;aside&gt; ┆┆ &lt;main&gt;                      ┆┆</span><br><span class="line">┆┆        ┆┆╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ ╭┈┈┈┈┈┈┈┈┈╮┆┆</span><br><span class="line">┆┆        ┆┆┆  &lt;article&gt;    ┆ ┆ &lt;aside&gt; ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ┆ &lt;header&gt;  ┆ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ┆ &lt;article&gt; ┆ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ┆ &lt;footer&gt;  ┆ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯ ┆ ┆         ┆┆┆</span><br><span class="line">┆┆        ┆┆╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ╰┈┈┈┈┈┈┈┈┈╯┆┆</span><br><span class="line">┆╰┈┈┈┈┈┈┈┈╯╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆ &lt;footer&gt;                                ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><h3 id="复杂布局-1"><a href="#复杂布局-1" class="headerlink" title="复杂布局"></a>复杂布局</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆  &lt;header&gt;                           ┆</span><br><span class="line">┆  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ┆</span><br><span class="line">┆  ┆  &lt;nav&gt;                        ┆  ┆</span><br><span class="line">┆  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ </span><br><span class="line">┆  &lt;main&gt;                             ┆ </span><br><span class="line">┆ ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ ╭┈┈┈┈┈┈┈┈┈┈┈╮  ┆ </span><br><span class="line">┆ ┆  &lt;article&gt;       ┆ ┆  &lt;aside&gt;  ┆  ┆ </span><br><span class="line">┆ ┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ┆ &lt;header&gt;  ┆    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ┆ &lt;section&gt; ┆    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ┆ &lt;footer&gt;  ┆    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯    ┆ ┆           ┆  ┆ </span><br><span class="line">┆ ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ╰┈┈┈┈┈┈┈┈┈┈┈╯  ┆ </span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ </span><br><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆  &lt;footer&gt;                           ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><h3 id="区域语义化"><a href="#区域语义化" class="headerlink" title="区域语义化"></a>区域语义化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ ╭┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆  &lt;main&gt;          ┆ ┆  &lt;aside&gt;  ┆</span><br><span class="line">┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮    ┆ ┆           ┆</span><br><span class="line">┆ ┆ &lt;header&gt;  ┆    ┆ ┆           ┆</span><br><span class="line">┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯    ┆ ┆           ┆</span><br><span class="line">┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮    ┆ ┆           ┆</span><br><span class="line">┆ ┆ &lt;section&gt; ┆    ┆ ┆           ┆</span><br><span class="line">┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯    ┆ ┆           ┆</span><br><span class="line">┆ ╭┈┈┈┈┈┈┈┈┈┈┈╮    ┆ ┆           ┆</span><br><span class="line">┆ ┆ &lt;footer&gt;  ┆    ┆ ┆           ┆</span><br><span class="line">┆ ╰┈┈┈┈┈┈┈┈┈┈┈╯    ┆ ┆           ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ╰┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><h3 id="页面头语义化"><a href="#页面头语义化" class="headerlink" title="页面头语义化"></a>页面头语义化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮</span><br><span class="line">┆  &lt;header&gt;                           ┆</span><br><span class="line">┆  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ┆</span><br><span class="line">┆  ┆  &lt;section&gt;                    ┆  ┆</span><br><span class="line">┆  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ┆</span><br><span class="line">┆  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮ ╭┈┈┈┈┈┈┈┈┈╮  ┆</span><br><span class="line">┆  ┆  &lt;nav&gt;            ┆ ┆ &lt;aside&gt; ┆  ┆</span><br><span class="line">┆  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ╰┈┈┈┈┈┈┈┈┈╯  ┆</span><br><span class="line">┆  ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮  ┆</span><br><span class="line">┆  ┆  &lt;footer&gt;                     ┆  ┆</span><br><span class="line">┆  ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯  ┆</span><br><span class="line">╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯</span><br></pre></td></tr></table></figure><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://www.w3.org/TR/REC-html40/cover.html#minitoc">HTML 4.01 Specification</a> <em>(w3.org)</em></li><li><a href="https://wangchujiang.com/html-tutorial/">HTML Tutorial</a> <em>(jaywcjlove.github.io)</em></li><li><a href="./emmet.md">Emmet 备忘清单，提升 HTML 和 CSS 代码编写的工具包</a> <em>(jaywcjlove.github.io)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML-备忘清单&quot;&gt;&lt;a href=&quot;#HTML-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;HTML 备忘清单&quot;&gt;&lt;/a&gt;HTML 备忘清单&lt;/h1&gt;&lt;p&gt;此 HTML 快速参考备忘单以可读布局列出了常见的 &lt;code&gt;HTML&lt;/code</summary>
      
    
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="HTML" scheme="https://tdcqcx.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/javascript/"/>
    <id>https://tdcqcx.github.io/2025/01/08/javascript/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-备忘清单"><a href="#JavaScript-备忘清单" class="headerlink" title="JavaScript 备忘清单"></a>JavaScript 备忘清单</h1><p>包含最重要概念、函数、方法等的 JavaScript 备忘单。 初学者的完整快速参考。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JavaScript 是一种轻量级的解释型编程语言。</p><ul><li><a href="json.md">JSON 备忘清单</a></li><li><a href="./regex.md#javascript-%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">JavaScript 中的正则表达式</a></li><li><a href="./typescript.md">TypeScript 备忘清单</a></li></ul><h3 id="打印调试"><a href="#打印调试" class="headerlink" title="打印调试"></a>打印调试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; Hello world!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello world!&#x27;</span>);</span><br><span class="line"><span class="comment">// =&gt; Hello QuickReference</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;hello %s&#x27;</span>, <span class="string">&#x27;QuickReference&#x27;</span>);</span><br><span class="line"><span class="comment">// 将错误消息打印到 stderr</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Oops!&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">potentiallyBuggyCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">  <span class="comment">// 做可能有问题的东西来检查，逐步通过等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>debugger</strong> 语句调用任何可用的调试功能。</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> amount = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> price = <span class="number">4.99</span>;</span><br><span class="line"><span class="keyword">let</span> home = <span class="number">1e2</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1_000_000</span>; <span class="comment">// 位数过多可以用 _ 分割</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="number">0644</span>;   <span class="comment">// 八进制数字 420</span></span><br></pre></td></tr></table></figure><h3 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// =&gt; undefined</span></span><br><span class="line">count = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure><h3 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberOfColumns = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant...</span></span><br><span class="line">numberOfColumns = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Tammy&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// =&gt; Tammy, false, null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, found, x);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> single = <span class="string">&#x27;Wheres my bandit hat?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> double = <span class="string">&quot;Wheres my bandit hat?&quot;</span>;</span><br><span class="line"><span class="comment">// =&gt; 21</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(single.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="number">5</span> = <span class="number">10</span>     <span class="comment">// 加法 Addition</span></span><br><span class="line"><span class="number">10</span> - <span class="number">5</span> = <span class="number">5</span>     <span class="comment">// 减法 Subtraction</span></span><br><span class="line"><span class="number">5</span> * <span class="number">10</span> = <span class="number">50</span>    <span class="comment">// 乘法 Multiplication</span></span><br><span class="line"><span class="number">10</span> / <span class="number">5</span> = <span class="number">2</span>     <span class="comment">// 除法 Division</span></span><br><span class="line"><span class="number">10</span> % <span class="number">5</span> = <span class="number">0</span>     <span class="comment">// 取模 Modulo</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此行将表示注释</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">多行配置</span></span><br><span class="line"><span class="comment">部署前必须更改</span></span><br><span class="line"><span class="comment">以下配置。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 两个语句都会加 10</span></span><br><span class="line">number = number + <span class="number">10</span>;</span><br><span class="line">number += <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number); </span><br><span class="line"><span class="comment">// =&gt; 120</span></span><br></pre></td></tr></table></figure><h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line"><span class="string">&#x27;Tommy is &#x27;</span> + age + <span class="string">&#x27; years old.&#x27;</span>;</span><br><span class="line"><span class="comment">// 字符串插值</span></span><br><span class="line"><span class="string">`Tommy is <span class="subst">$&#123;age&#125;</span> years old.`</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> esc = <span class="string">&#x27;I don\&#x27;t \n know&#x27;</span>;    <span class="comment">// \n 换行</span></span><br><span class="line"><span class="keyword">var</span> len = abc.<span class="property">length</span>;            <span class="comment">// 字符串长度</span></span><br><span class="line">abc.<span class="title function_">indexOf</span>(<span class="string">&quot;lmno&quot;</span>);             <span class="comment">// 查找子字符串，如果不包含则 -1</span></span><br><span class="line">abc.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;lmno&quot;</span>);         <span class="comment">// 最后一次出现</span></span><br><span class="line">abc.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">6</span>);                 <span class="comment">// 去掉“def”，负值从后面计算</span></span><br><span class="line">abc.<span class="title function_">replace</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;123&quot;</span>);        <span class="comment">// 查找和替换，接受正则表达式</span></span><br><span class="line">abc.<span class="title function_">toUpperCase</span>();               <span class="comment">// 转换为大写</span></span><br><span class="line">abc.<span class="title function_">toLowerCase</span>();               <span class="comment">// 转换为小写</span></span><br><span class="line">abc.<span class="title function_">concat</span>(<span class="string">&quot; &quot;</span>, str2);           <span class="comment">// abc + &quot; &quot; + str2</span></span><br><span class="line">abc.<span class="title function_">charAt</span>(<span class="number">2</span>);                   <span class="comment">// 索引处的字符：“c”</span></span><br><span class="line">abc[<span class="number">2</span>];                          <span class="comment">// 不安全，abc[2] = &quot;C&quot; 不起作用</span></span><br><span class="line"><span class="comment">// 索引处的字符代码：“c”-&gt; 99</span></span><br><span class="line">abc.<span class="title function_">charCodeAt</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 用逗号分割字符串给出一个数组</span></span><br><span class="line">abc.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// 分割字符</span></span><br><span class="line">abc.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 匹配开头字符串,如果忽略第二个参数，则从索引 0 开始匹配</span></span><br><span class="line">abc.<span class="title function_">startsWith</span>(<span class="string">&quot;bc&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 匹配结尾的字符串,如果忽略第二个参数，则默认是原字符串长度</span></span><br><span class="line">abc.<span class="title function_">endsWith</span>(<span class="string">&quot;wxy&quot;</span>, abc.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// padEnd 和 padStart 都用于填充长度，默认填充对象是空格</span></span><br><span class="line"><span class="string">&quot;200&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>); <span class="comment">// &quot;200  &quot;</span></span><br><span class="line"><span class="string">&quot;200&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;.&quot;</span>); <span class="comment">// &quot;200..&quot;</span></span><br><span class="line"><span class="comment">// 重复字符</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>); <span class="comment">// &quot;abcabc&quot;</span></span><br><span class="line"><span class="comment">// trim、trimEnd 和 trimStart 用于去除首尾空格</span></span><br><span class="line"><span class="string">&quot; ab c &quot;</span>.<span class="title function_">trim</span>(); <span class="comment">// &quot;ab c&quot;</span></span><br><span class="line"><span class="comment">// 数字转为十六进制 (16)、八进制 (8) 或二进制 (2)</span></span><br><span class="line">(<span class="number">128</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><h3 id="数字-1"><a href="#数字-1" class="headerlink" title="数字"></a>数字</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pi = <span class="number">3.141</span>;</span><br><span class="line">pi.<span class="title function_">toFixed</span>(<span class="number">0</span>);    <span class="comment">// 返回 3             </span></span><br><span class="line">pi.<span class="title function_">toFixed</span>(<span class="number">2</span>);    <span class="comment">// 返回 3.14 - 使用金钱</span></span><br><span class="line">pi.<span class="title function_">toPrecision</span>(<span class="number">2</span>) <span class="comment">// 返回 3.1</span></span><br><span class="line">pi.<span class="title function_">valueOf</span>();     <span class="comment">// 返回号码</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>);     <span class="comment">// 转换为数字</span></span><br><span class="line"><span class="comment">// 自 1970 年以来的毫秒数</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())          </span><br><span class="line"><span class="comment">// 返回第一个数字：3</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;3 months&quot;</span>);       </span><br><span class="line"><span class="comment">// 返回 3.5</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;3.5 days&quot;</span>);     </span><br><span class="line"><span class="comment">// 最大可能的 JS 数</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>            </span><br><span class="line"><span class="comment">// 最小可能的 JS 编号</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>            </span><br><span class="line"><span class="comment">// -无穷</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>    </span><br><span class="line"><span class="comment">// 无穷</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>    </span><br></pre></td></tr></table></figure><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="title class_">Math</span>.<span class="property">PI</span>; <span class="comment">// 3.141592653589793</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.4</span>); <span class="comment">// = 4 - 数字四舍五入</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.5</span>); <span class="comment">// = 5</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">8</span>);   <span class="comment">// = 256 - 2 的 8 次方    </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">49</span>);   <span class="comment">// = 7 - 平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">3.14</span>); <span class="comment">// = 3.14 - 绝对，正值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">3.14</span>); <span class="comment">// = 4 - 返回 &gt;= 最小整数</span></span><br><span class="line"><span class="comment">// = 3 - 返回 &lt;= 最大整数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">3.99</span>);       </span><br><span class="line"><span class="comment">// = 0 - 正弦</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="number">0</span>);            </span><br><span class="line"><span class="comment">// OTHERS: tan,atan,asin,acos,余弦值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);      </span><br><span class="line"><span class="comment">// = -2 - 最低值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>, <span class="number">3</span>, -<span class="number">2</span>, <span class="number">2</span>);  </span><br><span class="line"><span class="comment">// = 3 - 最高值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="number">3</span>, -<span class="number">2</span>, <span class="number">2</span>);  </span><br><span class="line"><span class="comment">// = 0 自然对数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">log</span>(<span class="number">1</span>);            </span><br><span class="line"><span class="comment">// = 2.7182pow(E,x) 自然对数的底数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">exp</span>(<span class="number">1</span>);            </span><br><span class="line"><span class="comment">// 0 到 1 之间的随机数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>();          </span><br><span class="line"><span class="comment">// 随机整数，从 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5</span>) + <span class="number">1</span>;  </span><br></pre></td></tr></table></figure><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 像脚本代码一样执行字符串</span></span><br><span class="line"><span class="built_in">eval</span>();                     </span><br><span class="line"><span class="comment">// 从数字返回字符串</span></span><br><span class="line"><span class="title class_">String</span>(<span class="number">23</span>);                 </span><br><span class="line"><span class="comment">// 从数字返回字符串</span></span><br><span class="line">(<span class="number">23</span>).<span class="title function_">toString</span>();            </span><br><span class="line"><span class="comment">// 从字符串返回数字</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;23&quot;</span>);               </span><br><span class="line"><span class="comment">// 解码 URI。 结果：“my page.asp”</span></span><br><span class="line"><span class="built_in">decodeURI</span>(enc);             </span><br><span class="line"><span class="comment">// 编码 URI。 结果：“my%20page.asp”</span></span><br><span class="line"><span class="built_in">encodeURI</span>(uri);             </span><br><span class="line"><span class="comment">// 解码 URI 组件</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(enc);    </span><br><span class="line"><span class="comment">// 对 URI 组件进行编码</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(uri);    </span><br><span class="line"><span class="comment">// 是一个有限的合法数</span></span><br><span class="line"><span class="built_in">isFinite</span>();                 </span><br><span class="line"><span class="comment">// 是一个非法数字</span></span><br><span class="line"><span class="built_in">isNaN</span>();                    </span><br><span class="line"><span class="comment">// 返回字符串的浮点数</span></span><br><span class="line"><span class="built_in">parseFloat</span>();               </span><br><span class="line"><span class="comment">// 解析一个字符串并返回一个整数</span></span><br><span class="line"><span class="built_in">parseInt</span>();                 </span><br></pre></td></tr></table></figure><h2 id="JavaScript-条件"><a href="#JavaScript-条件" class="headerlink" title="JavaScript 条件"></a>JavaScript 条件</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><!--rehype:wrap-class=row-span-3--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> || <span class="literal">false</span>;       <span class="comment">// true</span></span><br><span class="line"><span class="number">10</span> &gt; <span class="number">5</span> || <span class="number">10</span> &gt; <span class="number">20</span>;   <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">false</span>;      <span class="comment">// false</span></span><br><span class="line"><span class="number">10</span> &gt; <span class="number">100</span> || <span class="number">10</span> &gt; <span class="number">20</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符 &amp;&amp;"></a>逻辑运算符 &amp;&amp;</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span>;        <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">2</span> &amp;&amp; <span class="number">2</span> &gt; <span class="number">1</span>;      <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;       <span class="comment">// false</span></span><br><span class="line"><span class="number">4</span> === <span class="number">4</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">1</span>;    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &gt; <span class="number">3</span>                 <span class="comment">// false</span></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">1</span>                 <span class="comment">// true</span></span><br><span class="line"><span class="number">250</span> &gt;= <span class="number">250</span>            <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> === <span class="number">1</span>               <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> === <span class="number">2</span>               <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>             <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符-1"><a href="#逻辑运算符-1" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lateToWork = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> oppositeValue = !lateToWork;</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oppositeValue); </span><br></pre></td></tr></table></figure><h4 id="空值合并运算符"><a href="#空值合并运算符" class="headerlink" title="空值合并运算符 ??"></a>空值合并运算符 ??</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> ?? <span class="string">&#x27;I win&#x27;</span>;         <span class="comment">//  &#x27;I win&#x27;</span></span><br><span class="line"><span class="literal">undefined</span> ?? <span class="string">&#x27;Me too&#x27;</span>;   <span class="comment">//  &#x27;Me too&#x27;</span></span><br><span class="line"><span class="literal">false</span> ?? <span class="string">&#x27;I lose&#x27;</span>        <span class="comment">//  false</span></span><br><span class="line"><span class="number">0</span> ?? <span class="string">&#x27;I lose again&#x27;</span>      <span class="comment">//  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> ?? <span class="string">&#x27;Damn it&#x27;</span>          <span class="comment">//  &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="if-Statement-if-语句"><a href="#if-Statement-if-语句" class="headerlink" title="if Statement (if 语句)"></a>if Statement (if 语句)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isMailSent = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (isMailSent) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mail sent to recipient&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ternary-Operator-三元运算符"><a href="#Ternary-Operator-三元运算符" class="headerlink" title="Ternary Operator (三元运算符)"></a>Ternary Operator (三元运算符)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="keyword">var</span> status = (age &gt;= <span class="number">18</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="else-if"><a href="#else-if" class="headerlink" title="else if"></a>else if</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> size = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">20</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Medium&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (size &gt; <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Small&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Tiny&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Print: Small</span></span><br></pre></td></tr></table></figure><h3 id="vs"><a href="#vs" class="headerlink" title="&#x3D;&#x3D; vs &#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D; vs &#x3D;&#x3D;&#x3D;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="literal">false</span>     <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === <span class="literal">false</span>    <span class="comment">// false, 不同类型</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&quot;1&quot;</span>       <span class="comment">// true,  自动类型转换</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&quot;1&quot;</span>      <span class="comment">// false, 不同类型</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span> == <span class="literal">false</span>       <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span> === <span class="literal">false</span>      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>==</code> 只检查值，<code>===</code> 检查值和类型。</p><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = <span class="string">&#x27;salad&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (food) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;oyster&#x27;</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;海的味道&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;pizza&#x27;</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;美味的馅饼&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请您用餐&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-多-case-单一操作"><a href="#switch-多-case-单一操作" class="headerlink" title="switch 多 case - 单一操作"></a>switch 多 case - 单一操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = <span class="string">&#x27;salad&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (food) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;oyster&#x27;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;pizza&#x27;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;美味的馅饼&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请您用餐&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-Functions-函数"><a href="#JavaScript-Functions-函数" class="headerlink" title="JavaScript Functions 函数"></a>JavaScript Functions 函数</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数：</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">6</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rocketToMars</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;BOOM!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">const</span> rocketToMars = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;BOOM!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数-ES6"><a href="#箭头函数-ES6" class="headerlink" title="箭头函数 (ES6)"></a>箭头函数 (ES6)</h3><!--rehype:wrap-class=row-span-3--><h4 id="有两个参数"><a href="#有两个参数" class="headerlink" title="有两个参数"></a>有两个参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">param1, param2</span>) =&gt; &#123; </span><br><span class="line">  <span class="keyword">return</span> param1 + param2; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">2</span>,<span class="number">5</span>)); <span class="comment">// =&gt; 7 </span></span><br></pre></td></tr></table></figure><h4 id="没有参数"><a href="#没有参数" class="headerlink" title="没有参数"></a>没有参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">printHello</span> = (<span class="params"></span>) =&gt; &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>); </span><br><span class="line">&#125;; </span><br><span class="line"><span class="title function_">printHello</span>(); <span class="comment">// =&gt; hello</span></span><br></pre></td></tr></table></figure><h4 id="只有一个参数"><a href="#只有一个参数" class="headerlink" title="只有一个参数"></a>只有一个参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">checkWeight</span> = weight =&gt; &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Weight : <span class="subst">$&#123;weight&#125;</span>`</span>); </span><br><span class="line">&#125;; </span><br><span class="line"><span class="title function_">checkWeight</span>(<span class="number">25</span>); <span class="comment">// =&gt; Weight : 25 </span></span><br></pre></td></tr></table></figure><h4 id="简洁箭头函数"><a href="#简洁箭头函数" class="headerlink" title="简洁箭头函数"></a>简洁箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b; </span><br><span class="line"><span class="comment">// =&gt; 60 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">30</span>)); </span><br></pre></td></tr></table></figure><p>从 ES2015 开始提供<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a></p><h3 id="返回关键字"><a href="#返回关键字" class="headerlink" title="返回关键字"></a>返回关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有 return</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该函数不输出总和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名函数并立即执行一次</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;)(<span class="number">2</span>,<span class="number">4</span>)<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Woof!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是 name</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-范围"><a href="#JavaScript-范围" class="headerlink" title="JavaScript 范围"></a>JavaScript 范围</h2><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> pizzaName = <span class="string">&quot;Margarita&quot;</span>;</span><br><span class="line">  <span class="comment">// 这里的代码可以使用 PizzaName</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ❌ PizzaName 不能在这里使用</span></span><br></pre></td></tr></table></figure><p><code>&#123; &#125;</code> 块内声明的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ❌ x 不能在这里使用</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ✅ x 能在这里使用</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;       <span class="comment">// Global scope</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;       <span class="comment">// Global scope</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="number">2</span>;       <span class="comment">// Global scope</span></span><br></pre></td></tr></table></figure><p>ES6 引入了两个重要的新 JavaScript 关键字：let 和 const。这两个关键字在 JavaScript 中提供了块作用域。</p><h3 id="块作用域变量"><a href="#块作用域变量" class="headerlink" title="块作用域变量"></a>块作用域变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoggedIn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (isLoggedIn == <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> statusMessage = <span class="string">&#x27;Logged in.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError...</span></span><br><span class="line"><span class="comment">// 未捕获的引用错误...</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(statusMessage);</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局声明的变量</span></span><br><span class="line"><span class="keyword">const</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printColor</span>(); <span class="comment">// =&gt; blue</span></span><br></pre></td></tr></table></figure><h3 id="let-vs-var"><a href="#let-vs-var" class="headerlink" title="let vs var"></a><code>let</code> vs <code>var</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 这是“let”的最大范围</span></span><br><span class="line">  <span class="comment">// i 可以访问 ✔️</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 不能访问 ❌</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// i 可以访问 ✔️</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 可以访问 ✔️</span></span><br></pre></td></tr></table></figure><p><code>var</code> 的范围是最近的函数块，而 <code>let</code> 的范围是最近的封闭块。</p><h3 id="带闭包的循环"><a href="#带闭包的循环" class="headerlink" title="带闭包的循环"></a>带闭包的循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印三次，不是我们的意思。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按预期打印 0、1 和 2。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123; </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(j), <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量使用 <code>let</code> 有自己的副本，变量有使用 <code>var</code> 的共享副本。</p><h2 id="JavaScript-Arrays"><a href="#JavaScript-Arrays" class="headerlink" title="JavaScript Arrays"></a>JavaScript Arrays</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><!--rehype:wrap-class=row-span-6--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>Array.from()</code></td><td align="left">类似数组对象创建一个新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">#</a></td></tr><tr><td align="left"><code>Array.isArray()</code></td><td align="left">值是否是一个 Array <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">#</a></td></tr><tr><td align="left"><code>Array.of()</code></td><td align="left">创建一个新数组示例 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of">#</a></td></tr><tr><td align="left"><code>.at()</code></td><td align="left">返回值索引对应的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/at">#</a></td></tr><tr><td align="left"><code>.concat()</code></td><td align="left">合并两个或多个数组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">#</a></td></tr><tr><td align="left"><code>.copyWithin()</code></td><td align="left">浅复制替换某个位置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">#</a></td></tr><tr><td align="left"><code>.entries()</code></td><td align="left">新的 Array Iterator 对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries">#</a></td></tr><tr><td align="left"><code>.every()</code></td><td align="left">是否能通过回调函数的测试 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every">#</a></td></tr><tr><td align="left"><code>.fill()</code></td><td align="left">固定值填充一个数组中 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">#</a></td></tr><tr><td align="left"><code>.filter()</code></td><td align="left">返回过滤后的数组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">#</a></td></tr><tr><td align="left"><code>.find()</code></td><td align="left">第一个元素的值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">#</a></td></tr><tr><td align="left"><code>.findIndex()</code></td><td align="left">第一个元素的索引 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">#</a></td></tr><tr><td align="left"><code>.findLast()</code></td><td align="left">最后一个元素的值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast">#</a></td></tr><tr><td align="left"><code>.findLastIndex()</code></td><td align="left">最后一个元素的索引 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex">#</a></td></tr><tr><td align="left"><code>.flat()</code></td><td align="left">扁平化嵌套数组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">#</a></td></tr><tr><td align="left"><code>.flatMap()</code></td><td align="left">与 flat 相同 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">#</a></td></tr><tr><td align="left"><code>.forEach()</code></td><td align="left">升序循环执行 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">#</a></td></tr><tr><td align="left"><code>.includes()</code></td><td align="left">是否包含一个指定的值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">#</a></td></tr><tr><td align="left"><code>.indexOf()</code></td><td align="left">找到给定元素的第一个索引 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">#</a></td></tr><tr><td align="left"><code>.join()</code></td><td align="left">数组链接成一个字符串 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">#</a></td></tr><tr><td align="left"><code>.keys()</code></td><td align="left">每个索引键 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys">#</a></td></tr><tr><td align="left"><code>.lastIndexOf()</code></td><td align="left">给定元素的最后一个索引 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">#</a></td></tr><tr><td align="left"><code>.map()</code></td><td align="left">循环返回一个新数组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">#</a></td></tr><tr><td align="left"><code>.pop()</code></td><td align="left"><code>删除</code>最后一个元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">#</a></td></tr><tr><td align="left"><code>.push()</code></td><td align="left">元素<code>添加</code>到数组的末尾 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">#</a></td></tr><tr><td align="left"><code>.reduce()</code></td><td align="left">循环函数传递当前和上一个值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">#</a></td></tr><tr><td align="left"><code>.reduceRight()</code></td><td align="left">类似 <code>reduce</code> 从右往左循环 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight">#</a></td></tr><tr><td align="left"><code>.reverse()</code></td><td align="left">数组元素的位置颠倒 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">#</a></td></tr><tr><td align="left"><code>.shift()</code></td><td align="left"><code>删除</code>第一个元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">#</a></td></tr><tr><td align="left"><code>.slice()</code></td><td align="left"><code>提取</code>元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">#</a></td></tr><tr><td align="left"><code>.some()</code></td><td align="left">至少有一个通过测试函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some">#</a></td></tr><tr><td align="left"><code>.sort()</code></td><td align="left">元素进行排序 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">#</a></td></tr><tr><td align="left"><code>.splice()</code></td><td align="left"><code>删除</code>或<code>替换</code>或<code>添加</code>元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">#</a></td></tr><tr><td align="left"><code>.toLocaleString()</code></td><td align="left">字符串表示数组中的元素 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString">#</a></td></tr><tr><td align="left"><code>.toString()</code></td><td align="left">返回字符串 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString">#</a></td></tr><tr><td align="left"><code>.unshift()</code></td><td align="left">元素<code>添加</code>到数组的<code>开头</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">#</a></td></tr><tr><td align="left"><code>.values()</code></td><td align="left">返回新的 ArrayIterator 对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values">#</a></td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;dew&quot;</span>, <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="comment">// 不同的数据类型</span></span><br><span class="line"><span class="keyword">const</span> data = [<span class="number">1</span>, <span class="string">&#x27;chicken&#x27;</span>, <span class="literal">false</span>];</span><br></pre></td></tr></table></figure><h3 id="属性-length"><a href="#属性-length" class="headerlink" title="属性 .length"></a>属性 .length</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">numbers.<span class="property">length</span> <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问数组元素</span></span><br><span class="line"><span class="keyword">const</span> myArray = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArray[<span class="number">0</span>]); <span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArray[<span class="number">1</span>]); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><h3 id="可变图表"><a href="#可变图表" class="headerlink" title="可变图表"></a>可变图表</h3><table><thead><tr><th align="left"></th><th align="center">添加</th><th align="center">删除</th><th align="center">开始</th><th align="center">结束</th></tr></thead><tbody><tr><td align="left"><code>push</code></td><td align="center">✅</td><td align="center"></td><td align="center"></td><td align="center">✅</td></tr><tr><td align="left"><code>pop</code></td><td align="center"></td><td align="center">✅</td><td align="center"></td><td align="center">✅</td></tr><tr><td align="left"><code>unshift</code></td><td align="center">✅</td><td align="center"></td><td align="center">✅</td><td align="center"></td></tr><tr><td align="left"><code>shift</code></td><td align="center"></td><td align="center">✅</td><td align="center">✅</td><td align="center"></td></tr></tbody></table><!--rehype:className=show-header--><h3 id="方法-push"><a href="#方法-push" class="headerlink" title="方法 .push()"></a>方法 .push()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加单个元素：</span></span><br><span class="line"><span class="keyword">const</span> cart = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line">cart.<span class="title function_">push</span>(<span class="string">&#x27;pear&#x27;</span>); </span><br><span class="line"><span class="comment">// 添加多个元素：</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">numbers.<span class="title function_">push</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>将项目<strong>添加到末尾</strong>并返回新的数组长度。</p><h3 id="方法-pop"><a href="#方法-pop" class="headerlink" title="方法 .pop()"></a>方法 .pop()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;dew&quot;</span>, <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fruit = fruits.<span class="title function_">pop</span>(); <span class="comment">// &#x27;banana&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [&quot;apple&quot;, &quot;dew&quot;]</span></span><br></pre></td></tr></table></figure><p>从<strong>末尾删除</strong>一个项目并返回已删除的项目。</p><h3 id="方法-shift"><a href="#方法-shift" class="headerlink" title="方法 .shift()"></a>方法 .shift()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> firstElement = array1.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1); <span class="comment">// 输出: Array [2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstElement); <span class="comment">// 输出: 1</span></span><br></pre></td></tr></table></figure><p><strong>从头删除</strong>一个项目并返回已删除的项目。</p><h3 id="方法-some"><a href="#方法-some" class="headerlink" title="方法 .some()"></a>方法 .some()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 检查元素是否为偶数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">even</span> = (<span class="params">element</span>) =&gt; element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">some</span>(even));</span><br><span class="line"><span class="comment">// 预期输出: true</span></span><br></pre></td></tr></table></figure><h3 id="方法-concat"><a href="#方法-concat" class="headerlink" title="方法 .concat()"></a>方法 .concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> newFirstNumber = <span class="number">4</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// =&gt; [ 4, 3, 2, 1 ]</span></span><br><span class="line">[newFirstNumber].<span class="title function_">concat</span>(numbers)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// =&gt; [ 3, 2, 1, 4 ]</span></span><br><span class="line">numbers.<span class="title function_">concat</span>(newFirstNumber)</span><br></pre></td></tr></table></figure><p>如果你想避免改变你的原始数组，你可以使用 concat。</p><h3 id="方法-splice"><a href="#方法-splice" class="headerlink" title="方法 .splice()"></a>方法 .splice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>];</span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// 在索引 1 处插入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// 预期输出: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;]</span></span><br><span class="line"></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// 替换索引 2 处的 1 个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months);</span><br><span class="line"><span class="comment">// 预期输出: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="方法-unshift"><a href="#方法-unshift" class="headerlink" title="方法 .unshift()"></a>方法 .unshift()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cats = [<span class="string">&#x27;Bob&#x27;</span>];</span><br><span class="line"><span class="comment">// =&gt; [&#x27;Willy&#x27;, &#x27;Bob&#x27;]</span></span><br><span class="line">cats.<span class="title function_">unshift</span>(<span class="string">&#x27;Willy&#x27;</span>);</span><br><span class="line"><span class="comment">// =&gt; [&#x27;Puff&#x27;, &#x27;George&#x27;, &#x27;Willy&#x27;, &#x27;Bob&#x27;]</span></span><br><span class="line">cats.<span class="title function_">unshift</span>(<span class="string">&#x27;Puff&#x27;</span>, <span class="string">&#x27;George&#x27;</span>);</span><br></pre></td></tr></table></figure><p>将项目<strong>添加到开头</strong>并返回新的数组长度。</p><h3 id="方法-filter"><a href="#方法-filter" class="headerlink" title="方法 .filter()"></a>方法 .filter()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;golang&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>  word.<span class="property">length</span> &gt; <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 预期输出: Array [&quot;java&quot;, &quot;golang&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-循环"><a href="#JavaScript-循环" class="headerlink" title="JavaScript 循环"></a>JavaScript 循环</h2><h3 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// 要执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;        </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向循环"><a href="#反向循环" class="headerlink" title="反向循环"></a>反向循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;dew&quot;</span>, <span class="string">&quot;berry&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = fruits.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>. <span class="subst">$&#123;fruits[i]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 2. berry</span></span><br><span class="line"><span class="comment">// =&gt; 1. dew</span></span><br><span class="line"><span class="comment">// =&gt; 0. apple</span></span><br></pre></td></tr></table></figure><h3 id="Do…While-语句"><a href="#Do…While-语句" class="headerlink" title="Do…While 语句"></a>Do…While 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  x = x + i;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">// =&gt; 0 1 3 6 10</span></span><br></pre></td></tr></table></figure><h3 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// =&gt; 0, 1, 2, 3</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 数组中的每一项</span></span><br></pre></td></tr></table></figure><h3 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 0 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h3 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  text += <span class="string">&quot;The number is &quot;</span> + i + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>-<span class="subst">$&#123;j&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> fruits) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure><h3 id="label-语句"><a href="#label-语句" class="headerlink" title="label 语句"></a>label 语句</h3><!--rehype:wrap-class= row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">outPoint</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span> outPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(num);  <span class="comment">// 95</span></span><br></pre></td></tr></table></figure><p>从 <code>alert(num)</code> 的值可以看出，<code>continue outPoint;</code> 语句的作用是跳出当前循环，并跳转到 <code>outPoint</code>（标签）下的 <code>for</code> 循环继续执行。</p><h3 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; apple</span></span><br><span class="line"><span class="comment">// =&gt; orange</span></span><br><span class="line"><span class="comment">// =&gt; banana</span></span><br></pre></td></tr></table></figure><h3 id="for-await…of"><a href="#for-await…of" class="headerlink" title="for await…of"></a>for await…of</h3><!--rehype:wrap-class= row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">asyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="title function_">await</span> (num <span class="keyword">of</span> <span class="title function_">asyncGenerator</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="可选的-for-表达式"><a href="#可选的-for-表达式" class="headerlink" title="可选的 for 表达式"></a>可选的 for 表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-迭代器-Iterators"><a href="#JavaScript-迭代器-Iterators" class="headerlink" title="JavaScript 迭代器(Iterators)"></a>JavaScript 迭代器(Iterators)</h2><!--rehype:body-class=cols-2--><h3 id="分配给变量的函数"><a href="#分配给变量的函数" class="headerlink" title="分配给变量的函数"></a>分配给变量的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">plusFive</span> = (<span class="params">number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> number + <span class="number">5</span>;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// f 被赋值为 plusFive</span></span><br><span class="line"><span class="keyword">let</span> f = plusFive;</span><br><span class="line"><span class="title function_">plusFive</span>(<span class="number">3</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 由于 f 具有函数值，因此可以调用它。</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">9</span>); <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">printMsg</span> = (<span class="params">evenFunc, num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isNumEven = <span class="title function_">evenFunc</span>(num);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num&#125;</span> is an even number: <span class="subst">$&#123;isNumEven&#125;</span>.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Pass in isEven as the callback function</span></span><br><span class="line"><span class="title function_">printMsg</span>(isEven, <span class="number">4</span>); </span><br><span class="line"><span class="comment">// =&gt; The number 4 is an even number: True.</span></span><br></pre></td></tr></table></figure><h3 id="数组方法-reduce"><a href="#数组方法-reduce" class="headerlink" title="数组方法 .reduce()"></a>数组方法 .reduce()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, curVal</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> accumulator + curVal;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="数组方法-map"><a href="#数组方法-map" class="headerlink" title="数组方法 .map()"></a>数组方法 .map()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> members = [<span class="string">&quot;Taylor&quot;</span>, <span class="string">&quot;Donald&quot;</span>, <span class="string">&quot;Don&quot;</span>, <span class="string">&quot;Natasha&quot;</span>, <span class="string">&quot;Bobby&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> announcements = members.<span class="title function_">map</span>(<span class="function">(<span class="params">member</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> member + <span class="string">&quot; joined the contest.&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(announcements);</span><br></pre></td></tr></table></figure><h3 id="数组方法-forEach"><a href="#数组方法-forEach" class="headerlink" title="数组方法 .forEach()"></a>数组方法 .forEach()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">28</span>, <span class="number">77</span>, <span class="number">45</span>, <span class="number">99</span>, <span class="number">27</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function"><span class="params">number</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><h3 id="数组方法-filter"><a href="#数组方法-filter" class="headerlink" title="数组方法 .filter()"></a>数组方法 .filter()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNumbers = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">42</span>, <span class="number">14</span>, <span class="number">39</span>];</span><br><span class="line"><span class="keyword">const</span> filteredArray = randomNumbers.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> n &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-对象-Objects"><a href="#JavaScript-对象-Objects" class="headerlink" title="JavaScript 对象(Objects)"></a>JavaScript 对象(Objects)</h2><!--rehype:body-class=cols-2--><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apple = &#123; </span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;Green&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: &#123; <span class="attr">bulk</span>: <span class="string">&#x27;$3/kg&#x27;</span>, <span class="attr">smallQty</span>: <span class="string">&#x27;$4/kg&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">color</span>);      <span class="comment">// =&gt; Green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">price</span>.<span class="property">bulk</span>); <span class="comment">// =&gt; $3/kg</span></span><br></pre></td></tr></table></figure><h3 id="命名属性"><a href="#命名属性" class="headerlink" title="命名属性"></a>命名属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无效键名示例</span></span><br><span class="line"><span class="keyword">const</span> trainSchedule = &#123;</span><br><span class="line">  <span class="comment">// 由于单词之间的空格而无效。</span></span><br><span class="line">  platform <span class="attr">num</span>: <span class="number">10</span>, </span><br><span class="line">  <span class="comment">// 表达式不能是键。</span></span><br><span class="line">  <span class="number">40</span> - <span class="number">10</span> + <span class="number">2</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="comment">// 除非用引号括起来，否则 + 号无效。</span></span><br><span class="line">  +<span class="attr">compartment</span>: <span class="string">&#x27;C&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不存在的属性"><a href="#不存在的属性" class="headerlink" title="不存在的属性"></a>不存在的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classElection = &#123;</span><br><span class="line">  <span class="attr">date</span>: <span class="string">&#x27;January 12&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(classElection.<span class="property">place</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="可变的"><a href="#可变的" class="headerlink" title="可变的"></a>可变的</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Sheldon&#x27;</span>,</span><br><span class="line">  <span class="attr">score</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">grade</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Sheldon&#x27;, score: 100, grade: &#x27;A&#x27; &#125;</span></span><br><span class="line"><span class="keyword">delete</span> student.<span class="property">score</span></span><br><span class="line">student.<span class="property">grade</span> = <span class="string">&#x27;F&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Sheldon&#x27;, grade: &#x27;F&#x27; &#125;</span></span><br><span class="line">student = &#123;&#125;</span><br><span class="line"><span class="comment">// TypeError: TypeError：分配给常量变量。</span></span><br></pre></td></tr></table></figure><h3 id="赋值简写语法"><a href="#赋值简写语法" class="headerlink" title="赋值简写语法"></a>赋值简写语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;Tom&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">// &#x27;22&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除运算符"><a href="#删除运算符" class="headerlink" title="删除运算符"></a>删除运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Matilda&quot;</span>,</span><br><span class="line">  <span class="attr">hobby</span>: <span class="string">&quot;knitting&quot;</span>,</span><br><span class="line">  <span class="attr">goal</span>: <span class="string">&quot;learning JavaScript&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">hobby</span>; <span class="comment">// 或 delete person[&#x27;hobby&#x27;];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  firstName: &quot;Matilda&quot;</span></span><br><span class="line"><span class="comment">  goal: &quot;learning JavaScript&quot;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><h3 id="对象作为参数"><a href="#对象作为参数" class="headerlink" title="对象作为参数"></a>对象作为参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> origNum = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> origObj = &#123;<span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeItUp</span> = (<span class="params">num, obj</span>) =&gt; &#123;</span><br><span class="line">  num = <span class="number">7</span>;</span><br><span class="line">  obj.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">changeItUp</span>(origNum, origObj);</span><br><span class="line"><span class="comment">// 将输出 8，因为整数是按值传递的。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(origNum);</span><br><span class="line"><span class="comment">// 由于传递了对象，将输出“red”</span></span><br><span class="line"><span class="comment">// 通过引用，因此是可变的。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(origObj.<span class="property">color</span>);</span><br></pre></td></tr></table></figure><h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个接受 &#x27;name&#x27;，&#x27;age&#x27; 和 &#x27;breed&#x27; 的工厂函数，</span></span><br><span class="line"><span class="comment">//  参数返回一个自定义的 dog 对象。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dogFactory</span> = (<span class="params">name, age, breed</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">age</span>: age,</span><br><span class="line">    <span class="attr">breed</span>: breed,</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof!&#x27;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="速记对象创建"><a href="#速记对象创建" class="headerlink" title="速记对象创建"></a>速记对象创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> activity = <span class="string">&#x27;Surfing&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> beach = &#123; activity &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beach); <span class="comment">// &#123; activity: &#x27;Surfing&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Pipey&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="title function_">whatName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="title function_">whatName</span>()); <span class="comment">// =&gt; Pipey</span></span><br></pre></td></tr></table></figure><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> engine = &#123;</span><br><span class="line">  <span class="comment">// 方法简写，有一个参数</span></span><br><span class="line">  <span class="title function_">start</span>(<span class="params">adverb</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The engine starts up <span class="subst">$&#123;adverb&#125;</span>...`</span>);</span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="comment">// 不带参数的匿名箭头函数表达式</span></span><br><span class="line">  <span class="attr">sputter</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The engine sputters...&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">engine.<span class="title function_">start</span>(<span class="string">&#x27;noisily&#x27;</span>);</span><br><span class="line">engine.<span class="title function_">sputter</span>();</span><br></pre></td></tr></table></figure><h3 id="Getters-和-setters"><a href="#Getters-和-setters" class="headerlink" title="Getters 和 setters"></a>Getters 和 setters</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCat = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;Dottie&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = newName;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 引用调用 getter</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCat.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 赋值调用 setter</span></span><br><span class="line">myCat.<span class="property">name</span> = <span class="string">&#x27;Yankee&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于拦截对象的读取属性操作。</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">obj, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> prop <span class="keyword">in</span> obj ? obj[prop] : <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">p.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">p.<span class="property">b</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">a</span>, p.<span class="property">b</span>);      <span class="comment">// 1, undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> p, p.<span class="property">c</span>); <span class="comment">// false, 37</span></span><br></pre></td></tr></table></figure><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><ul><li>target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li><li>handler 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</li></ul><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>Proxy.revocable()</code></td><td align="left">创建一个可撤销的Proxy对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable">#</a></td></tr></tbody></table><h4 id="handler-对象的方法"><a href="#handler-对象的方法" class="headerlink" title="handler 对象的方法"></a>handler 对象的方法</h4><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>handler.getPrototypeOf()</code></td><td align="left">Object.getPrototypeOf 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf">#</a></td></tr><tr><td align="left"><code>handler.setPrototypeOf()</code></td><td align="left">Object.setPrototypeOf 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf">#</a></td></tr><tr><td align="left"><code>handler.isExtensible()</code></td><td align="left">Object.isExtensible 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible">#</a></td></tr><tr><td align="left"><code>handler.preventExtensions()</code></td><td align="left">Object.preventExtensions 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions">#</a></td></tr><tr><td align="left"><code>handler.getOwnPropertyDescriptor()</code></td><td align="left">Object.getOwnPropertyDescriptor 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor">#</a></td></tr><tr><td align="left"><code>handler.defineProperty()</code></td><td align="left">Object.defineProperty 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty">#</a></td></tr><tr><td align="left"><code>handler.has()</code></td><td align="left">in 操作符的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has">#</a></td></tr><tr><td align="left"><code>handler.get()</code></td><td align="left">属性读取操作的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get">#</a></td></tr><tr><td align="left"><code>handler.set()</code></td><td align="left">属性设置操作的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set">#</a></td></tr><tr><td align="left"><code>handler.deleteProperty()</code></td><td align="left">delete 操作符的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty">#</a></td></tr><tr><td align="left"><code>handler.ownKeys()</code></td><td align="left">Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys">#</a></td></tr><tr><td align="left"><code>handler.apply()</code></td><td align="left">函数调用操作的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply">#</a></td></tr><tr><td align="left"><code>handler.construct()</code></td><td align="left">new 操作符的捕捉器 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct">#</a></td></tr></tbody></table><!--rehype:className=style-list-arrow--><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers (en-US)的方法相同。Reflect不是一个函数对象，因此它是不可构造的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测一个对象是否存在特定属性</span></span><br><span class="line"><span class="keyword">const</span> duck = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Maurice&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">  <span class="attr">greeting</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Quaaaack! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(duck, <span class="string">&#x27;color&#x27;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(duck, <span class="string">&#x27;haircut&#x27;</span>);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>Reflect.apply(target, thisArgument, argumentsList)</code></td><td align="left">对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply">#</a></td></tr><tr><td align="left"><code>Reflect.construct(target, argumentsList[, newTarget])</code></td><td align="left">对构造函数进行 new 操作，相当于执行 new target(…args) <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct">#</a></td></tr><tr><td align="left"><code>Reflect.defineProperty(target, propertyKey, attributes)</code></td><td align="left">和 Object.defineProperty() 类似。如果设置成功就会返回 true <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty">#</a></td></tr><tr><td align="left"><code>Reflect.deleteProperty(target, propertyKey)</code></td><td align="left">作为函数的delete操作符，相当于执行 delete target[name] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty">#</a></td></tr><tr><td align="left"><code>Reflect.get(target, propertyKey[, receiver])</code></td><td align="left">获取对象身上某个属性的值，类似于 target[name] <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get">#</a></td></tr><tr><td align="left"><code>Reflect.getOwnPropertyDescriptor(target, propertyKey)</code></td><td align="left">类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符，否则返回 undefined <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor">#</a></td></tr><tr><td align="left"><code>Reflect.getPrototypeOf(target)</code></td><td align="left">类似于 Object.getPrototypeOf() <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf">#</a></td></tr><tr><td align="left"><code>Reflect.has(target, propertyKey)</code></td><td align="left">判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has">#</a></td></tr><tr><td align="left"><code>Reflect.isExtensible(target)</code></td><td align="left">类似于 Object.isExtensible() <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible">#</a></td></tr><tr><td align="left"><code>Reflect.ownKeys(target)</code></td><td align="left">返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable 影响) <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys">#</a></td></tr><tr><td align="left"><code>Reflect.preventExtensions(target)</code></td><td align="left">类似于 Object.preventExtensions()。返回一个Boolean <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions">#</a></td></tr><tr><td align="left"><code>Reflect.set(target, propertyKey, value[, receiver])</code></td><td align="left">将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set">#</a></td></tr><tr><td align="left"><code>Reflect.setPrototypeOf(target, prototype)</code></td><td align="left">设置对象原型的函数。返回一个 Boolean，如果更新成功，则返回 true <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf">#</a></td></tr></tbody></table><!--rehype:className=style-list-arrow--><h2 id="JavaScript-this-绑定"><a href="#JavaScript-this-绑定" class="headerlink" title="JavaScript this 绑定"></a>JavaScript this 绑定</h2><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">  <span class="attr">obj1</span>: obj1</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>() <span class="comment">// [Object obj1]</span></span><br></pre></td></tr></table></figure><h4 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = obj2.<span class="property">obj1</span>.<span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">a</span>() <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><ul><li>指定隐式绑定：必须在调用的对象内部有一个对函数的引用（比如一个属性）</li><li>将以上调用赋值给一个变量，结果最终会是 Window</li><li>在 a 被调用的位置没有进行过任何显示绑定，最终全局对象 window 会调用它（<code>Window.a</code>）</li></ul><!--rehype:className=style-round--><h3 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">a1, a2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;此人&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&quot;岁数&quot;</span> + (a1 + a2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>call 第一个参数接受 this 作用域，剩余参数传递给其调用的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getName.<span class="title function_">call</span>(person, <span class="number">18</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>apply 第一个参数与 call 相同，第二个参数是其调用函数的参数数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getName.<span class="title function_">apply</span>(person, [<span class="number">18</span>, <span class="number">12</span>])</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind 函数会返回一个新函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getName.<span class="title function_">bind</span>(person,<span class="number">18</span>,<span class="number">12</span>)()</span><br><span class="line"><span class="comment">//或者可以这样</span></span><br><span class="line">getName.<span class="title function_">bind</span>(person)(<span class="number">18</span>, <span class="number">12</span>)</span><br><span class="line"><span class="comment">//或者这样</span></span><br><span class="line">getName.<span class="title function_">bind</span>(person).<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">18</span>)(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h3 id="内置函数中的-this"><a href="#内置函数中的-this" class="headerlink" title="内置函数中的 this"></a>内置函数中的 this</h3><p>数组中的一些方法，类似于 map、forEach 等，可以自己设置绑定 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;, obj)</span><br><span class="line"><span class="comment">// zhangsan x3 </span></span><br></pre></td></tr></table></figure><p>其中一些全局对象，如 setTimeout 等，它们和未显示绑定 this 的部分数组方法一样，都会指向全局对象（<code>Window</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>) <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-Classes"><a href="#JavaScript-Classes" class="headerlink" title="JavaScript Classes"></a>JavaScript Classes</h2><h3 id="静态方法-字段"><a href="#静态方法-字段" class="headerlink" title="静态方法&#x2F;字段"></a>静态方法&#x2F;字段</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">introduce</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">_name</span> + <span class="string">&#x27; !&#x27;</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof!&#x27;</span>);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类静态初始化块调用&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buster&#x27;</span>);</span><br><span class="line">myDog.<span class="title function_">introduce</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><h4 id="公有静态字段"><a href="#公有静态字段" class="headerlink" title="公有静态字段"></a>公有静态字段</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassStaticField</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> staticField = <span class="string">&#x27;static field&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ClassStaticField</span>.<span class="property">staticField</span>)</span><br><span class="line"><span class="comment">// 预期输出值：&quot;static field&quot;​ </span></span><br></pre></td></tr></table></figure><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Song</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">author</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Song playing!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mySong = <span class="keyword">new</span> <span class="title class_">Song</span>();</span><br><span class="line">mySong.<span class="title function_">play</span>();</span><br></pre></td></tr></table></figure><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Media</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">publishDate</span> = info.<span class="property">publishDate</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = info.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Child class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Song</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Media</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">songData</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(songData);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">artist</span> = songData.<span class="property">artist</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mySong = <span class="keyword">new</span> <span class="title class_">Song</span>(&#123; </span><br><span class="line">  <span class="attr">artist</span>: <span class="string">&#x27;Queen&#x27;</span>, </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bohemian Rhapsody&#x27;</span>, </span><br><span class="line">  <span class="attr">publishDate</span>: <span class="number">1975</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Class-Constructor"><a href="#Class-Constructor" class="headerlink" title="Class Constructor"></a>Class Constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Song</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">title, artist</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = title;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">artist</span> = artist;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mySong = <span class="keyword">new</span> <span class="title class_">Song</span>(<span class="string">&#x27;Bohemian Rhapsody&#x27;</span>, <span class="string">&#x27;Queen&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySong.<span class="property">title</span>);</span><br></pre></td></tr></table></figure><h3 id="Class-Methods"><a href="#Class-Methods" class="headerlink" title="Class Methods"></a>Class Methods</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Song</span> &#123;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Playing!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Stopping!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-Modules"><a href="#JavaScript-Modules" class="headerlink" title="JavaScript Modules"></a>JavaScript Modules</h2><!--rehype:body-class=cols-2--><h3 id="Export-Import"><a href="#Export-Import" class="headerlink" title="Export &#x2F; Import"></a>Export &#x2F; Import</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myMath.js</span></span><br><span class="line"><span class="comment">// 默认导出 Default export</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正常导出 Normal export</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多重导出 Multiple exports</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">duplicate</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  multiply, duplicate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="import-加载模块"><a href="#import-加载模块" class="headerlink" title="import 加载模块"></a>import 加载模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> add, &#123; subtract, multiply, duplicate &#125; <span class="keyword">from</span> <span class="string">&#x27;./myMath.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">6</span>, <span class="number">2</span>));      <span class="comment">// 8 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">6</span>, <span class="number">2</span>))  <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">6</span>, <span class="number">2</span>)); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">duplicate</span>(<span class="number">5</span>))    <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Export-Module"><a href="#Export-Module" class="headerlink" title="Export Module"></a>Export Module</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myMath.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">duplicate</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// node.js 中的多个导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  subtract,</span><br><span class="line">  multiply,</span><br><span class="line">  duplicate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="require-加载模块"><a href="#require-加载模块" class="headerlink" title="require 加载模块"></a>require 加载模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> myMath = <span class="built_in">require</span>(<span class="string">&#x27;./myMath.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">add</span>(<span class="number">6</span>, <span class="number">2</span>));      <span class="comment">// 8 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">subtract</span>(<span class="number">6</span>, <span class="number">2</span>))  <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">multiply</span>(<span class="number">6</span>, <span class="number">2</span>)); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">duplicate</span>(<span class="number">5</span>))    <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-Promises"><a href="#JavaScript-Promises" class="headerlink" title="JavaScript Promises"></a>JavaScript Promises</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><!--rehype:wrap-class=row-span-2--><p>创建 promises</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(result)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用-promises"><a href="#使用-promises" class="headerlink" title="使用 promises"></a>使用 promises</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123; ··· &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; ··· &#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise-方法"><a href="#Promise-方法" class="headerlink" title="Promise 方法"></a>Promise 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(···)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>(···)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(···)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(···)</span><br></pre></td></tr></table></figure><h3 id="执行器函数"><a href="#执行器函数" class="headerlink" title="执行器函数"></a>执行器函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">executorFn</span> = (<span class="params">resolve, reject</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;Resolved!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(executorFn);</span><br></pre></td></tr></table></figure><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">loginAlert</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Login&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setTimeout</span>(loginAlert, <span class="number">6000</span>);</span><br></pre></td></tr></table></figure><h3 id="Promise-状态"><a href="#Promise-状态" class="headerlink" title="Promise 状态"></a>Promise 状态</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 一个异步操作。</span></span><br><span class="line">  <span class="keyword">if</span> (res) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Resolved!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&#x27;Error&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="then-方法"><a href="#then-方法" class="headerlink" title=".then() 方法"></a>.then() 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Result&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="catch-方法"><a href="#catch-方法" class="headerlink" title=".catch() 方法"></a>.catch() 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(</span><br><span class="line">  <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&#x27;Promise 无条件拒绝。&#x27;</span>));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">0</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">1</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="链接多个-then"><a href="#链接多个-then" class="headerlink" title="链接多个 .then()"></a>链接多个 .then()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(</span><br><span class="line">  <span class="function"><span class="params">resolve</span> =&gt;</span> </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;dAlan&#x27;</span>),<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res === <span class="string">&#x27;Alan&#x27;</span> </span><br><span class="line">    ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hey Alan!&#x27;</span>)</span><br><span class="line">    : <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Who are you?&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="避免嵌套的-Promise-和-then"><a href="#避免嵌套的-Promise-和-then" class="headerlink" title="避免嵌套的 Promise 和 .then()"></a>避免嵌套的 Promise 和 .then()</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">twoStars</span> = (<span class="params">star</span>) =&gt; &#123;  </span><br><span class="line">  <span class="keyword">return</span> (star + star);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">oneDot</span> = (<span class="params">star</span>) =&gt; &#123;  </span><br><span class="line">  <span class="keyword">return</span> (star + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">print</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将它们链接在一起</span></span><br><span class="line">promise.<span class="title function_">then</span>(twoStars).<span class="title function_">then</span>(oneDot).<span class="title function_">then</span>(print);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-Async-Await"><a href="#JavaScript-Async-Await" class="headerlink" title="JavaScript Async-Await"></a>JavaScript Async-Await</h2><!--rehype:body-class=cols-2--><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">helloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步函数表达式</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">await</span> <span class="title function_">helloWorld</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message:&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">msg1</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">await</span> <span class="title function_">helloWorld</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message:&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">msg</span>(); <span class="comment">// Message: Hello World! &lt;-- 2 秒后</span></span><br><span class="line"><span class="title function_">msg1</span>(); <span class="comment">// Message: Hello World! &lt;-- 2 秒后</span></span><br></pre></td></tr></table></figure><h3 id="解决-Promises"><a href="#解决-Promises" class="headerlink" title="解决 Promises"></a>解决 Promises</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> pro2 = <span class="number">44</span>;</span><br><span class="line"><span class="keyword">let</span> pro3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([pro1, pro2, pro3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">values</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// expected =&gt; Array [5, 44, &quot;foo&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="异步等待-Promises"><a href="#异步等待-Promises" class="headerlink" title="异步等待 Promises"></a>异步等待 Promises</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">helloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">msg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">await</span> <span class="title function_">helloWorld</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message:&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">msg</span>(); <span class="comment">// Message: Hello World! &lt;-- 2 秒后</span></span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据不完整</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="string">&#x27;&#123; &quot;age&quot;: 30 &#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json); <span class="comment">// &lt;-- 没有错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( user.<span class="property">name</span> );    <span class="comment">// no name!</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>( <span class="string">&quot;Invalid JSON data!&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步等待运算符"><a href="#异步等待运算符" class="headerlink" title="异步等待运算符"></a>异步等待运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">helloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">msg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">await</span> <span class="title function_">helloWorld</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message:&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">msg</span>(); <span class="comment">// Message: Hello World! &lt;-- 2 秒后</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-请求"><a href="#JavaScript-请求" class="headerlink" title="JavaScript 请求"></a>JavaScript 请求</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonObj = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Rick&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;11A&quot;</span>,</span><br><span class="line">  <span class="string">&quot;level&quot;</span>: <span class="number">4</span>  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另见：<a href="./json.md">JSON 备忘单</a></p><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;mysite.com/getjson&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>XMLHttpRequest</code> 是一个浏览器级别的 API，它使客户端能够通过 JavaScript 编写数据传输脚本，而不是 JavaScript 语言的一部分。</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">req.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">req.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/getdata?id=65&#x27;</span>);</span><br><span class="line">req.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">&#125;;</span><br><span class="line">req.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">weight</span>: <span class="string">&#x27;1.5 KG&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 初始化一个请求。</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/inventory/add&#x27;</span>);</span><br><span class="line"><span class="comment">// 一个用于定义响应类型的枚举值</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="comment">// 发送请求以及数据。</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line"><span class="comment">// 请求成功完成时触发。</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当 request 遭遇错误时触发。</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fetch-api"><a href="#fetch-api" class="headerlink" title="fetch api"></a>fetch api</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;apikey&#x27;</span>: apiKey</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: data</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Request failed!&#x27;</span>);</span><br><span class="line">&#125;, <span class="function"><span class="params">networkError</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(networkError.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JSON-格式"><a href="#JSON-格式" class="headerlink" title="JSON 格式"></a>JSON 格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url-that-returns-JSON&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonResponse);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="promise-url-参数获取-API"><a href="#promise-url-参数获取-API" class="headerlink" title="promise url 参数获取 API"></a>promise url 参数获取 API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span>  =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;, <span class="function"><span class="params">rejection</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(rejection.<span class="property">message</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Fetch-API-函数"><a href="#Fetch-API-函数" class="headerlink" title="Fetch API 函数"></a>Fetch API 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api-xxx.com/endpoint&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">id</span>: <span class="string">&quot;200&quot;</span>&#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(response.<span class="property">ok</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Request failed!&#x27;</span>);</span><br><span class="line">&#125;, <span class="function"><span class="params">networkError</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(networkError.<span class="property">message</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonResponse);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="async-await-语法"><a href="#async-await-语法" class="headerlink" title="async await 语法"></a>async await 语法</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSuggestions</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wordQuery = inputField.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> endpoint = <span class="string">`<span class="subst">$&#123;url&#125;</span><span class="subst">$&#123;queryParams&#125;</span><span class="subst">$&#123;wordQuery&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(endpoint, &#123;<span class="attr">cache</span>: <span class="string">&#x27;no-cache&#x27;</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">ok</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> jsonResponse = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-备忘清单&quot;&gt;&lt;a href=&quot;#JavaScript-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 备忘清单&quot;&gt;&lt;/a&gt;JavaScript 备忘清单&lt;/h1&gt;&lt;p&gt;包含最重要概念、函数、方法等的 Ja</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JavaScript" scheme="https://tdcqcx.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSON 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/json/"/>
    <id>https://tdcqcx.github.io/2025/01/08/json/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON-备忘清单"><a href="#JSON-备忘清单" class="headerlink" title="JSON 备忘清单"></a>JSON 备忘清单</h1><p>这是理解和编写 JSON 格式配置文件的快速参考备忘单。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://json.org/">JSON</a> 是一种基于文本的轻量级开放标准，专为人类可读的数据交换而设计。</p><ul><li>JSON 代表 JavaScript 对象表示法</li><li>JSON 易于读写。</li><li>JSON 是与语言无关的数据交换格式</li><li>JSON 文件扩展名为 <code>.json</code></li><li>JSON Internet 媒体类型为 <code>application/json</code></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jason&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1.92</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;salary&quot;</span><span class="punctuation">:</span> <span class="number">70000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;married&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ava&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>Number</code></td><td>双精度浮点</td></tr><tr><td><code>String</code></td><td>字符系列</td></tr><tr><td><code>Boolean</code></td><td>“true”或“false”</td></tr><tr><td><code>Array</code></td><td>有序的值序列</td></tr><tr><td><code>Value</code></td><td>字符串、数字、布尔值、空值等</td></tr><tr><td><code>Object</code></td><td>键&#x2F;值对的无序集合</td></tr><tr><td><code>null</code></td><td>Null 或 Empty</td></tr></tbody></table><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><!--rehype:wrap-style=grid-row: span 3/span 3;--><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>\&quot;</code></td><td>双引号 Double quote</td></tr><tr><td><code>\\</code></td><td>反斜杠 Backslash</td></tr><tr><td><code>\/</code></td><td>正斜杠 Forward slash</td></tr><tr><td><code>\b</code></td><td>退格 Backspace</td></tr><tr><td><code>\f</code></td><td>换页 Form feed</td></tr><tr><td><code>\n</code></td><td>换行 Newline</td></tr><tr><td><code>\r</code></td><td>回车 Carriage return</td></tr><tr><td><code>\t</code></td><td>标签 Tab</td></tr><tr><td><code>\u</code></td><td>后跟四个十六进制数字</td></tr></tbody></table><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://jaywcjlove.github.io&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hi,\n\&quot;Quick Reference\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为开发人员分享快速参考和备忘单&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="无效字符串"><a href="#无效字符串" class="headerlink" title="无效字符串"></a>无效字符串</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;foo&quot;</span><span class="punctuation">:</span> &#x27;bar&#x27; <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Have to be delimited by double quotes</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>Integer</code></td><td>数字 1-9、0 和正数或负数</td></tr><tr><td><code>Fraction</code></td><td>0.3、3.9 等分数</td></tr><tr><td><code>Exponent</code></td><td>指数，如 e、e+、e-、E、E+、E</td></tr></tbody></table><!--rehype:className=show-header --><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;positive&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;negative&quot;</span> <span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fraction&quot;</span> <span class="punctuation">:</span> <span class="number">10.25</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exponent&quot;</span> <span class="punctuation">:</span> <span class="number">1.0E+2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;zero&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="无效的数字"><a href="#无效的数字" class="headerlink" title="无效的数字"></a>无效的数字</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;foo&quot;</span><span class="punctuation">:</span> <span class="number">0xFF</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在JSON中，只能使用十进制文字</p><h3 id="对象-Objects"><a href="#对象-Objects" class="headerlink" title="对象 Objects"></a>对象 Objects</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Purple&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;210&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;composition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;R&quot;</span><span class="punctuation">:</span> <span class="number">70</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;G&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;B&quot;</span><span class="punctuation">:</span> <span class="number">89</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;empty_object&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>用逗号分隔的多个键&#x2F;值对</p><h3 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>以 <code>[</code> 开始并以 <code>]</code> 结束</p><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jimmy Smith&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sammy Sosa&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">12</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;a1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;a2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;methods&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;getter&quot;</span><span class="punctuation">,</span> <span class="string">&quot;setter&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;empty_array&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="二维阵列"><a href="#二维阵列" class="headerlink" title="二维阵列"></a>二维阵列</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;my_sequences&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的对象"><a href="#对象的对象" class="headerlink" title="对象的对象"></a>对象的对象</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mark McGwire&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hr&quot;</span><span class="punctuation">:</span> <span class="number">65</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="number">0.278</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Sammy Sosa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hr&quot;</span><span class="punctuation">:</span> <span class="number">63</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="number">0.288</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Jack&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Franc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;salary&quot;</span><span class="punctuation">:</span> <span class="number">25000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hobby&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A-A&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="JSON-5"><a href="#JSON-5" class="headerlink" title="JSON 5"></a>JSON 5</h2><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>对象键可以是 ECMAScript 5.1 <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-7.6">IdentifierName</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    width<span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span></span><br><span class="line">    height<span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>数组可以有一个尾随逗号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    &#x27;three&#x27;<span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="允许单行和多行注释"><a href="#允许单行和多行注释" class="headerlink" title="允许单行和多行注释"></a>允许单行和多行注释</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 一行注释</span></span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Kenny&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这是一个</span></span><br><span class="line"><span class="comment">   多行注释 */</span></span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Kenny&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="允许附加空白字符"><a href="#允许附加空白字符" class="headerlink" title="允许附加空白字符"></a>允许附加空白字符</h3><table><thead><tr><th align="left">代码点</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>U+0009</code></td><td>水平制表符</td></tr><tr><td align="left"><code>U+000A</code></td><td>换行符</td></tr><tr><td align="left"><code>U+000B</code></td><td>垂直制表符</td></tr><tr><td align="left"><code>U+000C</code></td><td>换页符</td></tr><tr><td align="left"><code>U+000D</code></td><td>回车符</td></tr><tr><td align="left"><code>U+0020</code></td><td>空格</td></tr><tr><td align="left"><code>U+00A0</code></td><td>不间断空格</td></tr><tr><td align="left"><code>U+2028</code></td><td>行分隔符</td></tr><tr><td align="left"><code>U+2029</code></td><td>段落分隔符</td></tr><tr><td align="left"><code>U+FEFF</code></td><td>字节顺序标记</td></tr><tr><td align="left">Unicode Zs 类别</td><td>空格分隔符 Unicode 类别中的任何其他字符</td></tr></tbody></table><!--rehype:className=left-align--><h3 id="数字-1"><a href="#数字-1" class="headerlink" title="数字"></a>数字</h3><p>数字可能有前导或尾随小数点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    integer<span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span></span><br><span class="line">    withFractionPart<span class="punctuation">:</span> <span class="number">123.456</span><span class="punctuation">,</span></span><br><span class="line">    onlyFractionPart<span class="punctuation">:</span> <span class="number">.456</span><span class="punctuation">,</span></span><br><span class="line">    withExponent<span class="punctuation">:</span> <span class="number">123e-456</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>数字可以是十六进制</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    positiveHex<span class="punctuation">:</span> <span class="number">0xdecaf</span><span class="punctuation">,</span></span><br><span class="line">    negativeHex<span class="punctuation">:</span> <span class="number">-0xC0FFEE</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>数字可以是正无穷大、负无穷大和 NaN。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    positiveInfinity<span class="punctuation">:</span> Infinity<span class="punctuation">,</span></span><br><span class="line">    negativeInfinity<span class="punctuation">:</span> -Infinity<span class="punctuation">,</span></span><br><span class="line">    notANumber<span class="punctuation">:</span> NaN<span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>数字可以以明确的加号开头</p><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Lorem ipsum dolor sit amet, \</span></span><br><span class="line"><span class="string">consectetur adipiscing elit.&#x27;</span></span><br></pre></td></tr></table></figure><p>以下是代表相同的意思</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;\A\C\/\D\C&#x27;</span><br></pre></td></tr></table></figure><p>以下是代表相同的意思</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;AC/DC&#x27;</span><br></pre></td></tr></table></figure><h2 id="在-JavaScript-中访问-JSON"><a href="#在-JavaScript-中访问-JSON" class="headerlink" title="在 JavaScript 中访问 JSON"></a>在 JavaScript 中访问 JSON</h2><h3 id="访问对象"><a href="#访问对象" class="headerlink" title="访问对象"></a>访问对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myObject = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jason&quot;</span>,</span><br><span class="line">  <span class="string">&quot;last&quot;</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">39</span>,</span><br><span class="line">  <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">  <span class="string">&quot;salary&quot;</span>: <span class="number">70000</span>,</span><br><span class="line">  <span class="string">&quot;married&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>myObject.name</code></td><td>“Jason”</td></tr><tr><td><code>myObject[&quot;name&quot;]</code></td><td>“Jason”</td></tr><tr><td><code>myObject.age</code></td><td>39</td></tr><tr><td><code>myObject.other</code></td><td>undefined</td></tr><tr><td><code>myObject[0]</code></td><td>undefined</td></tr></tbody></table><h3 id="访问嵌套"><a href="#访问嵌套" class="headerlink" title="访问嵌套"></a>访问嵌套</h3><!--rehype:wrap-style=grid-row: span 2/span 2;--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myObject = &#123;</span><br><span class="line">    <span class="string">&quot;ref&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;last&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;salary&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&quot;married&quot;</span>: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;jdoe&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Jason&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">        <span class="number">39</span>,</span><br><span class="line">        <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="number">70000</span>,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;jsmith&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">        <span class="number">42</span>,</span><br><span class="line">        <span class="string">&quot;F&quot;</span>,</span><br><span class="line">        <span class="number">80000</span>,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>myObject.ref.age</code></td><td>2</td></tr><tr><td><code>myObject[&quot;ref&quot;][&quot;age&quot;]</code></td><td>2</td></tr><tr><td><code>myObject.jdoe</code></td><td>[“Jason”, “Doe”, 39 …]</td></tr><tr><td><code>myObject.jsmith[3]</code></td><td>“F”</td></tr><tr><td><code>myObject[1]</code></td><td>undefined</td></tr></tbody></table><h3 id="访问对象数组"><a href="#访问对象数组" class="headerlink" title="访问对象数组"></a>访问对象数组</h3><!--rehype:wrap-style=grid-row: span 2/span 2;--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jason&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last&quot;</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">39</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salary&quot;</span>: <span class="number">70000</span>,</span><br><span class="line">    <span class="string">&quot;married&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last&quot;</span>: <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;F&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salary&quot;</span>: <span class="number">80000</span>,</span><br><span class="line">    <span class="string">&quot;married&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Amy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last&quot;</span>: <span class="string">&quot;Burnquist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;F&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salary&quot;</span>: <span class="number">60000</span>,</span><br><span class="line">    <span class="string">&quot;married&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>myArray[0]</code></td><td><code>&#123;</code>“name”: “Jason”, …<code>&#125;</code></td></tr><tr><td><code>myArray[1].name</code></td><td>“Tom”</td></tr><tr><td><code>myArray[1][2]</code></td><td>42</td></tr><tr><td><code>myArray[3]</code></td><td>undefined</td></tr><tr><td><code>myArray[3].gender</code></td><td>TypeError: Cannot read…</td></tr></tbody></table><h3 id="访问阵列"><a href="#访问阵列" class="headerlink" title="访问阵列"></a>访问阵列</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [</span><br><span class="line">  <span class="string">&quot;Jason&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">  <span class="number">39</span>,</span><br><span class="line">  <span class="string">&quot;M&quot;</span>,</span><br><span class="line">  <span class="number">70000</span>,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>myArray[1]</code></td><td>“Doe”</td></tr><tr><td><code>myArray[5]</code></td><td>true</td></tr><tr><td><code>myArray[6]</code></td><td>undefined</td></tr></tbody></table><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://www.json.org/json-en.html">JSON</a> <em>(json.org)</em></li><li><a href="http://jsoneditoronline.org/">JSON Editor Online</a> <em>(jsoneditoronline.org)</em></li><li><a href="https://tableconvert.com/json-to-markdown">Convert JSON Array to Markdown Table, CSV and more</a> <em>(tableconvert.com)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON-备忘清单&quot;&gt;&lt;a href=&quot;#JSON-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;JSON 备忘清单&quot;&gt;&lt;/a&gt;JSON 备忘清单&lt;/h1&gt;&lt;p&gt;这是理解和编写 JSON 格式配置文件的快速参考备忘单。&lt;/p&gt;
&lt;h2 id=&quot;入</summary>
      
    
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="JSON" scheme="https://tdcqcx.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>PHP 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/php/"/>
    <id>https://tdcqcx.github.io/2025/01/08/php/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-备忘清单"><a href="#PHP-备忘清单" class="headerlink" title="PHP 备忘清单"></a>PHP 备忘清单</h1><p>这份 <a href="https://www.php.net/manual/zh/index.php">PHP</a> 备忘单为快速查找最常用代码的正确语法提供了参考</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="hello-php"><a href="#hello-php" class="headerlink" title="hello.php"></a>hello.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">// 以 PHP 开放标签开头</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;Hello jaywcjlove.github.io&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PHP 运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php hello.php</span></span><br></pre></td></tr></table></figure><h3 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 Variables"></a>变量 Variables</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$boolean1</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$boolean2</span> = True;</span><br><span class="line"><span class="variable">$int</span> = <span class="number">12</span>;</span><br><span class="line"><span class="variable">$float</span> = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$float</span>);  <span class="comment">// 删除变量</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&quot;How are you?&quot;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&#x27;Fine, thanks&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E7%B1%BB%E5%9E%8B">Types</a></p><h3 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串 Strings"></a>字符串 Strings</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">&quot;jaywcjlove.github.io&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I&#x27;m learning PHP at <span class="subst">$url</span>&quot;</span>;</span><br><span class="line"><span class="comment">// 连接字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I&#x27;m learning PHP at &quot;</span> . <span class="variable">$url</span>;</span><br><span class="line"><span class="variable">$hello</span> = <span class="string">&quot;Hello, &quot;</span>;</span><br><span class="line"><span class="variable">$hello</span> .= <span class="string">&quot;World!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hello</span>;   <span class="comment"># =&gt; Hello, World!</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E5%AD%97%E7%AC%A6%E4%B8%B2">Strings</a></p><h3 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span> = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable">$num</span>[<span class="number">5</span>] = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$num</span>[<span class="number">2</span>]);    <span class="comment">// 删除变量</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$num</span>);     <span class="comment"># =&gt; 1 3 7 9 11</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$num</span>);  <span class="comment"># =&gt; 5</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E6%95%B0%E7%BB%84">Arrays</a></p><h3 id="运算符-Operators"><a href="#运算符-Operators" class="headerlink" title="运算符 Operators"></a>运算符 Operators</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$sum</span> = <span class="variable">$x</span> + <span class="variable">$y</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>;   <span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E8%BF%90%E7%AE%97%E7%AC%A6">Operators</a></p><h3 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h3><!--rehype:wrap-class=row-span-3--><h4 id="vars-php"><a href="#vars-php" class="headerlink" title="vars.php"></a>vars.php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">// 以 PHP 开放标签开头。</span></span><br><span class="line"><span class="variable">$fruit</span> = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I was imported&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Anything you like.&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="test-php"><a href="#test-php" class="headerlink" title="test.php"></a>test.php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;vars.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$fruit</span> . <span class="string">&quot;\n&quot;</span>;   <span class="comment"># =&gt; apple</span></span><br><span class="line"><span class="comment">/* 与 include 相同，</span></span><br><span class="line"><span class="comment">如果不能包含则导致错误*/</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vars.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 也有效</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;vars.php&#x27;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;vars.php&#x27;</span>);</span><br><span class="line"><span class="comment">// 通过 HTTP 包含</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;http://x.com/file.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 包含和返回语句</span></span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">include</span> <span class="string">&#x27;vars.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;  <span class="comment"># =&gt; Anything you like.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="功能-Functions"><a href="#功能-Functions" class="headerlink" title="功能 Functions"></a>功能 Functions</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$num1</span>, <span class="variable">$num2</span> = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num1</span> + <span class="variable">$num2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">add</span>(<span class="number">10</span>);    <span class="comment"># =&gt; 11</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">add</span>(<span class="number">10</span>, <span class="number">5</span>); <span class="comment"># =&gt; 15</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E5%87%BD%E6%95%B0">Functions</a></p><h3 id="注释-Comments"><a href="#注释-Comments" class="headerlink" title="注释 Comments"></a>注释 Comments</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个单行 shell 样式的注释</span></span><br><span class="line"><span class="comment">// 这是一行 c++ 风格的注释</span></span><br><span class="line"><span class="comment">/* 这是一个多行注释</span></span><br><span class="line"><span class="comment">    另一行注释 */</span></span><br></pre></td></tr></table></figure><h3 id="常数-Constants"><a href="#常数-Constants" class="headerlink" title="常数 Constants"></a>常数 Constants</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MY_CONST</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> MY_CONST;   <span class="comment"># =&gt; hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; MY_CONST is: hello</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;MY_CONST is: &#x27;</span> . MY_CONST; </span><br></pre></td></tr></table></figure><h3 id="类-Classes"><a href="#类-Classes" class="headerlink" title="类 Classes"></a>类 Classes</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$alex</span> = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alex&quot;</span>);</span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E7%B1%BB">Classes</a></p><h2 id="PHP-类型"><a href="#PHP-类型" class="headerlink" title="PHP 类型"></a>PHP 类型</h2><h3 id="布尔值-Boolean"><a href="#布尔值-Boolean" class="headerlink" title="布尔值 Boolean"></a>布尔值 Boolean</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$boolean1</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$boolean2</span> = <span class="literal">TRUE</span>;</span><br><span class="line"><span class="variable">$boolean3</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$boolean4</span> = <span class="literal">FALSE</span>;</span><br><span class="line"><span class="variable">$boolean5</span> = (<span class="keyword">boolean</span>) <span class="number">1</span>;   <span class="comment"># =&gt; true</span></span><br><span class="line"><span class="variable">$boolean6</span> = (<span class="keyword">boolean</span>) <span class="number">0</span>;   <span class="comment"># =&gt; false</span></span><br></pre></td></tr></table></figure><p>布尔值不区分大小写</p><h3 id="整数-Integer"><a href="#整数-Integer" class="headerlink" title="整数 Integer"></a>整数 Integer</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$int1</span> = <span class="number">28</span>;    <span class="comment"># =&gt; 28</span></span><br><span class="line"><span class="variable">$int2</span> = -<span class="number">32</span>;   <span class="comment"># =&gt; -32</span></span><br><span class="line"><span class="variable">$int3</span> = <span class="number">012</span>;   <span class="comment"># =&gt; 10 (octal)</span></span><br><span class="line"><span class="variable">$int4</span> = <span class="number">0x0F</span>;  <span class="comment"># =&gt; 15 (hex)</span></span><br><span class="line"><span class="variable">$int5</span> = <span class="number">0b101</span>; <span class="comment"># =&gt; 5  (binary)</span></span><br><span class="line"><span class="comment"># =&gt; 2000100000 (decimal, PHP 7.4.0)</span></span><br><span class="line"><span class="variable">$int6</span> = <span class="number">2_000_100_000</span>;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://www.php.net/manual/en/language.types.integer.php">Integers</a></p><h3 id="字符串-Strings-1"><a href="#字符串-Strings-1" class="headerlink" title="字符串 Strings"></a>字符串 Strings</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;this is a simple string&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E5%AD%97%E7%AC%A6%E4%B8%B2">Strings</a></p><h3 id="数组-Arrays-1"><a href="#数组-Arrays-1" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure><p>查看: <a href="#php-%E6%95%B0%E7%BB%84">Arrays</a></p><h3 id="浮点数-Float-Double"><a href="#浮点数-Float-Double" class="headerlink" title="浮点数 Float (Double)"></a>浮点数 Float (Double)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$float1</span> = <span class="number">1.234</span>;</span><br><span class="line"><span class="variable">$float2</span> = <span class="number">1.2e7</span>;</span><br><span class="line"><span class="variable">$float3</span> = <span class="number">7E-10</span>;</span><br><span class="line"><span class="variable">$float4</span> = <span class="number">1_234.567</span>;  <span class="comment">// as of PHP 7.4.0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$float4</span>);    <span class="comment">// float(1234.567)</span></span><br><span class="line"><span class="variable">$float5</span> = <span class="number">1</span> + <span class="string">&quot;10.5&quot;</span>;   <span class="comment"># =&gt; 11.5</span></span><br><span class="line"><span class="variable">$float6</span> = <span class="number">1</span> + <span class="string">&quot;-1.3e3&quot;</span>; <span class="comment"># =&gt; -1299</span></span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;Hello php!&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> ?? <span class="string">&#x27;a is unset&#x27;</span>; <span class="comment"># =&gt; a is unset</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> ?? <span class="string">&#x27;b is unset&#x27;</span>; <span class="comment"># =&gt; Hello php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$a</span> == <span class="literal">null</span>    <span class="comment"># =&gt; true</span></span><br><span class="line"><span class="variable">$a</span> === <span class="literal">null</span>   <span class="comment"># =&gt; false</span></span><br><span class="line"><span class="title function_ invoke__">is_null</span>(<span class="variable">$a</span>)   <span class="comment"># =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="可迭代对象-Iterables"><a href="#可迭代对象-Iterables" class="headerlink" title="可迭代对象 Iterables"></a>可迭代对象 Iterables</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>): <span class="title">iterable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span>(<span class="params"></span>): <span class="title">iterable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">bar</span>() <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$value</span>;   <span class="comment"># =&gt; 123</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="PHP-字符串"><a href="#PHP-字符串" class="headerlink" title="PHP 字符串"></a>PHP 字符串</h2><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; &#x27;$String&#x27;</span></span><br><span class="line"><span class="variable">$sgl_quotes</span> = <span class="string">&#x27;$String&#x27;</span>;</span><br><span class="line"><span class="comment"># =&gt; &#x27;This is a $String.&#x27;</span></span><br><span class="line"><span class="variable">$dbl_quotes</span> = <span class="string">&quot;This is a <span class="subst">$sgl_quotes</span>.&quot;</span>;</span><br><span class="line"><span class="comment"># =&gt; a    tab character.</span></span><br><span class="line"><span class="variable">$escaped</span>   = <span class="string">&quot;a \t tab character.&quot;</span>;</span><br><span class="line"><span class="comment"># =&gt; a slash and a t: \t</span></span><br><span class="line"><span class="variable">$unescaped</span> = <span class="string">&#x27;a slash and a t: \t&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="多行-Multi-line"><a href="#多行-Multi-line" class="headerlink" title="多行 Multi-line"></a>多行 Multi-line</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="comment">// 未插值的多行</span></span><br><span class="line"><span class="variable">$nowdoc</span> = <span class="string">&lt;&lt;&lt;&#x27;END&#x27;</span></span><br><span class="line"><span class="string">Multi line string</span></span><br><span class="line"><span class="string">$str</span></span><br><span class="line"><span class="string">END</span>;</span><br><span class="line"><span class="comment">// 将执行字符串插值</span></span><br><span class="line"><span class="variable">$heredoc</span> = <span class="string">&lt;&lt;&lt;END</span></span><br><span class="line"><span class="string">Multi line</span></span><br><span class="line"><span class="string"><span class="subst">$str</span></span></span><br><span class="line"><span class="string">END</span>;</span><br></pre></td></tr></table></figure><h3 id="操作-Manipulation"><a href="#操作-Manipulation" class="headerlink" title="操作 Manipulation"></a>操作 Manipulation</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$s</span> = <span class="string">&quot;Hello Phper&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);       <span class="comment"># =&gt; 11</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="number">0</span>, <span class="number">3</span>); <span class="comment"># =&gt; Hel</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="number">1</span>);    <span class="comment"># =&gt; ello Phper</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, -<span class="number">4</span>, <span class="number">3</span>);<span class="comment"># =&gt; hpe</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$s</span>);   <span class="comment"># =&gt; HELLO PHPER</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strtolower</span>(<span class="variable">$s</span>);   <span class="comment"># =&gt; hello phper</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strpos</span>(<span class="variable">$s</span>, <span class="string">&quot;l&quot;</span>);      <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$s</span>, <span class="string">&quot;L&quot;</span>)); <span class="comment"># =&gt; false</span></span><br></pre></td></tr></table></figure><p>另见: <a href="https://www.php.net/manual/en/ref.strings.php">字符串函数</a></p><h2 id="PHP-数组"><a href="#PHP-数组" class="headerlink" title="PHP 数组"></a>PHP 数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a1</span> = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>]</span><br><span class="line"><span class="variable">$a2</span> = <span class="keyword">array</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="variable">$a3</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;apple,pear,peach&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="混合-int-和-string-键"><a href="#混合-int-和-string-键" class="headerlink" title="混合 int 和 string 键"></a>混合 int 和 string 键</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;foo&quot;</span> =&gt; <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bar&quot;</span> =&gt; <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="number">100</span>   =&gt; -<span class="number">100</span>,</span><br><span class="line">    -<span class="number">100</span>  =&gt; <span class="number">100</span>,</span><br><span class="line">);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>);</span><br></pre></td></tr></table></figure><h4 id="短数组语法"><a href="#短数组语法" class="headerlink" title="短数组语法"></a>短数组语法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&quot;foo&quot;</span> =&gt; <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bar&quot;</span> =&gt; <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="多阵列"><a href="#多阵列" class="headerlink" title="多阵列"></a>多阵列</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$multiArray</span> = [ </span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$multiArray</span>[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$multiArray</span>[<span class="number">0</span>][<span class="number">1</span>]) <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$multiArray</span>[<span class="number">0</span>][<span class="number">2</span>]) <span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure><h3 id="多类型"><a href="#多类型" class="headerlink" title="多类型"></a>多类型</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;foo&quot;</span> =&gt; <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="number">42</span>    =&gt; <span class="number">24</span>,</span><br><span class="line">    <span class="string">&quot;multi&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">         <span class="string">&quot;dim&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">             <span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;foo&quot;</span></span><br><span class="line">         )</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment"># =&gt; string(3) &quot;bar&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>[<span class="string">&quot;foo&quot;</span>]);</span><br><span class="line"><span class="comment"># =&gt; int(24)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>[<span class="number">42</span>]);    </span><br><span class="line"><span class="comment"># =&gt;  string(3) &quot;foo&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>[<span class="string">&quot;multi&quot;</span>][<span class="string">&quot;dim&quot;</span>][<span class="string">&quot;a&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">5</span> =&gt; <span class="number">1</span>, <span class="number">12</span> =&gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable">$arr</span>[] = <span class="number">56</span>;      <span class="comment">// 附加</span></span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&quot;x&quot;</span>] = <span class="number">42</span>;   <span class="comment">// 用键添加</span></span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$arr</span>);       <span class="comment">// 排序</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$arr</span>[<span class="number">5</span>]);   <span class="comment">// 消除</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$arr</span>);      <span class="comment">// 移除所有</span></span><br></pre></td></tr></table></figure><p>查看: <a href="https://www.php.net/manual/en/ref.array.php">数组函数</a></p><h3 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="variable">$count</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i:<span class="subst">&#123;$i&#125;</span>, v:<span class="subst">&#123;$array[$i]&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="价值迭代"><a href="#价值迭代" class="headerlink" title="价值迭代"></a>价值迭代</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span> = <span class="keyword">array</span>(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$colors</span> <span class="keyword">as</span> <span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Do you like <span class="subst">$color</span>?\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键迭代"><a href="#关键迭代" class="headerlink" title="关键迭代"></a>关键迭代</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">&quot;foo&quot;</span> =&gt; <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;bar&quot;</span> =&gt; <span class="string">&quot;foo&quot;</span>];</span><br><span class="line"><span class="keyword">foreach</span> ( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;key: &quot;</span> . <span class="variable">$key</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;val: <span class="subst">&#123;$arr[$key]&#125;</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="串联阵列"><a href="#串联阵列" class="headerlink" title="串联阵列"></a>串联阵列</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// PHP 7.4 以后</span></span><br><span class="line"><span class="comment"># =&gt; [1, 2, 3, 4]</span></span><br><span class="line"><span class="variable">$result</span> = [...<span class="variable">$a</span>, ...<span class="variable">$b</span>];</span><br></pre></td></tr></table></figure><h3 id="Into-函数"><a href="#Into-函数" class="headerlink" title="Into 函数"></a>Into 函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment"># =&gt; 1</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment"># =&gt; 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">foo</span>(...<span class="variable">$array</span>);</span><br></pre></td></tr></table></figure><h3 id="Splat运算符"><a href="#Splat运算符" class="headerlink" title="Splat运算符"></a>Splat运算符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$first</span>, ...<span class="variable">$other</span></span>) </span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="variable">$first</span>); <span class="comment"># =&gt; a</span></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$other</span>); <span class="comment"># =&gt; [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">foo</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> <span class="comment">/*, ...*/</span> );</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$first</span>, <span class="keyword">string</span> ...<span class="variable">$other</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="PHP-运算符"><a href="#PHP-运算符" class="headerlink" title="PHP 运算符"></a>PHP 运算符</h2><h3 id="算术"><a href="#算术" class="headerlink" title="算术"></a>算术</h3><table><thead><tr><th align="left">:-</th><th>-</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td>添加</td></tr><tr><td align="left"><code>-</code></td><td>减法</td></tr><tr><td align="left"><code>*</code></td><td>乘法</td></tr><tr><td align="left"><code>/</code></td><td>分配</td></tr><tr><td align="left"><code>%</code></td><td>取模</td></tr><tr><td align="left"><code>**</code></td><td>求幂</td></tr></tbody></table><h3 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h3><table><thead><tr><th align="left">:-</th><th>-</th></tr></thead><tbody><tr><td align="left"><code>a += b</code></td><td>如同 <code>a = a + b</code></td></tr><tr><td align="left"><code>a -= b</code></td><td>如同 <code>a = a – b</code></td></tr><tr><td align="left"><code>a *= b</code></td><td>如同 <code>a = a * b</code></td></tr><tr><td align="left"><code>a /= b</code></td><td>如同 <code>a = a / b</code></td></tr><tr><td align="left"><code>a %= b</code></td><td>如同 <code>a = a % b</code></td></tr></tbody></table><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table><thead><tr><th align="left">:-</th><th>-</th></tr></thead><tbody><tr><td align="left"><code>==</code></td><td>平等的</td></tr><tr><td align="left"><code>===</code></td><td>完全相同的</td></tr><tr><td align="left"><code>!=</code></td><td>不相等</td></tr><tr><td align="left"><code>&lt;&gt;</code></td><td>不相等</td></tr><tr><td align="left"><code>!==</code></td><td>不相同</td></tr><tr><td align="left"><code>&lt;</code></td><td>少于</td></tr><tr><td align="left"><code>&gt;</code></td><td>比…更棒</td></tr><tr><td align="left"><code>&lt;=</code></td><td>小于或等于</td></tr><tr><td align="left"><code>&gt;=</code></td><td>大于或等于</td></tr><tr><td align="left"><code>&lt;=&gt;</code></td><td>小于&#x2F;等于&#x2F;大于</td></tr></tbody></table><h3 id="逻辑的"><a href="#逻辑的" class="headerlink" title="逻辑的"></a>逻辑的</h3><table><thead><tr><th align="left">:-</th><th>-</th></tr></thead><tbody><tr><td align="left"><code>and</code></td><td>和</td></tr><tr><td align="left"><code>or</code></td><td>或者</td></tr><tr><td align="left"><code>xor</code></td><td>独家或</td></tr><tr><td align="left"><code>!</code></td><td>不是</td></tr><tr><td align="left"><code>&amp;&amp;</code></td><td>和</td></tr><tr><td align="left"><code>||</code></td><td>或者</td></tr></tbody></table><h3 id="算术-1"><a href="#算术-1" class="headerlink" title="算术"></a>算术</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算术</span></span><br><span class="line"><span class="variable">$sum</span>        = <span class="number">1</span> + <span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="variable">$difference</span> = <span class="number">2</span> - <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="variable">$product</span>    = <span class="number">2</span> * <span class="number">2</span>; <span class="comment">// 4</span></span><br><span class="line"><span class="variable">$quotient</span>   = <span class="number">2</span> / <span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 速记算术</span></span><br><span class="line"><span class="variable">$num</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$num</span> += <span class="number">1</span>;       <span class="comment">// 将 $num 增加 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>++;     <span class="comment">// 打印 1（评估后的增量）</span></span><br><span class="line"><span class="keyword">echo</span> ++<span class="variable">$num</span>;     <span class="comment">// 打印 3（评估前的增量）</span></span><br><span class="line"><span class="variable">$num</span> /= <span class="variable">$float</span>;  <span class="comment">// 将商除并分配给 $num</span></span><br></pre></td></tr></table></figure><h3 id="按位"><a href="#按位" class="headerlink" title="按位"></a>按位</h3><table><thead><tr><th align="left">:-</th><th>-</th></tr></thead><tbody><tr><td align="left"><code>&amp;</code></td><td>和</td></tr><tr><td align="left">&#96;</td><td>&#96;</td></tr><tr><td align="left"><code>^</code></td><td>异或（异或）</td></tr><tr><td align="left"><code>~</code></td><td>不是</td></tr><tr><td align="left"><code>&lt;&lt;</code></td><td>左移</td></tr><tr><td align="left"><code>&gt;&gt;</code></td><td>右移</td></tr></tbody></table><h2 id="PHP-条件"><a href="#PHP-条件" class="headerlink" title="PHP 条件"></a>PHP 条件</h2><h3 id="If-elseif-else"><a href="#If-elseif-else" class="headerlink" title="If elseif else"></a>If elseif else</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> &gt; <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a is bigger than b&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$a</span> == <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a is equal to b&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a is smaller than b&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$x</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;it&#x27;s zero&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;two&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;three&#x27;</span>:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; Does</span></span><br><span class="line"><span class="keyword">print</span> (<span class="literal">false</span> ? <span class="string">&#x27;Not&#x27;</span> : <span class="string">&#x27;Does&#x27;</span>);</span><br><span class="line"><span class="variable">$x</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment"># =&gt; Does</span></span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$x</span> ?: <span class="string">&#x27;Does&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;Does print&#x27;</span>;</span><br><span class="line"><span class="comment"># =&gt; a is unsert</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> ?? <span class="string">&#x27;a is unset&#x27;</span>;</span><br><span class="line"><span class="comment"># =&gt; print</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span> ?? <span class="string">&#x27;b is unset&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$statusCode</span> = <span class="number">500</span>;</span><br><span class="line"><span class="variable">$message</span> = <span class="keyword">match</span>(<span class="variable">$statusCode</span>) &#123;</span><br><span class="line">  <span class="number">200</span>, <span class="number">300</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">  <span class="number">400</span> =&gt; <span class="string">&#x27;未找到&#x27;</span>,</span><br><span class="line">  <span class="number">500</span> =&gt; <span class="string">&#x27;服务器错误&#x27;</span>,</span><br><span class="line">  <span class="keyword">default</span> =&gt; <span class="string">&#x27;已知状态码&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$message</span>; <span class="comment"># =&gt; 服务器错误</span></span><br></pre></td></tr></table></figure><p>查看: <a href="https://www.php.net/manual/en/control-structures.match.php">Match</a></p><h3 id="匹配表达式"><a href="#匹配表达式" class="headerlink" title="匹配表达式"></a>匹配表达式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="number">23</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">match</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable">$age</span> &gt;= <span class="number">65</span> =&gt; <span class="string">&#x27;senior&#x27;</span>,</span><br><span class="line">    <span class="variable">$age</span> &gt;= <span class="number">25</span> =&gt; <span class="string">&#x27;adult&#x27;</span>,</span><br><span class="line">    <span class="variable">$age</span> &gt;= <span class="number">18</span> =&gt; <span class="string">&#x27;young adult&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span> =&gt; <span class="string">&#x27;kid&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment"># =&gt; young adult</span></span><br></pre></td></tr></table></figure><h2 id="PHP-循环"><a href="#PHP-循环" class="headerlink" title="PHP 循环"></a>PHP 循环</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment"># =&gt; 12345</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment"># =&gt; 12345</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>++;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="for-i-循环"><a href="#for-i-循环" class="headerlink" title="for i 循环"></a>for i 循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; 12345</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-跳出循环"><a href="#break-跳出循环" class="headerlink" title="break 跳出循环"></a>break 跳出循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; 123</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue-继续"><a href="#continue-继续" class="headerlink" title="continue 继续"></a>continue 继续</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; 1235</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;foo&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;bar&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="comment"># =&gt; 12</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$k</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$k</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: <a href="#%E5%85%B3%E9%94%AE%E8%BF%AD%E4%BB%A3">Array iteration</a></p><h2 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params"><span class="variable">$x</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$x</span> * <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">square</span>(<span class="number">4</span>);  <span class="comment"># =&gt; 16</span></span><br></pre></td></tr></table></figure><h3 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本返回类型声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>): <span class="title">float</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_item</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getC</span>(<span class="params"></span>): <span class="title">C</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> C; &#125;</span><br></pre></td></tr></table></figure><h3 id="可空返回类型"><a href="#可空返回类型" class="headerlink" title="可空返回类型"></a>可空返回类型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 PHP 7.1 中可用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nullOrString</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$v</span></span>) : ?<span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$v</span> % <span class="number">2</span> ? <span class="string">&quot;odd&quot;</span> : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">nullOrString</span>(<span class="number">3</span>);       <span class="comment"># =&gt; odd</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">nullOrString</span>(<span class="number">4</span>));  <span class="comment"># =&gt; NULL</span></span><br></pre></td></tr></table></figure><p>查看: <a href="https://www.php.net/manual/en/migration71.new-features.php">Nullable types</a></p><h3 id="无效函数"><a href="#无效函数" class="headerlink" title="无效函数"></a>无效函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 PHP 7.1 中可用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">voidFunction</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">voidFunction</span>();  <span class="comment"># =&gt; Hello</span></span><br></pre></td></tr></table></figure><h3 id="变量函数"><a href="#变量函数" class="headerlink" title="变量函数"></a>变量函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"><span class="variable">$arg</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;In bar(); arg: &#x27;<span class="subst">$arg</span>&#x27;.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="variable">$func</span>(<span class="string">&#x27;test&#x27;</span>); <span class="comment"># =&gt; In bar(); arg: test</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Hello %s\r\n&quot;</span>, <span class="variable">$name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;World&#x27;</span>); <span class="comment"># =&gt; Hello World</span></span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;PHP&#x27;</span>);   <span class="comment"># =&gt; Hello PHP</span></span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params"><span class="variable">$x</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$x</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$x</span>&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">recursion</span>(<span class="variable">$x</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">recursion</span>(<span class="number">1</span>);  <span class="comment"># =&gt; 1234</span></span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coffee</span>(<span class="params"><span class="variable">$type</span> = <span class="string">&quot;cappuccino&quot;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Making a cup of <span class="subst">$type</span>.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># =&gt; 制作一杯卡布奇诺</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">coffee</span>();</span><br><span class="line"><span class="comment"># =&gt; 制作一杯</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">coffee</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="comment"># =&gt; 制作一杯浓缩咖啡</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">coffee</span>(<span class="string">&quot;espresso&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$y</span> = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$fn1</span> = <span class="function"><span class="keyword">fn</span>(<span class="params"><span class="variable">$x</span></span>) =&gt;</span> <span class="variable">$x</span> + <span class="variable">$y</span>;</span><br><span class="line"><span class="comment">// 相当于按值使用 $y：</span></span><br><span class="line"><span class="variable">$fn2</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$y</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$x</span> + <span class="variable">$y</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$fn1</span>(<span class="number">5</span>);   <span class="comment"># =&gt; 6</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$fn2</span>(<span class="number">5</span>);   <span class="comment"># =&gt; 6</span></span><br></pre></td></tr></table></figure><h2 id="PHP-类"><a href="#PHP-类" class="headerlink" title="PHP 类"></a>PHP 类</h2><h3 id="构造函数-Constructor"><a href="#构造函数-Constructor" class="headerlink" title="构造函数 Constructor"></a>构造函数 Constructor</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Name: &quot;</span> . <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$alex</span> = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alex&quot;</span>);</span><br><span class="line"><span class="variable">$alex</span>-&gt;<span class="keyword">print</span>();    <span class="comment"># =&gt; Name: Alex</span></span><br></pre></td></tr></table></figure><h3 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承 Inheritance"></a>继承 Inheritance</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendClass</span> <span class="keyword">extends</span> <span class="title">SimpleClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 重新定义父方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Extending class\n&quot;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">displayVar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$extended</span> = <span class="keyword">new</span> <span class="title class_">ExtendClass</span>();</span><br><span class="line"><span class="variable">$extended</span>-&gt;<span class="title function_ invoke__">displayVar</span>();</span><br></pre></td></tr></table></figure><h3 id="类变量-Classes-variables"><a href="#类变量-Classes-variables" class="headerlink" title="类变量 Classes variables"></a>类变量 Classes variables</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MY_CONST</span>         = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$staticVar</span>      = <span class="string">&#x27;static&#x27;</span>;</span><br><span class="line">    <span class="comment">// 可见度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$var1</span>    = <span class="string">&#x27;pubs&#x27;</span>;</span><br><span class="line">    <span class="comment">// 仅限类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$var2</span>   = <span class="string">&#x27;pris&#x27;</span>;</span><br><span class="line">    <span class="comment">// 类和子类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$var3</span> = <span class="string">&#x27;pros&#x27;</span>;</span><br><span class="line">    <span class="comment">// 类和子类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var6</span>        = <span class="string">&#x27;pro&#x27;</span>;</span><br><span class="line">    <span class="comment">// 仅限类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var7</span>          = <span class="string">&#x27;pri&#x27;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title class_">MyClass</span>::<span class="variable constant_">MY_CONST</span>;   <span class="comment"># =&gt; value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">MyClass</span>::<span class="variable">$staticVar</span>; <span class="comment"># =&gt; static</span></span><br></pre></td></tr></table></figure><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 对象被视为字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$property</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 与 __construct() 相反</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Destroying&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Foo</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls</span> <span class="keyword">implements</span> <span class="title">Foo</span>, <span class="title">Bar</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="各种各样的"><a href="#各种各样的" class="headerlink" title="各种各样的"></a>各种各样的</h2><h3 id="基本错误处理"><a href="#基本错误处理" class="headerlink" title="基本错误处理"></a>基本错误处理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 做一点事</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Always print!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP-8-0-中的异常"><a href="#PHP-8-0-中的异常" class="headerlink" title="PHP 8.0 中的异常"></a>PHP 8.0 中的异常</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight php"><figcaption><span>&#123;.wrap&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$nullableValue</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$value</span> = <span class="variable">$nullableValue</span> ?? <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span>) &#123; <span class="comment">// 变量是可选的</span></span><br><span class="line">    <span class="comment">// 处理我的异常</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;print me!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 做一点事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$condition</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$condition</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&#x27;bala&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (MyException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理我的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nullsafe-运算符"><a href="#Nullsafe-运算符" class="headerlink" title="Nullsafe 运算符"></a>Nullsafe 运算符</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 PHP 8.0.0 开始，这一行：</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$repo</span>?-&gt;<span class="title function_ invoke__">getUser</span>(<span class="number">5</span>)?-&gt;name;</span><br><span class="line"><span class="comment">// 相当于下面的代码：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$repo</span>)) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$repository</span>-&gt;<span class="title function_ invoke__">getUser</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$user</span>)) &#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另见: <a href="https://wiki.php.net/rfc/nullsafe_operator">Nullsafe 运算符</a></p><h3 id="常用表达"><a href="#常用表达" class="headerlink" title="常用表达"></a>常用表达</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Visit jaywcjlove.github.io&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/qu/i&quot;</span>, <span class="variable">$str</span>); <span class="comment"># =&gt; 1</span></span><br></pre></td></tr></table></figure><p>查看: <a href="./regex.md#php%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">PHP中的正则表达式</a></p><h3 id="fopen-模式"><a href="#fopen-模式" class="headerlink" title="fopen() 模式"></a>fopen() 模式</h3><table><thead><tr><th align="left">:-</th><th>-</th></tr></thead><tbody><tr><td align="left"><code>r</code></td><td>读</td></tr><tr><td align="left"><code>r+</code></td><td>读写，前置</td></tr><tr><td align="left"><code>w</code></td><td>写入，截断</td></tr><tr><td align="left"><code>w+</code></td><td>读写，截断</td></tr><tr><td align="left"><code>a</code></td><td>写，追加</td></tr><tr><td align="left"><code>a+</code></td><td>读写，追加</td></tr></tbody></table><h3 id="运行时定义的常量"><a href="#运行时定义的常量" class="headerlink" title="运行时定义的常量"></a>运行时定义的常量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;CURRENT_DATE&quot;</span>, <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>));</span><br><span class="line"><span class="comment">// 一种可能的表示</span></span><br><span class="line"><span class="keyword">echo</span> CURRENT_DATE;   <span class="comment"># =&gt; 2021-01-05</span></span><br><span class="line"><span class="comment"># =&gt; CURRENT_DATE is: 2021-01-05</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;CURRENT_DATE is: &#x27;</span> . CURRENT_DATE; </span><br></pre></td></tr></table></figure><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://www.php.net/manual/zh/index.php">PHP 官方中文文档</a> <em>(php.net)</em></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/php-cn/">Learn X in Y minutes</a> <em>(learnxinyminutes.com)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP-备忘清单&quot;&gt;&lt;a href=&quot;#PHP-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;PHP 备忘清单&quot;&gt;&lt;/a&gt;PHP 备忘清单&lt;/h1&gt;&lt;p&gt;这份 &lt;a href=&quot;https://www.php.net/manual/zh/inde</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    <category term="PHP" scheme="https://tdcqcx.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JQuery 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/jquery/"/>
    <id>https://tdcqcx.github.io/2025/01/08/jquery/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-备忘清单"><a href="#jQuery-备忘清单" class="headerlink" title="jQuery 备忘清单"></a>jQuery 备忘清单</h1><p><a href="https://jquery.com/">jQuery</a> 备忘单对于初学者和有经验的开发人员都是很好的参考</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="引入-jQuery"><a href="#引入-jQuery" class="headerlink" title="引入 jQuery"></a>引入 jQuery</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h4 id="官方-CDN"><a href="#官方-CDN" class="headerlink" title="官方 CDN"></a>官方 CDN</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">methodOrFunction</span>();</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();  </span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;body&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="jQuery-文档准备就绪"><a href="#jQuery-文档准备就绪" class="headerlink" title="jQuery 文档准备就绪"></a>jQuery 文档准备就绪</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 在加载 DOM 后运行</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;DOM fully loaded!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 在加载 DOM 后运行</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;DOM fully loaded!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    $(<span class="string">&quot;:button&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;selector1, selector2 ...selectorn&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><ul><li><a href="https://api.jquery.com/all-selector/">*</a> <em>选择所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/class-selector/">.class</a> <em>选择具有给定类的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/element-selector/">element</a> <em>选择具有给定标签名称的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/id-selector/">#id</a> <em>选择具有给定 id 属性的单个元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/hidden-selector/">:hidden</a> <em>选择所有隐藏的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/visible-selector/">:visible</a> <em>选择所有可见的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/contains-selector/">:contains()</a> <em>选择包含指定文本的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/empty-selector/">:empty</a> <em>选择所有没有子元素的元素(包括文本节点)</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/has-selector/">:has()</a> <em>选择至少包含一个与指定选择器匹配的元素的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/parent-selector/">:parent</a> <em>选择具有至少一个子节点(元素或文本)的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/child-selector/">parent &gt; child</a> <em>选择由父元素指定的子元素指定的所有直接子元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/descendant-selector/">ancestor descendant</a> <em>选择作为给定祖先的后代的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/next-adjacent-Selector/">prev + next</a> <em>选择所有与 next 匹配且紧接在其前面的同级 prev 的下一个元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/next-siblings-selector/">prev ~ siblings</a> <em>选择 prev 元素之后的所有同级元素，具有相同的父元素，并匹配过滤同级选择器</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><ul><li><a href="https://api.jquery.com/animated-selector/">:animated</a> <em>在运行选择器时选择动画进度中的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/eq-selector/">:eq()</a> <em>选择匹配集中索引 n 处的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/even-selector/">:even</a> <em>选择偶数元素，索引为零。 另见：奇数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/first-selector/">:first</a> <em>选择第一个匹配的 DOM 元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/gt-selector/">:gt()</a> <em>选择匹配集中索引大于索引的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/header-selector/">:header</a> <em>选择所有标题元素，如 h1、h2、h3 等</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/lang-selector/">:lang()</a> <em>选择指定语言的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/last-selector/">:last</a> <em>选择最后一个匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/lt-selector/">:lt()</a> <em>选择匹配集中索引小于索引的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/not-selector/">:not()</a> <em>选择与给定选择器不匹配的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/odd-selector/">:odd</a> <em>选择奇数元素，索引为零。 另见：甚至</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/root-selector/">:root</a> <em>选择作为文档根的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/target-selector/">:target</a> <em>选择由文档的 URI 的片段标识符指示的目标元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><a href="https://api.jquery.com/attribute-contains-prefix-selector/">[name|&#x3D;”value”]</a> <em>选择具有指定属性且值等于给定字符串或以该字符串开头后跟连字符 (-) 的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/attribute-contains-selector/">[name*&#x3D;”value”]</a> <em>选择具有指定属性且值包含给定子字符串的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/attribute-contains-word-selector/">[name~&#x3D;”value”]</a> <em>选择具有指定属性的元素，其值包含给定单词，由空格分隔</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/attribute-ends-with-selector/">[name$&#x3D;”value”]</a> <em>选择具有指定属性且值恰好以给定字符串结尾的元素。 比较区分大小写</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/attribute-equals-selector/">[name&#x3D;”value”]</a> <em>选择具有指定属性且值恰好等于特定值的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/attribute-not-equal-selector/">[name!&#x3D;”value”]</a> <em>选择不具有指定属性或具有指定属性但不具有特定值的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/attribute-starts-with-selector/">[name^&#x3D;”value”]</a> <em>选择具有指定属性且值恰好以给定字符串开头的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/has-attribute-selector/">[name]</a> <em>选择具有指定属性和任意值的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/multiple-attribute-selector/">[name&#x3D;”value”]</a> <em>匹配匹配所有指定属性过滤器的元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="子过滤器"><a href="#子过滤器" class="headerlink" title="子过滤器"></a>子过滤器</h3><ul><li><a href="https://api.jquery.com/first-child-selector/">:first-child</a> <em>选择作为其父元素的第一个子元素的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/first-of-type-selector/">:first-of-type</a> <em>选择具有相同元素名称的兄弟姐妹中第一个的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/last-child-selector/">:last-child</a> <em>选择作为其父元素的最后一个子元素的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/last-of-type-selector/">:last-of-type</a> <em>选择具有相同元素名称的兄弟中最后一个的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/nth-child-selector/">:nth-child()</a> <em>选择作为其父元素的第 n 个子元素的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/nth-last-child-selector/">:nth-last-child()</a> <em>选择作为其父元素的第 n 个子元素的所有元素，从最后一个元素到第一个元素计数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/nth-last-of-type-selector/">:nth-last-of-type()</a> <em>选择所有元素，这些元素是其父元素的第 n 个子元素，相对于具有相同元素名称的兄弟元素，从最后一个元素到第一个元素计数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/nth-of-type-selector/">:nth-of-type()</a> <em>选择所有元素，这些元素是其父元素相对于具有相同元素名称的兄弟元素的第 n 个子元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/only-child-selector/">:only-child</a> <em>选择作为其父元素的唯一子元素的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/only-of-type-selector/">:only-of-type()</a> <em>选择所有没有同名元素的元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h3><ul><li><a href="https://api.jquery.com/button-selector/">:button</a> <em>选择所有按钮元素和按钮类型的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/checkbox-selector/">:checkbox</a> <em>选择复选框类型的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/checked-selector/">:checked</a> <em>匹配所有选中或选择的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/disabled-selector/">:disabled</a> <em>选择所有禁用的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/enabled-selector/">:enabled</a> <em>选择所有启用的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/focus-selector/">:focus</a> <em>如果当前获得焦点，则选择元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/file-selector/">:file</a> <em>选择类型文件的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/image-selector/">:image</a> <em>选择图像类型的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/input-selector/">:input</a> <em>选择所有输入、文本区域、选择和按钮元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/password-selector/">:password</a> <em>选择密码类型的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/radio-selector/">:radio</a> <em>选择无线电类型的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/reset-selector/">:reset</a> <em>选择重置类型的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/selected-selector/">:selected</a> <em>选择所有选中的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/submit-selector/">:submit</a> <em>选择提交类型的所有元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/text-selector/">:text</a> <em>选择文本类型的所有输入元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h2 id="jQuery-属性"><a href="#jQuery-属性" class="headerlink" title="jQuery 属性"></a>jQuery 属性</h2><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;h2&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&#x27;gray&#x27;</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="string">&#x27;24px&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="jQuery-添加类"><a href="#jQuery-添加类" class="headerlink" title="jQuery 添加类"></a>jQuery 添加类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.button&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>); </span><br></pre></td></tr></table></figure><h4 id="jQuery-移除类"><a href="#jQuery-移除类" class="headerlink" title="jQuery 移除类"></a>jQuery 移除类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> e = evt.<span class="property">currentTarget</span>;</span><br><span class="line">   $(e).<span class="title function_">removeClass</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="jQuery-切换类"><a href="#jQuery-切换类" class="headerlink" title="jQuery 切换类"></a>jQuery 切换类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.choice&#x27;</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;highlighted&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><ul><li><a href="https://api.jquery.com/attr/">.attr()</a> <em>获取匹配元素集中第一个元素的属性值</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/prop/">.prop()</a> <em>获取匹配元素集中第一个元素的属性值</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/removeAttr/">.removeAttr()</a> <em>从匹配元素集中的每个元素中删除一个属性</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/removeProp/">.removeProp()</a> <em>删除匹配元素集的属性</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/val/">.val()</a> <em>获取匹配元素集中第一个元素的当前值</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><ul><li><a href="https://api.jquery.com/jQuery.data/">jQuery.data()</a> <em>存储与指定元素关联的任意数据。 返回设置的值</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/data/">.data()</a> <em>存储与匹配元素关联的任意数据</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.hasData/">jQuery.hasData()</a> <em>确定一个元素是否有任何与之关联的 jQuery 数据</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.removeData/">jQuery.removeData()</a> <em>删除以前存储的数据</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/removeData/">.removeData()</a> <em>删除以前存储的数据</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><a href="https://api.jquery.com/addClass/">.addClass()</a> <em>将指定的类添加到匹配元素集中的每个元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/hasClass/">.hasClass()</a> <em>确定是否有任何匹配的元素被分配给给定的类</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/removeClass/">.removeClass()</a> <em>从匹配元素集中的每个元素中删除单个类、多个类或所有类</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/toggleClass/">.toggleClass()</a> <em>根据类的存在或状态参数的值，从匹配元素集中的每个元素添加或删除一个或多个类</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/css/">.css()</a> <em>获取匹配元素集中第一个元素的计算样式属性</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.cssHooks/">jQuery.cssHooks</a> <em>直接连接到 jQuery 以覆盖特定 CSS 属性的检索或设置方式、标准化 CSS 属性命名或创建自定义属性</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.cssNumber/">jQuery.cssNumber</a> <em>包含所有可以在没有单位的情况下使用的 CSS 属性的对象。<code>.css()</code> 方法使用此对象来查看它是否可以将 px 附加到无单位值</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.escapeSelector/">jQuery.escapeSelector()</a> <em>转义任何在 CSS 选择器中具有特殊含义的字符</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="Dimensions"><a href="#Dimensions" class="headerlink" title="Dimensions"></a>Dimensions</h3><ul><li><a href="https://api.jquery.com/height/">.height()</a> <em>获取匹配元素集中第一个元素的当前计算高度</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/innerHeight/">.innerHeight()</a> <em>获取匹配元素集中第一个元素的当前计算高度，包括填充但不包括边框</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/innerWidth/">.innerWidth()</a> <em>获取匹配元素集中第一个元素的当前计算内部宽度，包括填充但不包括边框</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/outerHeight/">.outerHeight()</a> <em>获取匹配元素集中第一个元素的当前计算外部高度(包括填充、边框和可选的边距)</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/outerWidth/">.outerWidth()</a> <em>获取匹配元素集中第一个元素的当前计算外部宽度(包括填充、边框和可选的边距)</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/width/">.width()</a> <em>获取匹配元素集中第一个元素的当前计算宽度</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h3><ul><li><a href="https://api.jquery.com/offset/">.offset()</a> <em>获取匹配元素集中第一个元素相对于文档的当前坐标</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/offsetParent/">.offsetParent()</a> <em>获取定位的最近的祖先元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/position/">.position()</a> <em>获取匹配元素集中第一个元素相对于偏移父元素的当前坐标</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/scrollLeft/">.scrollLeft()</a> <em>获取匹配元素集中第一个元素的滚动条的当前水平位置</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/scrollTop/">.scrollTop()</a> <em>获取匹配元素集中第一个元素的滚动条的当前垂直位置，或为每个匹配元素设置滚动条的垂直位置</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h2 id="jQuery-操控"><a href="#jQuery-操控" class="headerlink" title="jQuery 操控"></a>jQuery 操控</h2><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><!--rehype:wrap-class=row-span-3--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;span&gt;Span.&lt;/span&gt;*/</span></span><br><span class="line">$(<span class="string">&#x27;span&#x27;</span>).<span class="title function_">after</span>(<span class="string">&#x27;&lt;p&gt;Paragraph.&lt;/p&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">/*&lt;span&gt;Span.&lt;/span&gt;&lt;p&gt;Paragraph.&lt;/p&gt;*/</span></span><br><span class="line"><span class="comment">/*&lt;span&gt;Span.&lt;/span&gt;*/</span></span><br><span class="line">$(<span class="string">&#x27;&lt;span&gt;Span.&lt;/span&gt;&#x27;</span>).<span class="title function_">replaceAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="comment">/*&lt;p&gt;Span.&lt;/p&gt;*/</span></span><br><span class="line"><span class="comment">/*&lt;span&gt;This is span.&lt;/span&gt;*/</span></span><br><span class="line">$(<span class="string">&#x27;span&#x27;</span>).<span class="title function_">wrap</span>(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">/*&lt;p&gt;&lt;span&gt;This is span.&lt;/span&gt;&lt;/p&gt;*/</span></span><br></pre></td></tr></table></figure><h3 id="复刻"><a href="#复刻" class="headerlink" title="复刻"></a>复刻</h3><ul><li><a href="https://api.jquery.com/clone/">.clone()</a> <em>创建匹配元素集的深层副本</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="DOM-插入，环绕"><a href="#DOM-插入，环绕" class="headerlink" title="DOM 插入，环绕"></a>DOM 插入，环绕</h3><ul><li><a href="https://api.jquery.com/wrap/">.wrap()</a> <em>在匹配元素集中的每个元素周围包装一个 HTML 结构</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/wrapAll/">.wrapAll()</a> <em>在匹配元素集中的所有元素周围包装一个 HTML 结构</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/wrapInner/">.wrapInner()</a> <em>围绕匹配元素集中每个元素的内容包装一个 HTML 结构</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="DOM-插入，内部"><a href="#DOM-插入，内部" class="headerlink" title="DOM 插入，内部"></a>DOM 插入，内部</h3><ul><li><a href="https://api.jquery.com/append/">.append()</a> <em>在匹配的元素集中，插入由参数指定的内容插入每个元素的末尾</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/appendTo/">.appendTo()</a> <em>将匹配元素集中的每个元素插入目标末端</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/html/">.html()</a> <em>在匹配元素集中获取第一个元素的HTML内容</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/prepend/">.prepend()</a> <em>插入由参数指定的内容插入匹配元素集中每个元素的开始</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/prependTo/">.prependTo()</a> <em>将匹配元素集中的每个元素插入目标开始</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/text/">.text()</a> <em>在匹配的元素集（包括其后代）中获取每个元素的组合文本内容</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="DOM-插入，外部"><a href="#DOM-插入，外部" class="headerlink" title="DOM 插入，外部"></a>DOM 插入，外部</h3><ul><li><a href="https://api.jquery.com/after/">.after()</a> <em>在匹配元素集中的每个元素之后，插入由参数指定的内容</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/before/">.before()</a> <em>在匹配元素集中的每个元素之前，插入由参数指定的内容</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/insertAfter/">.insertAfter()</a> <em>在目标之后插入匹配元素集中的每个元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/insertBefore/">.insertBefore()</a> <em>在目标之前插入匹配元素集中的每个元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="DOM-移除"><a href="#DOM-移除" class="headerlink" title="DOM 移除"></a>DOM 移除</h3><ul><li><a href="https://api.jquery.com/detach/">.detach()</a> <em>从DOM上删除一组匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/empty/">.empty()</a> <em>从DOM中删除一组匹配元素的所有子节点</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/remove/">.remove()</a> <em>从DOM上删除一组匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/unwrap/">.unwrap()</a> <em>从DOM上删除一组匹配元素的父母，将匹配的元素留在其位置</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="DOM-替换"><a href="#DOM-替换" class="headerlink" title="DOM 替换"></a>DOM 替换</h3><ul><li><a href="https://api.jquery.com/replaceAll/">.replaceAll()</a> <em>用匹配的元素集替换每个目标元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/replaceWith/">.replaceWith()</a> <em>用提供的新内容替换一组匹配元素中的每个元素，然后返回已删除的元素集</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h2 id="jQuery-遍历"><a href="#jQuery-遍历" class="headerlink" title="jQuery 遍历"></a>jQuery 遍历</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul><li><a href="https://api.jquery.com/eq/">.eq()</a> <em>将匹配的元素集减少到指定索引处的集合</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/filter/">.filter()</a> <em>将匹配的元素集减少到匹配选择器或传递函数测试的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/first/">.first()</a> <em>将匹配的元素集减少到集合中的第一个</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/has/">.has()</a> <em>将匹配的元素集减少到具有与选择器或DOM元素相匹配的后代的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/is/">.is()</a> <em>检查当前匹配的元素与选择器，元素或jQuery对象的元素集，如果至少其中一个元素与给定参数匹配，则返回true</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/last/">.last()</a> <em>将匹配的元素集减少到集合中的最后一个元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/map/">.map()</a> <em>将当前匹配的每个元素通过函数传递，从而产生包含返回值的新jQuery对象</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/not/">.not()</a> <em>从匹配元素集中删除元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/slice/">.slice()</a> <em>将匹配的元素集减少为由一系列索引指定的子集</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="杂项遍历"><a href="#杂项遍历" class="headerlink" title="杂项遍历"></a>杂项遍历</h3><ul><li><a href="https://api.jquery.com/add/">.add()</a> <em>创建一个新的jQuery对象，其中添加到匹配元素集中的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/addBack/">.addBack()</a> <em>将堆栈上的上一个元素添加到当前集合中，并由选择器进行过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/andSelf/">.andSelf()</a> <em>将堆栈上的先前元素添加到当前集合中</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/contents/">.contents()</a> <em>在一组匹配元素中获取每个元素的孩子，包括文本和评论节点</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/each/">.each()</a> <em>在jQuery对象上迭代，为每个匹配的元素执行一个函数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/end/">.end()</a> <em>结束当前链中最新的过滤操作，并将匹配元素集返回其先前状态</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="树遍历"><a href="#树遍历" class="headerlink" title="树遍历"></a>树遍历</h3><ul><li><a href="https://api.jquery.com/children/">.children()</a> <em>在一组匹配元素中获取每个元素的孩子，并被选择器进行过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/closest/">.closest()</a> <em>对于集合中的每个元素，通过测试元素本身并通过其祖先在DOM树中的祖先进行遍历来获取与选择器匹配的第一个元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/find/">.find()</a> <em>在当前匹配元素集中获取每个元素的后代，并由选择器，jQuery对象或元素过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/next/">.next()</a> <em>在匹配的元素集中，立即获取每个元素的兄弟姐妹。 如果提供了选择器，则仅在匹配该选择器的情况下才能检索下一个兄弟姐妹</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/nextAll/">.nextAll()</a> <em>在一组匹配元素中获取每个元素的所有以下兄弟姐妹，并由选择器进行过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/nextUntil/">.nextUntil()</a> <em>将每个元素的所有以下兄弟姐妹添加到，但不包括通过选择器，DOM节点或jQuery对象匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/parent/">.parent()</a> <em>在当前匹配元素集中获取每个元素的父，由选择器选择过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/parents/">.parents()</a> <em>在当前匹配元素集中获取每个元素的祖先，并被选择器进行过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/parentsUntil/">.parentsUntil()</a> <em>在当前匹配元素集中获取每个元素的祖先，直到但不包括由选择器，DOM节点或jQuery对象匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/prev/">.prev()</a> <em>在匹配元素集中获取每个元素的立即兄弟姐妹。 如果提供了选择器，则仅在匹配该选择器时才检索先前的同胞</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/prevAll/">.prevAll()</a> <em>在一组匹配元素中获取每个元素的所有先前兄弟姐妹，并由选择器进行过滤</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/prevUntil/">.prevUntil()</a> <em>将每个元素的所有先前兄弟姐妹添加到，但不包括由选择器，DOM节点或jQuery对象匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/siblings/">.siblings()</a> <em>在匹配的元素集中获取每个元素的兄弟姐妹，并被选择器进行过滤</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h2><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><!--rehype:wrap-class=row-span-6--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标事件“点击”</span></span><br><span class="line">$(<span class="string">&#x27;#menu-button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 键盘事件“键盘”</span></span><br><span class="line">$(<span class="string">&#x27;#textbox&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 滚动事件“滚动”</span></span><br><span class="line">$(<span class="string">&#x27;#menu-button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  $(event.<span class="property">currentTarget</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="方法链"><a href="#方法链" class="headerlink" title="方法链"></a>方法链</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu-btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">&#125;).<span class="title function_">on</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="防止事件"><a href="#防止事件" class="headerlink" title="防止事件"></a>防止事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="string">&quot;p&quot;</span> ).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"> event </span>) &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h3><ul><li><a href="https://api.jquery.com/error/">.error()</a> <em>将事件处理程序绑定到错误 JavaScript 事件</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/resize/">.resize()</a> <em>将事件处理程序绑定到调整大小的 JavaScript 事件，或在元素上触发该事件</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/scroll/">.scroll()</a> <em>将事件处理程序绑定到滚动 JavaScript 事件，或在元素上触发该事件</em> <!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="事件对象-1"><a href="#事件对象-1" class="headerlink" title="事件对象"></a>事件对象</h3><!--rehype:wrap-class=row-span-6--><ul><li><a href="https://api.jquery.com/event.currentTarget/">event.currentTarget</a> <em>事件冒泡阶段中的当前 DOM 元素</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.delegateTarget/">event.delegateTarget</a> <em>附加了当前调用的 jQuery 事件处理程序的元素</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.data/">event.data</a> <em>绑定当前正在执行的处理程序时传递给事件方法的可选数据对象</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.isDefaultPrevented/">event.isDefaultPrevented()</a> <em>返回是否曾在此事件对象上调用过 event.preventDefault()</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.isImmediatePropagationStopped/">event.isImmediatePropagationStopped()</a> <em>返回是否曾在此事件对象上调用过 event.stopImmediatePropagation()</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.isPropagationStopped/">event.isPropagationStopped()</a> <em>返回是否曾在此事件对象上调用过 event.stopPropagation()</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.metaKey/">event.metaKey</a> <em>指示事件触发时是否按下了 META 键</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.namespace/">event.namespace</a> <em>触发事件时指定的命名空间</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.pageX/">event.pageX</a> <em>鼠标相对于文档左边缘的位置</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.pageY/">event.pageY</a> <em>鼠标位置相对于文档的上边缘</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.preventDefault/">event.preventDefault()</a> <em>如果调用该方法，则不会触发事件的默认动作</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.relatedTarget/">event.relatedTarget</a> <em>事件中涉及的其他 DOM 元素（如果有）</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.result/">event.result</a> <em>由此事件触发的事件处理程序返回的最后一个值，除非该值未定义</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.stopImmediatePropagation/">event.stopImmediatePropagation()</a> <em>保持其余的处理程序不被执行，并防止事件在 DOM 树中向上冒泡</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.stopPropagation/">event.stopPropagation()</a> <em>防止事件在 DOM 树中向上冒泡，从而防止任何父处理程序收到事件通知</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.target/">event.target</a> <em>发起事件的 DOM 元素</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.timeStamp/">event.timeStamp</a> <em>浏览器创建事件的时间与 1970 年 1 月 1 日之间的毫秒差</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.type/">event.type</a> <em>描述事件的性质</em> <!--rehype:tooltips--></li><li><a href="https://api.jquery.com/event.which/">event.which</a> <em>对于键或鼠标事件，此属性指示按下的特定键或按钮</em> <!--rehype:tooltips--></li></ul><!--rehype:className=style-none--><h3 id="文档加载"><a href="#文档加载" class="headerlink" title="文档加载"></a>文档加载</h3><ul><li><a href="https://api.jquery.com/load-event/">.load()</a> <em>将事件处理程序绑定到加载 JavaScript 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/ready/">.ready()</a> <em>指定在 DOM 完全加载时执行的函数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/unload/">.unload()</a> <em>将事件处理程序绑定到卸载 JavaScript 事件</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="事件处理程序附件"><a href="#事件处理程序附件" class="headerlink" title="事件处理程序附件"></a>事件处理程序附件</h3><ul><li><a href="https://api.jquery.com/bind/">.bind()</a> <em>将处理程序附加到元素的事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/delegate/">.delegate()</a> <em>基于一组特定的根元素，将处理程序附加到现在或将来与选择器匹配的所有元素的一个或多个事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/die/">.die()</a> <em>从元素中删除先前使用 .live() 附加的事件处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/live/">.live()</a> <em>现在和将来为所有匹配当前选择器的元素附加一个事件处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/off/">.off()</a> <em>删除事件处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/on/">.on()</a> <em>将一个或多个事件的事件处理函数附加到所选元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/one/">.one()</a> <em>将处理程序附加到元素的事件。 每个事件类型的每个元素最多执行一次处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/trigger/">.trigger()</a> <em>执行附加到给定事件类型的匹配元素的所有处理程序和行为</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/triggerHandler/">.triggerHandler()</a> <em>执行附加到事件元素的所有处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/unbind/">.unbind()</a> <em>从元素中删除先前附加的事件处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/undelegate/">.undelegate()</a> <em>根据一组特定的根元素，从与当前选择器匹配的所有元素的事件中删除处理程序</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="形式事件"><a href="#形式事件" class="headerlink" title="形式事件"></a>形式事件</h3><ul><li><a href="https://api.jquery.com/blur/">.blur()</a> <em>将事件处理程序绑定到 blur JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/change/">.change()</a> <em>将事件处理程序绑定到更改 JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/focus/">.focus()</a> <em>将事件处理程序绑定到焦点 JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/focusin/">.focusin()</a> <em>将事件处理程序绑定到 focusin 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/focusout/">.focusout()</a> <em>将事件处理程序绑定到 focusout JavaScript 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/select/">.select()</a> <em>将事件处理程序绑定到 select JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/submit/">.submit()</a> <em>将事件处理程序绑定到提交 JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li><a href="https://api.jquery.com/keydown/">.keydown()</a> <em>将事件处理程序绑定到 keydown JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/keypress/">.keypress()</a> <em>将事件处理程序绑定到按键 JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/keyup/">.keyup()</a> <em>将事件处理程序绑定到 keyup JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul><li><a href="https://api.jquery.com/click/">.click()</a> <em>将事件处理程序绑定到 click JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/contextmenu/">.contextMenu()</a> <em>将事件处理程序绑定到 contextmenu JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/dblclick/">.dblclick()</a> <em>将事件处理程序绑定到 dblclick JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/hover/">.hover()</a> <em>将两个处理程序绑定到匹配的元素，当鼠标指针进入和离开元素时执行</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mousedown/">.mousedown()</a> <em>将事件处理程序绑定到 mousedown JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mouseenter/">.mouseenter()</a> <em>绑定要在鼠标进入元素时触发的事件处理程序，或在元素上触发该处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mouseleave/">.mouseleave()</a> <em>绑定要在鼠标离开元素时触发的事件处理程序，或在元素上触发该处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mousemove/">.mousemove()</a> <em>将事件处理程序绑定到 mousemove JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mouseout/">.mouseout()</a> <em>将事件处理程序绑定到 mouseout JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mouseover/">.mouseover()</a> <em>将事件处理程序绑定到 mouseover JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/mouseup/">.mouseup()</a> <em>将事件处理程序绑定到 mouseup JavaScript 事件，或在元素上触发该事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/toggle-event/">.toggle()</a> <em>将两个或多个处理程序绑定到匹配的元素，以在交替单击时执行</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h2 id="jQuery-Effects"><a href="#jQuery-Effects" class="headerlink" title="jQuery Effects"></a>jQuery Effects</h2><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu-button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// $(&#x27;#menu&#x27;).fadeIn(400, &#x27;swing&#x27;)</span></span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">fadeIn</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="淡出效果"><a href="#淡出效果" class="headerlink" title="淡出效果"></a>淡出效果</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu-button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// $(&#x27;#menu&#x27;).fadeOut(400, &#x27;swing&#x27;)</span></span><br><span class="line">  $(<span class="string">&#x27;#menu&#x27;</span>).<span class="title function_">fadeOut</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="基本-1"><a href="#基本-1" class="headerlink" title="基本"></a>基本</h3><ul><li><a href="https://api.jquery.com/hide/">.hide()</a> <em>隐藏匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/show/">.show()</a> <em>显示匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/toggle/">.toggle()</a> <em>显示或隐藏匹配的元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><ul><li><a href="https://api.jquery.com/slideDown/">.slideDown()</a> <em>以滑动方式显示匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/slideToggle/">.slideToggle()</a> <em>通过滑动显示或隐藏匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/slideUp/">.slideUp()</a> <em>通过滑动隐藏匹配的元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><ul><li><a href="https://api.jquery.com/animate/">.animate()</a> <em>执行一组 CSS 属性的自定义动画</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/clearQueue/">.clearQueue()</a> <em>从队列中删除所有尚未运行的项目</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/delay/">.delay()</a> <em>设置一个计时器来延迟队列中后续项目的执行</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/dequeue/">.dequeue()</a> <em>为匹配的元素执行队列上的下一个函数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.dequeue/">jQuery.dequeue()</a> <em>为匹配的元素执行队列上的下一个函数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/finish/">.finish()</a> <em>停止当前运行的动画，移除所有排队的动画，并完成匹配元素的所有动画</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.fx.interval/">jQuery.fx.interval</a> <em>动画触发的速率（以毫秒为单位）</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.fx.off/">jQuery.fx.off</a> <em>全局禁用所有动画</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.speed/">jQuery.speed</a> <em>创建一个对象，其中包含一组准备用于自定义动画定义的属性</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/queue/">.queue()</a> <em>显示要在匹配元素上执行的函数队列</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.queue/">jQuery.queue()</a> <em>显示要在匹配元素上执行的函数队列</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/stop/">.stop()</a> <em>停止匹配元素上当前运行的动画</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h3 id="衰退"><a href="#衰退" class="headerlink" title="衰退"></a>衰退</h3><ul><li><a href="https://api.jquery.com/fadeIn/">.fadeIn()</a> <em>通过将匹配的元素淡化为不透明来显示它们</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/fadeOut/">.fadeOut()</a> <em>通过将它们淡化为透明来隐藏匹配的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/fadeTo/">.fadeTo()</a> <em>调整匹配元素的不透明度</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/fadeToggle/">.fadeToggle()</a> <em>通过设置不透明度动画来显示或隐藏匹配的元素</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-3 style-none--><h2 id="jQuery-Ajax"><a href="#jQuery-Ajax" class="headerlink" title="jQuery Ajax"></a>jQuery Ajax</h2><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">action</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">method</span>,</span><br><span class="line">  <span class="attr">data</span>: $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>()</span><br><span class="line">&#125;).<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">server_data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span> + server_data);</span><br><span class="line">&#125;).<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params">jqXHR, status, err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail&quot;</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="全局-Ajax-事件处理程序"><a href="#全局-Ajax-事件处理程序" class="headerlink" title="全局 Ajax 事件处理程序"></a>全局 Ajax 事件处理程序</h3><ul><li><a href="https://api.jquery.com/ajaxComplete/">.ajaxComplete()</a> <em>注册要在 Ajax 请求完成时调用的处理程序。 这是一个 AjaxEvent</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/ajaxError/">.ajaxError()</a> <em>注册一个处理程序，当 Ajax 请求完成但出现错误时调用。 这是一个 Ajax 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/ajaxSend/">.ajaxSend()</a> <em>附加一个要在发送 Ajax 请求之前执行的函数。 这是一个 Ajax 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/ajaxStart/">.ajaxStart()</a> <em>注册一个处理程序，在第一个 Ajax 请求开始时调用。 这是一个 Ajax 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/ajaxStop/">.ajaxStop()</a> <em>注册一个处理程序，在所有 Ajax 请求完成时调用。 这是一个 Ajax 事件</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/ajaxSuccess/">.ajaxSuccess()</a> <em>附加一个要在 Ajax 请求成功完成时执行的函数。 这是一个 Ajax 事件</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><ul><li><a href="https://api.jquery.com/jQuery.param/">jQuery.param()</a> <em>创建适合在 URL 查询字符串或 Ajax 请求中使用的数组、普通对象或 jQuery 对象的序列化表示。 如果传递了 jQuery 对象，它应该包含具有名称&#x2F;值属性的输入元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/serialize/">.serialize()</a> <em>将一组表单元素编码为字符串以供提交</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/serializeArray/">.serializeArray()</a> <em>将一组表单元素编码为名称和值的数组</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="底层接口"><a href="#底层接口" class="headerlink" title="底层接口"></a>底层接口</h3><ul><li><a href="https://api.jquery.com/jQuery.ajax/">jQuery.ajax()</a> <em>执行异步 HTTP (Ajax) 请求</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.ajaxPrefilter/">jQuery.prefilter()</a> <em>在发送每个请求之前和 $.ajax() 处理它们之前处理自定义 Ajax 选项或修改现有选项</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.ajaxSetup/">jQuery.ajaxSetup()</a> <em>为将来的 Ajax 请求设置默认值。 不推荐使用它</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.ajaxTransport/">jQuery.ajaxTransport()</a> <em>创建一个对象来处理 Ajax 数据的实际传输</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="速记方法"><a href="#速记方法" class="headerlink" title="速记方法"></a>速记方法</h3><ul><li><a href="https://api.jquery.com/jQuery.get/">jQuery.get()</a> <em>使用 HTTP GET 请求从服务器加载数据</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.getJSON/">jQuery.getJSON()</a> <em>使用 GET HTTP 请求从服务器加载 JSON 编码的数据</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.getScript/">jQuery.getScript()</a> <em>使用 GET HTTP 请求从服务器加载 JavaScript 文件，然后执行它</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.post/">jQuery.post()</a> <em>使用 HTTP POST 请求将数据发送到服务器</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/load/">.load()</a> <em>从服务器加载数据并将返回的 HTML 放入匹配的元素中</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h2 id="各种各样的"><a href="#各种各样的" class="headerlink" title="各种各样的"></a>各种各样的</h2><h3 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h3><ul><li><a href="https://api.jquery.com/jQuery/">jQuery()</a> <em>接受包含 CSS 选择器的字符串，然后用于匹配一组元</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.noConflict/">jQuery.noConflict()</a> <em>放弃 jQuery 对 $ 变量的控</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.sub/">jQuery.sub()</a> <em>创建一个新的 jQuery 副本，可以在不影响原始 jQuery 对象的情况下修改其属性和方</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.holdReady/">jQuery.holdReady()</a> <em>持有或释放jQuery的就绪事件的执</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.when/">jQuery.when()</a> <em>提供一种基于零个或多个 Thenable 对象执行回调函数的方法，通常是表示异步事件的 Deferred 对</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="延迟对象"><a href="#延迟对象" class="headerlink" title="延迟对象"></a>延迟对象</h3><!--rehype:wrap-class=row-span-2--><ul><li><a href="https://api.jquery.com/jQuery.Deferred/">jQuery.Deferred()</a> <em>返回可链接实用程序对象的工厂函数，该对象具有将多个回调注册到回调队列、调用回调队列以及中继任何同步或异步函数的成功或失败状态的方法</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.always/">deferred.always()</a> <em>添加要在延迟对象被解析或拒绝时调用的处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.done/">deferred.done()</a> <em>添加要在解析延迟对象时调用的处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.fail/">deferred.fail()</a> <em>添加处理程序以在延迟对象被拒绝时调用</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.isRejected/">deferred.isRejected()</a> <em>判断一个 Deferred 对象是否被拒绝</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.isResolved/">deferred.isResolved()</a> <em>判断一个 Deferred 对象是否已经解析</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.notify/">deferred.notify()</a> <em>使用给定的 args 在 Deferred 对象上调用 progressCallbacks</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.notifyWith/">deferred.notifyWith()</a> <em>使用给定的上下文和参数调用 Deferred 对象的 progressCallbacks</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.pipe/">deferred.pipe()</a> <em>过滤和&#x2F;或链接 Deferreds 的实用方法</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.progress/">deferred.progress()</a> <em>添加在 Deferred 对象生成进度通知时要调用的处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.promise/">deferred.promise()</a> <em>返回一个 Deferred 的 Promise 对象</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.reject/">deferred.reject()</a> <em>拒绝 Deferred 对象并使用给定的 args 调用任何 failCallbacks</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.rejectWith/">deferred.rejectWith()</a> <em>拒绝 Deferred 对象并使用给定的上下文和参数调用任何 failCallbacks</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.resolve/">deferred.resolve()</a> <em>解析一个 Deferred 对象并使用给定的 args 调用任何 doneCallbacks</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.resolveWith/">deferred.resolveWith()</a> <em>解析延迟对象并使用给定的上下文和参数调用任何 doneCallbacks</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.state/">deferred.state()</a> <em>确定 Deferred 对象的当前状态</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/deferred.then/">deferred.then()</a> <em>添加要在延迟对象被解析、拒绝或仍在进行中时调用的处理程序</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/promise/">.promise()</a> <em>返回一个 Promise 对象以观察绑定到集合的特定类型的所有操作（无论是否排队）何时完成</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="公用事业"><a href="#公用事业" class="headerlink" title="公用事业"></a>公用事业</h3><!--rehype:wrap-class=row-span-3--><ul><li><a href="https://api.jquery.com/jQuery.boxModel/">jQuery.boxModel</a> <em>说明用户浏览器中的当前页面是否正在使用 W3C CSS 盒模型呈现</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.browser/">jQuery.browser</a> <em>包含用户代理的标志，从 navigator.userAgent 读取。 此属性在 jQuery 1.9 中被删除，只能通过 jQuery.migrate 插件使用。 请尝试改用特征检测</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.contains/">jQuery.contains()</a> <em>检查一个 DOM 元素是否是另一个 DOM 元素的后代</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.each/">jQuery.each()</a> <em>通用迭代器函数，可用于无缝迭代对象和数组。 具有长度属性的数组和类似数组的对象（例如函数的参数对象）按数字索引迭代，从 0 到 length-1。 其他对象通过它们的命名属性迭代</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.extend/">jQuery.extend()</a> <em>将两个或多个对象的内容合并到第一个对象中</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.globalEval/">jQuery.globalEval()</a> <em>全局执行一些 JavaScript 代码</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.grep/">jQuery.grep()</a> <em>查找满足过滤功能的数组元素。 原数组不受影响</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.inArray/">jQuery.inArray()</a> <em>在数组中搜索指定值并返回其索引（如果未找到，则返回 -1）</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isArray/">jQuery.isArray()</a> <em>判断参数是否为数组</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isEmptyObject/">jQuery.isEmptyObject()</a> <em>检查对象是否为空（不包含可枚举属性）</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isFunction/">jQuery.isFunction()</a> <em>确定其参数是否可作为函数调用</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isNumeric/">jQuery.isNumeric()</a> <em>确定其参数是否表示 JavaScript 数字</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isPlainObject/">jQuery.isPlainObject()</a> <em>检查对象是否为普通对象</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isWindow/">jQuery.isWindow()</a> <em>判断参数是否为窗口</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.isXMLDoc/">jQuery.isXMLDoc()</a> <em>检查 DOM 节点是否在 XML 文档中（或者是 XML 文档）</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.makeArray/">jQuery.makeArray()</a> <em>将类数组对象转换为真正的 JavaScript 数组</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.map/">jQuery.map()</a> <em>将数组或对象中的所有项转换为新的项数组</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.merge/">jQuery.merge()</a> <em>将两个数组的内容合并到第一个数组中</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.noop/">jQuery.noop()</a> <em>空函数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.now/">jQuery.now()</a> <em>返回代表当前时间的数字</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.parseHTML/">jQuery.parseHTML()</a> <em>将字符串解析为 DOM 节点数组</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.parseJSON/">jQuery.parseJSON()</a> <em>获取格式正确的 JSON 字符串并返回生成的 JavaScript 值</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.parseXML/">jQuery.parseXML()</a> <em>将字符串解析为 XML 文档</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.proxy/">jQuery.proxy()</a> <em>接受一个函数并返回一个总是有特定上下文的新函数</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.support/">jQuery.support</a> <em>表示存在不同浏览器功能或错误的属性集合。 用于 jQuery 的内部使用； 当内部不再需要特定属性以提高页面启动性能时，可能会删除它们。 对于您自己项目的功能检测需求，我们强烈建议使用外部库（例如 Modernizr），而不是依赖于 jQuery.support 中的属性</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.trim/">jQuery.trim()</a> <em>删除字符串开头和结尾的空格</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.type/">jQuery.type()</a> <em>确定对象的内部 JavaScript [[Class]]</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.unique/">jQuery.unique()</a> <em>对 DOM 元素数组进行适当的排序，并删除重复项。 请注意，这仅适用于 DOM 元素数组，不适用于字符串或数字</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.uniqueSort/">jQuery.uniqueSort()</a> <em>对 DOM 元素数组进行适当的排序，并删除重复项。 请注意，这仅适用于 DOM 元素数组，不适用于字符串或数字</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="DOM-元素方法"><a href="#DOM-元素方法" class="headerlink" title="DOM 元素方法"></a>DOM 元素方法</h3><ul><li><a href="https://api.jquery.com/get/">.get()</a> <em>检索与 jQuery 对象匹配的元素之一</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/index/">.index()</a> <em>从匹配的元素中搜索给定的元素</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/size/">.size()</a> <em>返回 jQuery 对象中元素的数量</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/toArray/">.toArray()</a> <em>检索 jQuery 集合中包含的所有元素，作为数组</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h3><ul><li><a href="https://api.jquery.com/jquery-2/">.jquery</a> <em>包含 jQuery 版本号的字符串</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/context/">.context</a> <em>最初传递给 jQuery() 的 DOM 节点上下文； 如果未通过，则上下文可能是文档</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/jQuery.error/">jQuery.error()</a> <em>获取一个字符串并抛出包含它的异常</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/length/">.length</a> <em>jQuery 对象中元素的数量</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/pushStack/">.pushStack()</a> <em>将一组 DOM 元素添加到 jQuery 堆栈中</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/selector/">.selector</a> <em>代表选择器的选择器在创建原始集合时传递给 jQuery()，如果有的话</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none--><h3 id="回调对象"><a href="#回调对象" class="headerlink" title="回调对象"></a>回调对象</h3><ul><li><a href="https://api.jquery.com/jQuery.Callbacks/">jQuery.Callbacks()</a> <em>一个多用途回调列表对象，提供了一种管理回调列表的强大方法</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.add/">callbacks.add()</a> <em>将回调或回调集合添加到回调列表</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.disable/">callbacks.disable()</a> <em>禁止回调列表做更多的事情</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.disabled/">callbacks.disabled()</a> <em>确定回调列表是否已被禁用</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.empty/">callbacks.empty()</a> <em>从列表中删除所有回调</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.fire/">callbacks.fire()</a> <em>使用给定参数调用所有回调</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.fired/">callbacks.fired()</a> <em>确定回调是否已至少被调用一次</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.fireWith/">callbacks.fireWith()</a> <em>使用给定的上下文和参数调用列表中的所有回调</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.has/">callbacks.has()</a> <em>确定列表是否附加了任何回调。如果回调作为参数提供，请确定它是否在列表中</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.lock/">callbacks.lock()</a> <em>将回调列表锁定在其当前状态</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.locked/">callbacks.locked()</a> <em>判断回调列表是否被锁定</em><!--rehype:tooltips--></li><li><a href="https://api.jquery.com/callbacks.remove/">callbacks.remove()</a> <em>从回调列表中删除回调或回调集合</em><!--rehype:tooltips--></li></ul><!--rehype:className=cols-2 style-none-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-备忘清单&quot;&gt;&lt;a href=&quot;#jQuery-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;jQuery 备忘清单&quot;&gt;&lt;/a&gt;jQuery 备忘清单&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://jquery.com/&quot;&gt;jQue</summary>
      
    
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="JQuery" scheme="https://tdcqcx.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>Pyhton备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/pyhton%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://tdcqcx.github.io/2025/01/08/pyhton%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-3-备忘清单"><a href="#Python-3-备忘清单" class="headerlink" title="Python 3 备忘清单"></a>Python 3 备忘清单</h1><p>Python 备忘单是 <a href="https://www.python.org/">Python 3</a> 编程语言的单页参考表</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><a href="https://www.python.org/">Python 官方网站</a>  <em>(python.org)</em></li><li><a href="https://docs.python.org/zh-cn/3/index.html">Python 文档</a>  <em>(docs.python.org)</em></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/python-cn/">Y 分钟学会 Python</a> <em>(learnxinyminutes.com)</em></li><li><a href="./regex.md#python-%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">Python 中的正则表达式</a> <em>(jaywcjlove.github.io)</em></li></ul><h3 id="控制台打印"><a href="#控制台打印" class="headerlink" title="控制台打印"></a>控制台打印</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>著名的“Hello World”程序在 Python 中的实现</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span>       <span class="comment"># 年龄是 int 类型</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span>  <span class="comment"># 名字现在是 str 类型</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><ul><li>Python 不能在没有赋值的情况下声明变量</li><li>变量可以存放不同类型的值</li></ul><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><!--rehype:wrap-class=row-span-2--><p>序列指一批有序的元素，集合指一批无序且不重复的元素</p><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>str</code></td><td align="left">文本／字符串（Text）</td></tr><tr><td align="left"><code>int</code>, <code>float</code>, <code>complex</code></td><td align="left">数值（Numeric）</td></tr><tr><td align="left"><code>dict</code></td><td align="left">映射／键值对（Mapping）</td></tr><tr><td align="left"><code>list</code>, <code>tuple</code>, <code>range</code></td><td align="left">序列（Sequence）</td></tr><tr><td align="left"><code>set</code>, <code>frozenset</code></td><td align="left">集合（Set）</td></tr><tr><td align="left"><code>bool</code></td><td align="left">布尔值／逻辑值（Boolean）</td></tr><tr><td align="left"><code>bytes</code>, <code>bytearray</code>, <br> <code>memoryview</code></td><td align="left">二进制数据（Binary）</td></tr></tbody></table><p>查看: <a href="#python-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></p><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(msg[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">llo</span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mylist = []</span><br><span class="line">mylist.append(<span class="number">1</span>)</span><br><span class="line">mylist.append(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> mylist:</span><br><span class="line">    <span class="built_in">print</span>(item) <span class="comment"># 打印输出 1,2</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E5%88%97%E8%A1%A8">列表</a></p><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num is greater than 0&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num is not greater than 0&quot;</span>)</span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E5%88%A4%E6%96%AD">判断</a></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> item == <span class="number">3</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finally finished!&quot;</span>)</span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E5%BE%AA%E7%8E%AF">循环</a></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;来自函数的你好&quot;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_function()</span><br><span class="line">来自函数的你好</span><br></pre></td></tr></table></figure><p>查看: <a href="#%E5%87%BD%E6%95%B0">函数</a></p><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86">文件处理</a></p><h3 id="算术"><a href="#算术" class="headerlink" title="算术"></a>算术</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="number">10</span> + <span class="number">30</span> <span class="comment"># =&gt; 40</span></span><br><span class="line">result = <span class="number">40</span> - <span class="number">10</span> <span class="comment"># =&gt; 30</span></span><br><span class="line">result = <span class="number">50</span> * <span class="number">5</span>  <span class="comment"># =&gt; 250</span></span><br><span class="line">result = <span class="number">16</span> / <span class="number">4</span>  <span class="comment"># =&gt; 4.0 (Float Division)</span></span><br><span class="line">result = <span class="number">16</span> // <span class="number">4</span> <span class="comment"># =&gt; 4 (Integer Division)</span></span><br><span class="line">result = <span class="number">25</span> % <span class="number">2</span>  <span class="comment"># =&gt; 1</span></span><br><span class="line">result = <span class="number">5</span> ** <span class="number">3</span>  <span class="comment"># =&gt; 125</span></span><br></pre></td></tr></table></figure><p><code>/</code> 表示 x 和 y 的商，<code>//</code> 表示 x 和 y 的底商，另见 <a href="https://stackoverflow.com/a/183870/13192320">StackOverflow</a></p><h3 id="加等于"><a href="#加等于" class="headerlink" title="加等于"></a>加等于</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">0</span></span><br><span class="line">counter += <span class="number">10</span>           <span class="comment"># =&gt; 10</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">counter = counter + <span class="number">10</span>  <span class="comment"># =&gt; 10</span></span><br><span class="line">message = <span class="string">&quot;Part 1.&quot;</span></span><br><span class="line"><span class="comment"># =&gt; Part 1.Part 2.</span></span><br><span class="line">message += <span class="string">&quot;Part 2.&quot;</span>   </span><br></pre></td></tr></table></figure><h3 id="f-字符串-Python-3-6"><a href="#f-字符串-Python-3-6" class="headerlink" title="f-字符串 (Python 3.6+)"></a>f-字符串 (Python 3.6+)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>website = <span class="string">&#x27;Quick Reference&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;Hello, <span class="subst">&#123;website&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;Hello, Quick Reference&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;num&#125;</span> + 10 = <span class="subst">&#123;num + <span class="number">10</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;10 + 10 = 20&#x27;</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#python-f-%E5%AD%97%E7%AC%A6%E4%B8%B2-python-36">f-字符串</a></p><h2 id="Python-数据类型"><a href="#Python-数据类型" class="headerlink" title="Python 数据类型"></a>Python 数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">hello = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">multi_string = <span class="string">&quot;&quot;&quot;Multiline Strings</span></span><br><span class="line"><span class="string">Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="string">consectetur adipiscing elit &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span>    <span class="comment"># 整数</span></span><br><span class="line">y = <span class="number">2.8</span>  <span class="comment"># 浮点小数</span></span><br><span class="line">z = <span class="number">1j</span>   <span class="comment"># 复数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>只要内存足够，可以容纳无限大(小)的数值</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_bool = <span class="literal">True</span> </span><br><span class="line">my_bool = <span class="literal">False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">1</span>)     <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure><p>bool 是 int 的子类</p><h3 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">list2 = [<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>]</span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>]</span><br><span class="line">list4 = <span class="built_in">list</span>((<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>查看: <a href="#python-%E5%88%97%E8%A1%A8">列表</a></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">my_tuple = <span class="built_in">tuple</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>类似列表，但自身不可变</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;   </span><br><span class="line">set2 = <span class="built_in">set</span>((<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>))</span><br></pre></td></tr></table></figure><p>类似列表，但里面的元素是无序而不重复的</p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_dict = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&quot;one&quot;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.values()</span><br><span class="line">dict_values([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update(&#123;<span class="string">&quot;four&quot;</span>: <span class="number">4</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;four&#x27;</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>键-值对，一种像 JSON 那样对象</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="转换为整数"><a href="#转换为整数" class="headerlink" title="转换为整数"></a>转换为整数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="number">1</span>)       <span class="comment"># 得到 1</span></span><br><span class="line">y = <span class="built_in">int</span>(<span class="number">2.8</span>)     <span class="comment"># 得到 2</span></span><br><span class="line">z = <span class="built_in">int</span>(<span class="string">&quot;3&quot;</span>)     <span class="comment"># 得到 3</span></span><br></pre></td></tr></table></figure><h4 id="转换为浮点数"><a href="#转换为浮点数" class="headerlink" title="转换为浮点数"></a>转换为浮点数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="number">1</span>)     <span class="comment"># 得到 1.0</span></span><br><span class="line">y = <span class="built_in">float</span>(<span class="number">2.8</span>)   <span class="comment"># 得到 2.8</span></span><br><span class="line">z = <span class="built_in">float</span>(<span class="string">&quot;3&quot;</span>)   <span class="comment"># 得到 3.0</span></span><br><span class="line">w = <span class="built_in">float</span>(<span class="string">&quot;4.2&quot;</span>) <span class="comment"># 得到 4.2</span></span><br></pre></td></tr></table></figure><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">str</span>(<span class="string">&quot;s1&quot;</span>)    <span class="comment"># 得到 &quot;s1&quot;</span></span><br><span class="line">y = <span class="built_in">str</span>(<span class="number">2</span>)       <span class="comment"># 得到 &quot;2&quot;</span></span><br><span class="line">z = <span class="built_in">str</span>(<span class="number">3.0</span>)     <span class="comment"># 得到 &quot;3.0&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python 字符串"></a>Python 字符串</h2><h3 id="下标访问"><a href="#下标访问" class="headerlink" title="下标访问"></a>下标访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello = <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hello[<span class="number">1</span>])  <span class="comment"># 获取第二个字符</span></span><br><span class="line">e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hello[-<span class="number">1</span>])  <span class="comment"># 获取倒数第一个字符</span></span><br><span class="line">d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(hello[-<span class="number">1</span>]))  <span class="comment"># 得到的还是字符串</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="循环-1"><a href="#循环-1" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;foo&quot;</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(char)</span><br><span class="line">f</span><br><span class="line">o</span><br><span class="line">o</span><br></pre></td></tr></table></figure><p>对字符串 for-in 可以得到每个字符（类型还是字符串）</p><h3 id="切割字符串"><a href="#切割字符串" class="headerlink" title="切割字符串"></a>切割字符串</h3><!--rehype:wrap-class=row-span-4--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line"> | m | y | b | a | c | o | n |</span><br><span class="line"> └───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line"> <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">-<span class="number">7</span>  -<span class="number">6</span>  -<span class="number">5</span>  -<span class="number">4</span>  -<span class="number">3</span>  -<span class="number">2</span>  -<span class="number">1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;mybacon&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;bac&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;my&#x27;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;mybacon&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;my&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">2</span>:]</span><br><span class="line"><span class="string">&#x27;bacon&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">2</span>] + s[<span class="number">2</span>:]</span><br><span class="line"><span class="string">&#x27;mybacon&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:]</span><br><span class="line"><span class="string">&#x27;mybacon&#x27;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;mybacon&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[-<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;baco&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line"><span class="string">&#x27;baco&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="步长"><a href="#步长" class="headerlink" title="步长"></a>步长</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;12345&#x27;</span> * <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">&#x27;1234512345123451234512345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;11111&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">4</span>::<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;55555&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;55555&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;5432154321543215432154321&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">len</span>(hello))</span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p><code>len()</code> 函数返回字符串的长度</p><h3 id="重复多次"><a href="#重复多次" class="headerlink" title="重复多次"></a>重复多次</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;===+&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s * n</span><br><span class="line"><span class="string">&#x27;===+===+===+===+===+===+===+===+&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="存在性判断"><a href="#存在性判断" class="headerlink" title="存在性判断"></a>存在性判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;spam&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s <span class="keyword">in</span> <span class="string">&#x27;I saw spamalot!&#x27;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;I saw The Holy Grail!&#x27;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>判断 “spam” 这个字符串是否在其它字符串里</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;spam&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">&#x27;egg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s + t  <span class="comment"># 可以使用加号进行拼接</span></span><br><span class="line"><span class="string">&#x27;spamegg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;spam&#x27;</span> <span class="string">&#x27;egg&#x27;</span>  <span class="comment"># 两个字符串之间可以省略加号</span></span><br><span class="line"><span class="string">&#x27;spamegg&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, %s!&quot;</span> % name)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;John&quot;</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s is %d years old.&quot;</span> % (name, age))</span><br></pre></td></tr></table></figure><h4 id="format-方法"><a href="#format-方法" class="headerlink" title="format() 方法"></a>format() 方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt1 = <span class="string">&quot;My name is &#123;fname&#125;, I&#x27;m &#123;age&#125;&quot;</span>.<span class="built_in">format</span>(fname=<span class="string">&quot;John&quot;</span>, age=<span class="number">36</span>)</span><br><span class="line">txt2 = <span class="string">&quot;My name is &#123;0&#125;, I&#x27;m &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;John&quot;</span>, <span class="number">36</span>)</span><br><span class="line">txt3 = <span class="string">&quot;My name is &#123;&#125;, I&#x27;m &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;John&quot;</span>, <span class="number">36</span>)</span><br></pre></td></tr></table></figure><h3 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th>转义符号</th><th>对应的操作</th></tr></thead><tbody><tr><td><code>\\</code></td><td>输出反斜杠</td></tr><tr><td><code>\&#39;</code></td><td>输出单引号</td></tr><tr><td><code>\&quot;</code></td><td>输出双引号</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\t</code></td><td>水平制表符</td></tr><tr><td><code>\r</code></td><td>光标回到首位</td></tr><tr><td><code>\b</code></td><td>退格</td></tr></tbody></table><h3 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="built_in">input</span>(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line">Enter your name: Tom</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">&#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure><p>从控制台获取输入数据</p><h3 id="头尾判断"><a href="#头尾判断" class="headerlink" title="头尾判断"></a>头尾判断</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 是否以 H 开头</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Hello, world!&quot;</span>.startswith(<span class="string">&quot;H&quot;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 是否以 h 开头</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Hello, world!&quot;</span>.startswith(<span class="string">&quot;h&quot;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 是否以 ! 结尾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Hello, world!&quot;</span>.endswith(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="插入分隔符拼接"><a href="#插入分隔符拼接" class="headerlink" title="插入分隔符拼接"></a>插入分隔符拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;、&quot;</span>.join([<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Vicky&quot;</span>])</span><br><span class="line"><span class="string">&#x27;John、Peter、Vicky&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Python-f-字符串-Python-3-6"><a href="#Python-f-字符串-Python-3-6" class="headerlink" title="Python f-字符串 (Python 3.6+)"></a>Python f-字符串 (Python 3.6+)</h2><h3 id="f-字符串-用法"><a href="#f-字符串-用法" class="headerlink" title="f-字符串 用法"></a>f-字符串 用法</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>website = <span class="string">&#x27;Reference&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;Hello, <span class="subst">&#123;website&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;Hello, Reference&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;num&#125;</span> + 10 = <span class="subst">&#123;num + <span class="number">10</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;10 + 10 = 20&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;&quot;&quot;He said <span class="subst">&#123;<span class="string">&quot;I&#x27;m John&quot;</span>&#125;</span>&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;He said I&#x27;m John&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;5 <span class="subst">&#123;<span class="string">&quot;&#123;stars&#125;&quot;</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;5 &#123;stars&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;&#123;&#123;5&#125;&#125; <span class="subst">&#123;<span class="string">&quot;stars&quot;</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#123;5&#125; stars&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;Eric&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">27</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;&quot;&quot;Hello!</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    I&#x27;m <span class="subst">&#123;name&#125;</span>.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    I&#x27;m <span class="subst">&#123;age&#125;</span>.&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;Hello!\n    I&#x27;m Eric.\n    I&#x27;m 27.&quot;</span></span><br></pre></td></tr></table></figure><p>它从 Python 3.6 开始可用，另见: <a href="https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#f-strings">格式字符串字面值</a></p><h3 id="填充对齐"><a href="#填充对齐" class="headerlink" title="填充对齐"></a>填充对齐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="string">&quot;text&quot;</span>:<span class="number">10</span>&#125;</span>&#x27;</span>   <span class="comment"># 使用空格填充到指定长度</span></span><br><span class="line"><span class="string">&#x27;text      &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="string">&quot;test&quot;</span>:*&gt;<span class="number">10</span>&#125;</span>&#x27;</span> <span class="comment"># 向左填充</span></span><br><span class="line"><span class="string">&#x27;******test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="string">&quot;test&quot;</span>:*&lt;<span class="number">10</span>&#125;</span>&#x27;</span> <span class="comment"># 向右填充</span></span><br><span class="line"><span class="string">&#x27;test******&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="string">&quot;test&quot;</span>:*^<span class="number">10</span>&#125;</span>&#x27;</span> <span class="comment"># 居中填充</span></span><br><span class="line"><span class="string">&#x27;***test***&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">12345</span>:<span class="number">0</span>&gt;<span class="number">10</span>&#125;</span>&#x27;</span>  <span class="comment"># 使用数字填充</span></span><br><span class="line"><span class="string">&#x27;0000012345&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="按类型输出"><a href="#按类型输出" class="headerlink" title="按类型输出"></a>按类型输出</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">10</span>:b&#125;</span>&#x27;</span>     <span class="comment"># 输出二进制数值</span></span><br><span class="line"><span class="string">&#x27;1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">10</span>:o&#125;</span>&#x27;</span>     <span class="comment"># 输出八进制数值</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">200</span>:x&#125;</span>&#x27;</span>    <span class="comment"># 输出十六进制数值</span></span><br><span class="line"><span class="string">&#x27;c8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">200</span>:X&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;C8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">345600000000</span>:e&#125;</span>&#x27;</span> <span class="comment"># 科学计数法</span></span><br><span class="line"><span class="string">&#x27;3.456000e+11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">65</span>:c&#125;</span>&#x27;</span>       <span class="comment"># 将整数转化为一个字符后输出</span></span><br><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">10</span>:#b&#125;</span>&#x27;</span>      <span class="comment"># [类型] 带符号（基础）</span></span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">10</span>:#o&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;0o12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">10</span>:#x&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xa&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="显示正负号"><a href="#显示正负号" class="headerlink" title="显示正负号"></a>显示正负号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">12345</span>:+&#125;</span>&#x27;</span>      <span class="comment"># 显示正数的正号</span></span><br><span class="line"><span class="string">&#x27;+12345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;-<span class="number">12345</span>:+&#125;</span>&#x27;</span>     <span class="comment"># 显示负数的负号</span></span><br><span class="line"><span class="string">&#x27;-12345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;-<span class="number">12345</span>:+<span class="number">10</span>&#125;</span>&#x27;</span>   <span class="comment"># 显示负号，并使用空格填充，直到长度为 10</span></span><br><span class="line"><span class="string">&#x27;    -12345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;-<span class="number">12345</span>:+<span class="number">0</span>10&#125;</span>&#x27;</span>  <span class="comment"># 显示负号，并使用0填充，直到长度为 10</span></span><br><span class="line"><span class="string">&#x27;-000012345&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;-<span class="number">12345</span>:<span class="number">0</span>=<span class="number">10</span>&#125;</span>&#x27;</span>  <span class="comment"># 负数</span></span><br><span class="line"><span class="string">&#x27;-000012345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">12345</span>:<span class="number">0</span>10&#125;</span>&#x27;</span>    <span class="comment"># [0] 快捷方式（不对齐）</span></span><br><span class="line"><span class="string">&#x27;0000012345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;-<span class="number">12345</span>:<span class="number">0</span>10&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;-000012345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math       <span class="comment"># [.precision]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.pi</span><br><span class="line"><span class="number">3.141592653589793</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;math.pi:<span class="number">.2</span>f&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">1000000</span>:,<span class="number">.2</span>f&#125;</span>&#x27;</span> <span class="comment"># [分组选项]</span></span><br><span class="line"><span class="string">&#x27;1,000,000.00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">1000000</span>:_<span class="number">.2</span>f&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;1_000_000.00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">0.25</span>:<span class="number">0</span>%&#125;</span>&#x27;</span>      <span class="comment"># 百分比</span></span><br><span class="line"><span class="string">&#x27;25.000000%&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">0.25</span>:<span class="number">.0</span>%&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;25%&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Python-列表"><a href="#Python-列表" class="headerlink" title="Python 列表"></a>Python 列表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li1 = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li1</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li2</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li3 = <span class="built_in">list</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li3</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li4 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li4</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x : x % <span class="number">2</span> == <span class="number">1</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span>  x % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">49</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="keyword">if</span> x &gt; <span class="number">5</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><!--rehype:wrap-class=col-span-2 row-span-3--><p>列表切片的语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_list[start:end]</span><br><span class="line">a_list[start:end:step]</span><br></pre></td></tr></table></figure><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">[<span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">5</span>:-<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="省略索引"><a href="#省略索引" class="headerlink" title="省略索引"></a>省略索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>]</span><br><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:]</span><br><span class="line">[<span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="built_in">len</span>(a)]</span><br><span class="line">[<span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:]</span><br><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="间隔索引"><a href="#间隔索引" class="headerlink" title="间隔索引"></a>间隔索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">6</span>:<span class="number">0</span>:-<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;lobster&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;lobster&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::-<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;lobster&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>, <span class="string">&#x27;spam&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;butter&#x27;</span>, <span class="string">&#x27;milk&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.pop()</span><br><span class="line"><span class="string">&#x27;milk&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;butter&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> li[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="string">&#x27;butter&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.remove(<span class="string">&#x27;butter&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h3 id="列表边界"><a href="#列表边界" class="headerlink" title="列表边界"></a>列表边界</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li[<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li[-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li[<span class="number">4</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd.extend([<span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd + [<span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><h3 id="排序和反转"><a href="#排序和反转" class="headerlink" title="排序和反转"></a>排序和反转</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.count(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&quot;re&quot;</span>] * <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;re&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>, -<span class="number">20.5</span>, -<span class="number">999</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums.index(<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums.index(<span class="number">100</span>, <span class="number">3</span>, <span class="number">7</span>)  <span class="comment"># 搜索3-7之间的元素</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums.index(<span class="number">7</span>, <span class="number">4</span>) <span class="comment"># 搜索4之后的元素</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>当寻找一个不存在的值时，抛出<code>ValueError</code>。</p><h2 id="Python-判断"><a href="#Python-判断" class="headerlink" title="Python 判断"></a>Python 判断</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入一个整数：&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入了一个负数。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入了一个非负整数。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入一个整数：&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入了一个负数。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> number == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入了一个 0 。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入了一个正数。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scope = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入百分制成绩：&#x27;</span>))</span><br><span class="line">line = <span class="number">60</span></span><br><span class="line">tip = <span class="string">&quot;及格&quot;</span> <span class="keyword">if</span> scope &gt;= line <span class="keyword">else</span> <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="comment"># 相当于 scope &gt;= line ? &quot;及格&quot; : &quot;不及格&quot;</span></span><br><span class="line"><span class="built_in">print</span>(tip)</span><br></pre></td></tr></table></figure><p>注意条件是放在中间的</p><h2 id="Python-循环"><a href="#Python-循环" class="headerlink" title="Python 循环"></a>Python 循环</h2><h3 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> prime <span class="keyword">in</span> primes:</span><br><span class="line">    <span class="built_in">print</span>(prime)</span><br></pre></td></tr></table></figure><h3 id="带索引"><a href="#带索引" class="headerlink" title="带索引"></a>带索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animals = [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(animals):</span><br><span class="line">    <span class="built_in">print</span>(i, value)</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span>  <span class="comment"># Shorthand for x = x + 1</span></span><br></pre></td></tr></table></figure><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    x = index * <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="跳过一轮循环"><a href="#跳过一轮循环" class="headerlink" title="跳过一轮循环"></a>跳过一轮循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">8</span>): </span><br><span class="line">    x = index * <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="范围循环"><a href="#范围循环" class="headerlink" title="范围循环"></a>范围循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># Prints: 0 1 2 3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># Prints: 4 5 6 7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># Prints: 4 6 8</span></span><br></pre></td></tr></table></figure><h3 id="使用-zip"><a href="#使用-zip" class="headerlink" title="使用 zip()"></a>使用 zip()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">&#x27;Pete&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Elizabeth&#x27;</span>]</span><br><span class="line">age = [<span class="number">6</span>, <span class="number">23</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">for</span> n, a <span class="keyword">in</span> <span class="built_in">zip</span>(name, age):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is %d years old&#x27;</span> %(n, a))</span><br></pre></td></tr></table></figure><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># [0, 4, 16, 36, 64]</span></span><br></pre></td></tr></table></figure><h2 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, World!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><figure class="highlight python"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is %s, y is %s&quot;</span> %(x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">add(<span class="number">5</span>, <span class="number">6</span>)    <span class="comment"># =&gt; 11</span></span><br></pre></td></tr></table></figure><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">varargs</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line">varargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># =&gt; (1, 2, 3)</span></span><br></pre></td></tr></table></figure><p>args 的类型是 tuple</p><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">keyword_args</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br><span class="line"><span class="comment"># =&gt; &#123;&quot;big&quot;: &quot;foot&quot;, &quot;loch&quot;: &quot;ness&quot;&#125;</span></span><br><span class="line">keyword_args(big=<span class="string">&quot;foot&quot;</span>, loch=<span class="string">&quot;ness&quot;</span>)</span><br></pre></td></tr></table></figure><p>kwargs 的类型是 dict</p><h3 id="返回多个"><a href="#返回多个" class="headerlink" title="返回多个"></a>返回多个</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> y, x</span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">x, y = swap(x, y)  <span class="comment"># =&gt; x = 2, y = 1</span></span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">add(<span class="number">5</span>)      <span class="comment"># =&gt; 15</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">20</span>)  <span class="comment"># =&gt; 25</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =&gt; True</span></span><br><span class="line">(<span class="keyword">lambda</span> x: x &gt; <span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># =&gt; 5</span></span><br><span class="line">(<span class="keyword">lambda</span> x, y: x ** <span class="number">2</span> + y ** <span class="number">2</span>)(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="Python-解包"><a href="#Python-解包" class="headerlink" title="Python 解包"></a>Python 解包</h2><ul><li>解包是将一个<br><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#sequence-types-list-tuple-range">序列</a><br>内的多个元素依次重新分配到有限个容器的过程，这只发生在 <strong>变量赋值</strong>、<strong>参数传递</strong> 和 <strong>生成式生成</strong> 过程中。</li><li><code>_</code> 这个变量是命令行交互中最后一次计算得到的值，在程序设计中一般用来存放解包时不再需要的值。<br>但它的含义会因赋值而改变，比如标准库 <a href="https://docs.python.org/zh-cn/3/library/gettext.html">gettext</a> 中常用作动态获取翻译文本。</li></ul><h3 id="等量解包"><a href="#等量解包" class="headerlink" title="等量解包"></a>等量解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ip, port = <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">80</span></span><br><span class="line"><span class="built_in">print</span>(ip)  <span class="comment"># -&gt; &quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(port)  <span class="comment"># -&gt; 80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与以下代码等价</span></span><br><span class="line">ip, port = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与以下代码效果相同</span></span><br><span class="line">ip, port = [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">80</span>]</span><br></pre></td></tr></table></figure><h3 id="适量解包"><a href="#适量解包" class="headerlink" title="适量解包"></a>适量解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip, _, port = <span class="string">&quot;127.0.0.1:80&quot;</span>.rpartition(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ip)  <span class="comment"># -&gt; &quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(port)  <span class="comment"># -&gt; &quot;80&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># _ 这个变量此刻的值是 &quot;:&quot; ，但一般不再使用。</span></span><br></pre></td></tr></table></figure><p><code>_</code> 也是一个单一变量，不允许解包多个元素，因此变量与值必须一一对应。</p><h3 id="过量解包"><a href="#过量解包" class="headerlink" title="过量解包"></a>过量解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">major, minor, *parts = <span class="string">&quot;3.10.2.beta&quot;</span>.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(major)  <span class="comment"># -&gt; &quot;3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(minor)  <span class="comment"># -&gt; &quot;10&quot;</span></span><br><span class="line"><span class="built_in">print</span>(parts)  <span class="comment"># -&gt; [&quot;2&quot;, &quot;beta&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可将 parts 改为 _ 来表示不再需要后面的元素</span></span><br></pre></td></tr></table></figure><p>这里的 <code>*</code> 就是收集<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#sequence-types-list-tuple-range">序列</a>在解包过程中多出来的元素，<br>只能有一个，与向函数传递<a href="#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0">位置参数</a>时的 <code>*</code> 别无二致。</p><h3 id="解包取左边"><a href="#解包取左边" class="headerlink" title="解包取左边"></a>解包取左边</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">major, minor, *_ = <span class="string">&quot;3.10.2.beta&quot;</span>.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(major)  <span class="comment"># -&gt; &quot;3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(minor)  <span class="comment"># -&gt; &quot;10&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解包取两边"><a href="#解包取两边" class="headerlink" title="解包取两边"></a>解包取两边</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">major, *_, level = <span class="string">&quot;3.10.2.beta&quot;</span>.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(major)  <span class="comment"># -&gt; &quot;3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(level)  <span class="comment"># -&gt; &quot;beta&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解包取右边"><a href="#解包取右边" class="headerlink" title="解包取右边"></a>解包取右边</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*_, micro, level = <span class="string">&quot;3.10.2.beta&quot;</span>.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(micro)  <span class="comment"># -&gt; &quot;2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(level)  <span class="comment"># -&gt; &quot;beta&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解包集合"><a href="#解包集合" class="headerlink" title="解包集合"></a>解包集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, *_ = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># -&gt; 1</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># -&gt; 2</span></span><br><span class="line"><span class="built_in">print</span>(_)  <span class="comment"># -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set-types-set-frozenset">集合</a><br>中的元素是无序的，因此解包结果不能轻易确定。</p><h3 id="解包迭代器"><a href="#解包迭代器" class="headerlink" title="解包迭代器"></a>解包迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, *_ = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># -&gt; 0</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># -&gt; 1</span></span><br><span class="line"><span class="built_in">print</span>(_)  <span class="comment"># -&gt; [2]</span></span><br></pre></td></tr></table></figure><p>支持<br><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator-types">迭代器</a><br>协议的对象也可被解包。</p><h3 id="解包字典"><a href="#解包字典" class="headerlink" title="解包字典"></a>解包字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a, b, *_ = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># -&gt; &quot;a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(_)  <span class="comment"># -&gt; [&quot;c&quot;]</span></span><br><span class="line">a, b, *_ = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>).values()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># -&gt; 1</span></span><br><span class="line"><span class="built_in">print</span>(_)  <span class="comment"># -&gt; [3]</span></span><br></pre></td></tr></table></figure><h3 id="生成式中的解包"><a href="#生成式中的解包" class="headerlink" title="生成式中的解包"></a>生成式中的解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chars = (*<span class="string">&quot;abc&quot;</span>, *<span class="string">&quot;def&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>)</span><br><span class="line"><span class="comment"># -&gt; (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;)</span></span><br><span class="line"></span><br><span class="line">digits = [*<span class="built_in">range</span>(<span class="number">10</span>), *<span class="string">&quot;abcdef&quot;</span>]</span><br><span class="line"><span class="comment"># -&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,</span></span><br><span class="line"><span class="comment">#     &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"></span><br><span class="line">part = &#123;<span class="string">&quot;小明&quot;</span>: <span class="number">18</span>, <span class="string">&quot;小亮&quot;</span>: <span class="number">22</span>&#125;</span><br><span class="line">summary = &#123;<span class="string">&quot;小花&quot;</span>: <span class="number">16</span>, **part&#125;</span><br><span class="line"><span class="built_in">print</span>(summary)</span><br><span class="line"><span class="comment"># -&gt; &#123;&quot;小花&quot;: 16, &quot;小明&quot;: 18, &quot;小亮&quot;: 22&#125;</span></span><br></pre></td></tr></table></figure><ul><li>仅在列表／元组生成式中可以使用多个 <code>*</code></li><li>仅在字典生成式中可以使用多个 <code>**</code></li></ul><h3 id="迭代中解包"><a href="#迭代中解包" class="headerlink" title="迭代中解包"></a>迭代中解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    (<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>),</span><br><span class="line">    (<span class="string">&quot;小亮&quot;</span>, <span class="number">22</span>),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(k)  <span class="comment"># -&gt; &quot;小明&quot;、&quot;小亮&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(v)  <span class="comment"># -&gt; 18、22</span></span><br><span class="line"></span><br><span class="line">students = [</span><br><span class="line">    (<span class="number">0</span>, (<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>)),</span><br><span class="line">    (<span class="number">1</span>, (<span class="string">&quot;小亮&quot;</span>, <span class="number">22</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i, (k, v) <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># -&gt; 0、1</span></span><br><span class="line">    <span class="built_in">print</span>(k)  <span class="comment"># -&gt; &quot;小明&quot;、&quot;小亮&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(v)  <span class="comment"># -&gt; 18、22</span></span><br></pre></td></tr></table></figure><h3 id="函数中的解包"><a href="#函数中的解包" class="headerlink" title="函数中的解包"></a>函数中的解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">version</span>(<span class="params">major, minor, *parts</span>):</span><br><span class="line">    <span class="built_in">print</span>(major)  <span class="comment"># -&gt; &quot;3&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(minor)  <span class="comment"># -&gt; &quot;10&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(parts)  <span class="comment"># -&gt; (&quot;2&quot;, &quot;beta&quot;, &quot;0&quot;)</span></span><br><span class="line"></span><br><span class="line">version(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;beta&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="comment"># 过程类似于</span></span><br><span class="line">major, minor, *parts = (<span class="string">&quot;3&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;beta&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">version</span>():</span><br><span class="line">    parts = <span class="string">&quot;3.10.2.beta.0&quot;</span>.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> *parts, <span class="string">&quot;x64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(version())</span><br><span class="line"><span class="comment"># -&gt; (&quot;3&quot;, &quot;10&quot;, &quot;2&quot;, &quot;beta&quot;, &quot;0&quot;, &quot;x64&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h2><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))  <span class="comment"># =&gt; 4.0</span></span><br></pre></td></tr></table></figure><h3 id="从一个模块导入"><a href="#从一个模块导入" class="headerlink" title="从一个模块导入"></a>从一个模块导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line"><span class="built_in">print</span>(ceil(<span class="number">3.7</span>))   <span class="comment"># =&gt; 4.0</span></span><br><span class="line"><span class="built_in">print</span>(floor(<span class="number">3.7</span>))  <span class="comment"># =&gt; 3.0</span></span><br></pre></td></tr></table></figure><h3 id="导入一个模块的全部"><a href="#导入一个模块的全部" class="headerlink" title="导入一个模块的全部"></a>导入一个模块的全部</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="给模块起别名"><a href="#给模块起别名" class="headerlink" title="给模块起别名"></a>给模块起别名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line"><span class="comment"># =&gt; True</span></span><br><span class="line">math.sqrt(<span class="number">16</span>) == m.sqrt(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h3 id="浏览模块的函数和属性"><a href="#浏览模块的函数和属性" class="headerlink" title="浏览模块的函数和属性"></a>浏览模块的函数和属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">dir</span>(math)</span><br></pre></td></tr></table></figure><h2 id="Python-文件处理"><a href="#Python-文件处理" class="headerlink" title="Python 文件处理"></a>Python 文件处理</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="逐行"><a href="#逐行" class="headerlink" title="逐行"></a>逐行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><h4 id="带行号"><a href="#带行号" class="headerlink" title="带行号"></a>带行号</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(file, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number %s: %s&quot;</span> % (i, line))</span><br></pre></td></tr></table></figure><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><h4 id="写入一个字符串"><a href="#写入一个字符串" class="headerlink" title="写入一个字符串"></a>写入一个字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contents = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">12</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">21</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile1.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(contents))</span><br></pre></td></tr></table></figure><h4 id="读取一个字符串"><a href="#读取一个字符串" class="headerlink" title="读取一个字符串"></a>读取一个字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myfile1.txt&#x27;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents = file.read()</span><br><span class="line"><span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="写一个对象"><a href="#写一个对象" class="headerlink" title="写一个对象"></a>写一个对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contents = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">12</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">21</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile2.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(contents))</span><br></pre></td></tr></table></figure><h4 id="读取对象"><a href="#读取对象" class="headerlink" title="读取对象"></a>读取对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myfile2.txt&#x27;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents = json.load(file)</span><br><span class="line"><span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&quot;myfile.txt&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="检查和删除"><a href="#检查和删除" class="headerlink" title="检查和删除"></a>检查和删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&quot;myfile.txt&quot;</span>):</span><br><span class="line">    os.remove(<span class="string">&quot;myfile.txt&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The file does not exist&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">&quot;myfolder&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Python-类和继承"><a href="#Python-类和继承" class="headerlink" title="Python 类和继承"></a>Python 类和继承</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyNewClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 类的实例化</span></span><br><span class="line">my = MyNewClass()</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, voice</span>):</span><br><span class="line">        <span class="variable language_">self</span>.voice = voice</span><br><span class="line"> </span><br><span class="line">cat = Animal(<span class="string">&#x27;Meow&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cat.voice)    <span class="comment"># =&gt; Meow</span></span><br><span class="line"> </span><br><span class="line">dog = Animal(<span class="string">&#x27;Woof&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(dog.voice)    <span class="comment"># =&gt; Woof</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="comment"># 类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ham-Ham&quot;</span>)</span><br><span class="line"> </span><br><span class="line">charlie = Dog()</span><br><span class="line">charlie.bark()   <span class="comment"># =&gt; &quot;Ham-Ham&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    class_variable = <span class="string">&quot;A class variable!&quot;</span></span><br><span class="line"><span class="comment"># =&gt; 一个类变量！</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.class_variable)</span><br><span class="line">x = MyClass()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># =&gt; 一个类变量！</span></span><br><span class="line"><span class="built_in">print</span>(x.class_variable)</span><br></pre></td></tr></table></figure><h3 id="super-函数"><a href="#super-函数" class="headerlink" title="super() 函数"></a>super() 函数</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Parent Method&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Child Method&quot;</span>)</span><br><span class="line">        <span class="comment"># 调用父级的 print_test()</span></span><br><span class="line">        <span class="built_in">super</span>().print_test() </span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child_instance = ChildClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child_instance.print_test()</span><br><span class="line">Child Method</span><br><span class="line">Parent Method</span><br></pre></td></tr></table></figure><h3 id="repr-方法"><a href="#repr-方法" class="headerlink" title="repr() 方法"></a>repr() 方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.name</span><br><span class="line"> </span><br><span class="line">john = Employee(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(john)  <span class="comment"># =&gt; John</span></span><br></pre></td></tr></table></figure><h3 id="用户定义的异常"><a href="#用户定义的异常" class="headerlink" title="用户定义的异常"></a>用户定义的异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_self</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_self</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">obj_A = ParentClass()</span><br><span class="line">obj_B = ChildClass()</span><br><span class="line"> </span><br><span class="line">obj_A.print_self() <span class="comment"># =&gt; A</span></span><br><span class="line">obj_B.print_self() <span class="comment"># =&gt; B</span></span><br></pre></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_self</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Parent&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_self</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Child&quot;</span>)</span><br><span class="line"> </span><br><span class="line">child_instance = ChildClass()</span><br><span class="line">child_instance.print_self() <span class="comment"># =&gt; Child</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>: </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, legs</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.legs = legs</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Woof!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">Yoki = Dog(<span class="string">&quot;Yoki&quot;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(Yoki.name) <span class="comment"># =&gt; YOKI</span></span><br><span class="line"><span class="built_in">print</span>(Yoki.legs) <span class="comment"># =&gt; 4</span></span><br><span class="line">Yoki.sound()     <span class="comment"># =&gt; Woof!</span></span><br></pre></td></tr></table></figure><h2 id="Python-数据模型"><a href="#Python-数据模型" class="headerlink" title="Python 数据模型"></a>Python 数据模型</h2><p>更多请移步 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html">https://docs.python.org/zh-cn/3/reference/datamodel.html</a></p><h3 id="自定义类创建"><a href="#自定义类创建" class="headerlink" title="自定义类创建"></a>自定义类创建</h3><p>参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#customizing-class-creation">自定义类创建</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>) -&gt; <span class="string">&quot;self&quot;</span>:</span><br><span class="line">        <span class="comment"># new 和 init 声明的参数必须一致</span></span><br><span class="line">        <span class="comment"># 或者用 *args 和 **kwargs 进行兼容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 初始化方法没有返回值，也不能返回值。</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>) -&gt; <span class="type">Any</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次调用了 new 和 init，所以如果</span></span><br><span class="line"><span class="comment"># 手动调用 new，那么别忘了调用 init</span></span><br><span class="line">obj = Object()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 __call__ 方法，要给什么参数取决于声明</span></span><br><span class="line">obj()</span><br></pre></td></tr></table></figure><h3 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h3><!--rehype:wrap-class=col-span-2--><p>参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#with-statement-context-managers">上下文管理器</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>) -&gt; <span class="type">Optional</span>[<span class="type">Any</span>]:</span><br><span class="line">        <span class="comment"># with 语句会将返回值绑定到 as 子句中的变量，如果有的话。</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span><br><span class="line">        <span class="comment"># 若 with 内没有发生异常，则三个参数都是 None 。</span></span><br><span class="line">        <span class="comment"># 不应该重新引发传入的异常，这是调用者的责任。</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Object() <span class="keyword">as</span> alias:</span><br><span class="line">    <span class="comment"># 进入 with 之前调用 obj.__enter__() 并得到 alias（如果有返回的话）</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 离开 with 后调用 obj.__exit__() ，不管是正常结束还是因异常抛出而离开。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当需要获取 Object 的对象时可以这样写</span></span><br><span class="line">obj = Object()</span><br><span class="line"><span class="keyword">with</span> obj <span class="keyword">as</span> alias:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><!--rehype:wrap-class=col-span-3--><p>下表使用 <code>-&gt; *</code> 代表返回值类型是任意的，或者需要视情况而定，实际上并不存在这种写法。<br>诸如 <code>-&gt; str</code> 仅表示绝大多数情况下应当返回 <code>str</code> 类型，或者推荐返回 <code>str</code> 类型。<br>没有 <code>-&gt;</code> 的方法一般没有返回值。<br>参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html">https://docs.python.org/zh-cn/3/reference/datamodel.html</a></p><table><thead><tr><th>语句</th><th>特殊方法</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td><code>repr(obj)</code></td><td><code>__repr__(self) -&gt; str</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#repr"><code>repr()</code></a> 。</td><td></td></tr><tr><td><code>str(obj)</code></td><td><code>__str__(self) -&gt; str</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str"><code>str</code> 类型</a> 。</td><td></td></tr><tr><td><code>bytes(obj)</code></td><td><code>__bytes__(self) -&gt; bytes</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#func-bytes"><code>bytes()</code></a> 。</td><td></td></tr><tr><td><code>format(obj, spec)</code></td><td><code>__format__(self, spec) -&gt; str</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#format"><code>format()</code></a>、<a href="https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#f-strings">格式化字符串字面值</a>、<a href="https://docs.python.org/zh-cn/3/library/string.html#formatspec">格式规格迷你语言</a> 。</td><td></td></tr><tr><td><code>hash(obj)</code></td><td><code>__hash__(self) -&gt; int</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#hash"><code>hash()</code></a> 。</td><td></td></tr><tr><td><code>bool(obj)</code></td><td><code>__bool__(self) -&gt; bool</code></td><td align="left">未定义时调用 <code>obj.__len__() != 0</code> ，若 <code>__len__()</code> 也未定义，则所有对象都被视为 <code>True</code> 。另见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#bool"><code>bool()</code></a> 。</td><td></td></tr><tr><td><code>dir(obj)</code></td><td><code>__dir__(self) -&gt; list</code></td><td align="left">返回值必须是一个序列，<a href="https://docs.python.org/zh-cn/3/library/functions.html#dir"><code>dir()</code></a> 会把返回的序列转换为列表并对其排序。</td><td></td></tr><tr><td><code>Object[key]</code></td><td><code>__class_getitem__(cls, key) -&gt; *</code></td><td align="left">不建议用于除了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#emulating-generic-types">模拟泛型类型</a> 以外的用途，避免 IDE 误判。</td><td></td></tr></tbody></table><ul><li>自定义实例及子类检查，参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#customizing-instance-and-subclass-checks">https://docs.python.org/zh-cn/3/reference/datamodel.html#customizing-instance-and-subclass-checks</a></li></ul><table><thead><tr><th>语句</th><th>特殊方法</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td><code>isinstance(instance, class)</code></td><td><code>class.__instancecheck__(self, instance) -&gt; bool</code></td><td align="left">如果 instance 应被视为 class 的一个（直接或间接）实例则返回真值。</td><td></td></tr><tr><td><code>issubclass(subclass, class)</code></td><td><code>class.__subclasscheck__(self, subclass) -&gt; bool</code></td><td align="left">如果 subclass 应被视为 class 的一个（直接或间接）子类则返回真值。</td><td></td></tr></tbody></table><ul><li>“富比较”方法，参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__lt__">https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__lt__</a></li></ul><table><thead><tr><th>语句</th><th>特殊方法</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td><code>obj &lt; other</code></td><td><code>__lt__(self, other) -&gt; bool</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &lt;= other</code></td><td><code>__le__(self, other) -&gt; bool</code></td><td align="left"></td><td></td></tr><tr><td><code>obj == other</code></td><td><code>__eq__(self, other) -&gt; bool</code></td><td align="left">默认返回 <code>obj is other</code> ，如果结果为 <code>False</code> ，则会返回 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#the-standard-type-hierarchy"><code>NotImplemented</code></a> 。</td><td></td></tr><tr><td><code>obj != other</code></td><td><code>__ne__(self, other) -&gt; bool</code></td><td align="left">默认返回 <code>not obj.__eq__(other)</code> 。</td><td></td></tr><tr><td><code>obj &gt; other</code></td><td><code>__gt__(self, other) -&gt; bool</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &gt;= other</code></td><td><code>__ge__(self, other) -&gt; bool</code></td><td align="left"></td><td></td></tr></tbody></table><ul><li>自定义属性访问，参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#customizing-attribute-access">https://docs.python.org/zh-cn/3/reference/datamodel.html#customizing-attribute-access</a></li></ul><table><thead><tr><th>语句</th><th>特殊方法</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td><code>obj.name</code></td><td><code>__getattr__(self, name) -&gt; *</code></td><td align="left">优先调用。当抛出 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a> 时转向调用 <code>__getattribute__()</code> 。</td><td></td></tr><tr><td><code>obj.name</code></td><td><code>__getattribute__(self, name) -&gt; *</code></td><td align="left">参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#customizing-attribute-access">自定义属性访问</a> 避免无限递归。</td><td></td></tr><tr><td><code>obj.name = value</code></td><td><code>__setattr__(self, name, value)</code></td><td align="left"></td><td></td></tr><tr><td><code>del obj.name</code></td><td><code>__delattr__(self, name)</code></td><td align="left">仅在 <code>del obj.name</code> 对于该对象有意义时才应该被实现。</td><td></td></tr></tbody></table><ul><li>模拟容器类型，参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#emulating-container-types">https://docs.python.org/zh-cn/3/reference/datamodel.html#emulating-container-types</a></li></ul><table><thead><tr><th>语句</th><th>特殊方法</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td><code>len(obj)</code></td><td><code>__len__(self) -&gt; int</code></td><td align="left"></td><td></td></tr><tr><td><code>op.length_hint(obj)</code></td><td><code>__length_hint__(self) -&gt; int</code></td><td align="left">在使用标准库 <a href="https://docs.python.org/zh-cn/3/library/operator.html">operator</a> 的 <a href="https://docs.python.org/zh-cn/3/library/operator.html#operator.length_hint"><code>length_hint()</code></a> 时会被调用（Python 3.4+）。</td><td></td></tr><tr><td><code>obj[key]</code></td><td><code>__getitem__(self, key) -&gt; *</code></td><td align="left">需要抛出 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#IndexError">IndexError</a> 以便正确地结束 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for">for</a> 循环。</td><td></td></tr><tr><td><code>obj[key]</code></td><td><code>__missing__(self, key) -&gt; *</code></td><td align="left">仅在 dict 的子类找不到键时被调用（不能重写 <code>__getitem__</code> 方法）。</td><td></td></tr><tr><td><code>obj[key] = value</code></td><td><code>__setitem__(self, key, value)</code></td><td align="left"><code>a[1:2] = b</code> 实际上是 <code>a[slice(1, 2, None)] = b</code> ，其它情形及在其余方法中同理。详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#slice"><code>slice()</code></a> 。</td><td></td></tr><tr><td><code>del obj[key]</code></td><td><code>__delitem__(self, key)</code></td><td align="left"></td><td></td></tr><tr><td><em>调用途径有很多</em></td><td><code>__iter__(self) -&gt; Iterator</code></td><td align="left">在需要创建一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterator">迭代器</a> 时被调用，例如使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#iter"><code>iter()</code></a> 、 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for"><code>for</code> 循环</a> 。<br>最好返回一个新对象，因为迭代器在语义上是一次性的。若返回 <code>self</code> ，则必须实现 <code>__next__()</code> 方法。</td><td></td></tr><tr><td><code>reversed(obj)</code></td><td><code>__reversed__(self) -&gt; *</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#reversed"><code>reversed()</code></a> 。</td><td></td></tr><tr><td><code>item in obj</code></td><td><code>__contains__(self, item) -&gt; bool</code></td><td align="left">对于未定义该方法的对象在 <code>in</code> 和 <code>not in</code> 时，参考 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#membership-test-details">成员检测运算</a> 。</td><td></td></tr></tbody></table><ul><li>模拟数字类型，参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#emulating-numeric-types">https://docs.python.org/zh-cn/3/reference/datamodel.html#emulating-numeric-types</a></li></ul><table><thead><tr><th>语句</th><th>特殊方法</th><th align="left">备注</th><th></th></tr></thead><tbody><tr><td><code>+obj</code></td><td><code>__neg__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>-obj</code></td><td><code>__pos__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>~obj</code></td><td><code>__invert__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>abs(obj)</code></td><td><code>__abs__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>int(obj)</code></td><td><code>__int__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>float(obj)</code></td><td><code>__float__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>complex(obj)</code></td><td><code>__complex__(self) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>round(obj)</code></td><td><code>__round__(self) -&gt; int</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#round"><code>round()</code></a> 。</td><td></td></tr><tr><td><code>round(obj)</code></td><td><code>__round__(self, ndigits) -&gt; *</code></td><td align="left">详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#round"><code>round()</code></a> 。</td><td></td></tr><tr><td><code>math.ceil(obj)</code></td><td><code>__ceil__(self) -&gt; int</code></td><td align="left">详见标准库 <a href="https://docs.python.org/zh-cn/3/library/math.html#module-math">math</a> 的 <a href="https://docs.python.org/zh-cn/3/library/math.html#math.ceil"><code>ceil()</code></a> 。</td><td></td></tr><tr><td><code>math.floor(obj)</code></td><td><code>__floor__(self) -&gt; int</code></td><td align="left">详见标准库 <a href="https://docs.python.org/zh-cn/3/library/math.html#module-math">math</a> 的 <a href="https://docs.python.org/zh-cn/3/library/math.html#math.floor"><code>floor()</code></a> 。</td><td></td></tr><tr><td><code>math.trunc(obj)</code></td><td><code>__trunc__(self) -&gt; int</code></td><td align="left">详见标准库 <a href="https://docs.python.org/zh-cn/3/library/math.html#module-math">math</a> 的 <a href="https://docs.python.org/zh-cn/3/library/math.html#math.trunc"><code>trunc()</code></a> 。</td><td></td></tr><tr><td></td><td><code>__index__(self) -&gt; int</code></td><td align="left">需要无损地将数值转换为整数的时候会被调用。详见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__index__">这里</a> 。</td><td></td></tr><tr><td><code>obj + other</code></td><td><code>__add__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj - other</code></td><td><code>__sub__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj * other</code></td><td><code>__mul__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj @ other</code></td><td><code>__matmul__(self, other) -&gt; *</code></td><td align="left">为第三方库而生的矩阵乘法运算符，<a href="https://docs.python.org/zh-cn/3/reference/expressions.html#binary-arithmetic-operations">这里</a>提了一嘴。（Python 3.5+）</td><td></td></tr><tr><td><code>obj / other</code></td><td><code>__truediv__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj // other</code></td><td><code>__floordiv__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj % other</code></td><td><code>__mod__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>divmod(obj, other)</code></td><td><code>__divmod__(self, other) -&gt; tuple</code></td><td align="left"><code>divmod(a, b)</code> 返回一个元组 <code>(a // b, a % b)</code> ，详见 <a href="https://docs.python.org/zh-cn/3/library/functions.html#divmod"><code>divmod()</code></a> 。</td><td></td></tr><tr><td><code>obj ** exp</code></td><td><code>__pow__(self, exp) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>pow(obj, exp, mod)</code></td><td><code>__pow__(self, exp, mod) -&gt; *</code></td><td align="left"><code>pow(base, exp, mod)</code> 比 <code>pow(base, exp) % mod</code> 更高效。</td><td></td></tr><tr><td><code>obj &lt;&lt; other</code></td><td><code>__lshift__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &gt;&gt; other</code></td><td><code>__rshift__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &amp; other</code></td><td><code>__and__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj ^ other</code></td><td><code>__xor__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj | other</code></td><td><code>__or__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other + obj</code></td><td><code>__radd__(self, obj) -&gt; *</code></td><td align="left">仅当 obj 未定义 <code>__add__()</code> 或其返回 <code>NotImplemented</code> ，<br>且与 other 互相都没有继承关系时，调用 other 的 <code>__radd__()</code> 。详见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__radd__">这里</a> 。</td><td></td></tr><tr><td><code>other - obj</code></td><td><code>__rsub__(self, obj) -&gt; *</code></td><td align="left">以下，如此类推。</td><td></td></tr><tr><td><code>other * obj</code></td><td><code>__rmul__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other @ obj</code></td><td><code>__rmatmul__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other / obj</code></td><td><code>__rtruediv__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other // obj</code></td><td><code>__rfloordiv__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other % obj</code></td><td><code>__rmod__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>divmod(other, obj)</code></td><td><code>__rdivmod__(self, obj) -&gt; tuple</code></td><td align="left"></td><td></td></tr><tr><td><code>other ** obj</code></td><td><code>__rpow__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td></td><td><code>__rpow__(self, obj, mod) -&gt; *</code></td><td align="left"><code>pow(obj, other, mod)</code> 不会尝试调用 <code>other.__rpow__(obj, mod)</code> ，因为强制转换规则会太过复杂。</td><td></td></tr><tr><td><code>other &lt;&lt; obj</code></td><td><code>__rlshift__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other &gt;&gt; obj</code></td><td><code>__rrshift__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other &amp; obj</code></td><td><code>__rand__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other ^ obj</code></td><td><code>__rxor__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>other | obj</code></td><td><code>__ror__(self, obj) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj += other</code></td><td><code>__iadd__(self, other) -&gt; *</code></td><td align="left">若方法已定义，则 <code>a += b</code> 等价于 <code>a.__iadd(b)</code> ；<br>若未定义，则回退到 <code>a + b</code> 选择 <code>x.__add__(y)</code> 和 <code>y.__radd__(x)</code> 。</td><td></td></tr><tr><td><code>obj -= other</code></td><td><code>__isub__(self, other) -&gt; *</code></td><td align="left">以下，如此类推。</td><td></td></tr><tr><td><code>obj *= other</code></td><td><code>__imul__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj @= other</code></td><td><code>__imatmul__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj /= other</code></td><td><code>__itruediv__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj //= other</code></td><td><code>__ifloordiv__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj %= other</code></td><td><code>__imod__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj **= exp</code></td><td><code>__ipow__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &lt;&lt;= other</code></td><td><code>__ilshift__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &gt;&gt;= other</code></td><td><code>__irshift__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj &amp;= other</code></td><td><code>__iand__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj ^= other</code></td><td><code>__ixor__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr><tr><td><code>obj |= other</code></td><td><code>__ior__(self, other) -&gt; *</code></td><td align="left"></td><td></td></tr></tbody></table><h2 id="Python-类型标注-Python-3-5"><a href="#Python-类型标注-Python-3-5" class="headerlink" title="Python 类型标注 (Python 3.5+)"></a>Python 类型标注 (Python 3.5+)</h2><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string: <span class="built_in">str</span> = <span class="string">&quot;ha&quot;</span></span><br><span class="line">times: <span class="built_in">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(string * times)  <span class="comment"># =&gt; hahaha</span></span><br></pre></td></tr></table></figure><h3 id="变量-2"><a href="#变量-2" class="headerlink" title="变量"></a>变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result: <span class="built_in">str</span> = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure><p>错误的类型标注不会影响正常运行，也不会报错</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">name: <span class="built_in">str</span>, start: <span class="built_in">str</span> = <span class="string">&quot;Hi&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> start + <span class="string">&quot;, &quot;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(say(<span class="string">&quot;Python&quot;</span>))  <span class="comment"># =&gt; Hi, Python</span></span><br></pre></td></tr></table></figure><h3 id="位置参数-1"><a href="#位置参数-1" class="headerlink" title="位置参数"></a>位置参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_summary</span>(<span class="params">*args: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(args)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc_summary(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>))  <span class="comment"># =&gt; 8</span></span><br></pre></td></tr></table></figure><p>表示 args 的所有元素都是 int 类型的。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">name</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line"></span><br><span class="line">var = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(say_hello(var))  <span class="comment"># =&gt; Hello, Python</span></span><br></pre></td></tr></table></figure><h3 id="多种可能的返回值"><a href="#多种可能的返回值" class="headerlink" title="多种可能的返回值"></a>多种可能的返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resp200</span>(<span class="params">meaningful</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span> <span class="keyword">if</span> meaningful <span class="keyword">else</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p>表示返回值可能是 int，也可能是 str 。</p><h3 id="关键字参数-1"><a href="#关键字参数-1" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_summary</span>(<span class="params">**kwargs: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(kwargs.values())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc_summary(a=<span class="number">1</span>, b=<span class="number">2</span>))  <span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure><p>表示 kwargs 的所有值都是 int 类型的。</p><h3 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resp200</span>() -&gt; (<span class="built_in">int</span>, <span class="built_in">str</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span>, <span class="string">&quot;OK&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多种可能的返回值-3-10"><a href="#多种可能的返回值-3-10" class="headerlink" title="多种可能的返回值 (3.10+)"></a>多种可能的返回值 (3.10+)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resp200</span>(<span class="params">meaningful</span>) -&gt; <span class="built_in">int</span> | <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span> <span class="keyword">if</span> meaningful <span class="keyword">else</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p>自 Python 3.10 起可用。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">        <span class="variable language_">self</span>.graduated: <span class="built_in">bool</span> = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="标注自己"><a href="#标注自己" class="headerlink" title="标注自己"></a>标注自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>) -&gt; <span class="string">&quot;Employee&quot;</span>:</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><p>这里表示 set_name() 返回了一个 Employee 对象。</p><h3 id="标注自己-3-11"><a href="#标注自己-3-11" class="headerlink" title="标注自己 (3.11+)"></a>标注自己 (3.11+)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Self</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self: Self, name</span>) -&gt; Self:</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><h3 id="标注一个值为类型的参数"><a href="#标注一个值为类型的参数" class="headerlink" title="标注一个值为类型的参数"></a>标注一个值为类型的参数</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Type</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&quot;T&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;mapper&quot; 的值是一个像 int、str、MyClass 这样的类型</span></span><br><span class="line"><span class="comment"># &quot;default&quot; 是一个 T 类型的值，比如 314、&quot;string&quot;、MyClass()</span></span><br><span class="line"><span class="comment"># 函数的返回值也是一个 T 类型的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">converter</span>(<span class="params">raw, mapper: <span class="type">Type</span>[T], default: T</span>) -&gt; T:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> mapper(raw)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">raw: <span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>)</span><br><span class="line">result: <span class="built_in">int</span> = converter(raw, mapper=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="标注一个值为函数的参数"><a href="#标注一个值为函数的参数" class="headerlink" title="标注一个值为函数的参数"></a>标注一个值为函数的参数</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Callable</span>, <span class="type">Any</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&quot;T&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">converter</span>(<span class="params">raw, mapper: <span class="type">Callable</span>[[<span class="type">Any</span>], T], default: T</span>) -&gt; T:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> mapper(raw)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Callable[[Any], T] 表示值是一个像这样声明的函数:</span></span><br><span class="line"><span class="comment"># def anynomous(arg: Any) -&gt; T:</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_success</span>(<span class="params">value</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">in</span> (<span class="number">0</span>, <span class="string">&quot;OK&quot;</span>, <span class="literal">True</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line"></span><br><span class="line">resp = <span class="built_in">dict</span>(code=<span class="number">0</span>, message=<span class="string">&quot;OK&quot;</span>, data=[])</span><br><span class="line">successed: <span class="built_in">bool</span> = converter(resp.message, mapper=is_success, default=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="各种各样的"><a href="#各种各样的" class="headerlink" title="各种各样的"></a>各种各样的</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是单行注释</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 可以写多行字符串</span></span><br><span class="line"><span class="string">    使用三个&quot;，并且经常使用</span></span><br><span class="line"><span class="string">    作为文档。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; 可以写多行字符串</span></span><br><span class="line"><span class="string">    使用三个&#x27;，并且经常使用</span></span><br><span class="line"><span class="string">    作为文档。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_numbers</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> i + i</span><br></pre></td></tr></table></figure><p>生成器可帮助您编写惰性代码</p><h3 id="要列出的生成器"><a href="#要列出的生成器" class="headerlink" title="要列出的生成器"></a>要列出的生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values = (-x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">gen_to_list = <span class="built_in">list</span>(values)</span><br><span class="line"><span class="comment"># =&gt; [-1, -2, -3, -4, -5]</span></span><br><span class="line"><span class="built_in">print</span>(gen_to_list)</span><br></pre></td></tr></table></figure><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><!--rehype:wrap-class=col-span-3--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 使用“raise”来引发错误</span></span><br><span class="line">    <span class="keyword">raise</span> IndexError(<span class="string">&quot;这是一个索引错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span>                 <span class="comment"># pass只是一个空操作。 通常你会在这里做恢复。</span></span><br><span class="line"><span class="keyword">except</span> (TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span>                 <span class="comment"># 如果需要，可以一起处理多个异常。</span></span><br><span class="line"><span class="keyword">else</span>:                    <span class="comment"># try/except 块的可选子句。 必须遵循除块之外的所有内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All good!&quot;</span>)   <span class="comment"># 仅当 try 中的代码未引发异常时运行</span></span><br><span class="line"><span class="keyword">finally</span>:                 <span class="comment"># 在所有情况下执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我们可以在这里清理资源&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="pyenv-pipenv"><a href="#pyenv-pipenv" class="headerlink" title="pyenv &amp; pipenv"></a>pyenv &amp; pipenv</h3><!--rehype:wrap-class=col-span-3--><p>pvenv 用于管理python版本，pipenv 用于管理项目包版本</p><h4 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 pyenv</span></span><br><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure><p><a href="https://github.com/pyenv/pyenv#installation">更多安装方式</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 python 版本</span></span><br><span class="line">pyenv install 3.10.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 python 版本</span></span><br><span class="line">pyenv global 3.10.12 # 全局设置</span><br><span class="line">pyenv shell  3.10.12 # 针对当前 shell session</span><br><span class="line">pyenv local  3.10.12 # 针对当前目录 </span><br></pre></td></tr></table></figure><h4 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 pipenv</span></span><br><span class="line">pip install pipenv --user  # pip</span><br><span class="line">brew install pipenv        # homebrew</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 pipenv</span></span><br><span class="line">pip install --user --upgrade pipenv # pip</span><br><span class="line">brew upgrade pipenv                 # homebrew</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 pipenv 命令加入到系统环境变量 <span class="variable">$PATH</span> 中 (Unix and MacOS)</span></span><br><span class="line">dir=$(python -c &#x27;import site; print(site.USER_BASE + &quot;/bin&quot;)&#x27;) # 打印 python site-packages bin 路径</span><br><span class="line">echo &#x27;export PATH=&quot;&#x27;$dir&#x27;:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc # 将 dir 路径加入到 PATH 中</span><br><span class="line">source ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 package</span></span><br><span class="line">pipenv install &lt;package name&gt; # 不指定版本</span><br><span class="line">pipenv install &lt;package name&gt;==&lt;version&gt;    # 精确指定版本</span><br><span class="line">pipenv install &lt;package name&gt;~=&lt;version&gt;    # 指定版本范围，例如 1.1则表示安装1.x的最新版本，1.0.1则表示安装1.0.x的最新版本</span><br><span class="line">pipenv install &quot;&lt;package name&gt;=&lt;version&gt;&quot;   # 大于等于指定版本</span><br><span class="line">pipenv install &quot;&lt;package name&gt;=&lt;version&gt;&quot;   # 小于等于指定版本</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 python 版本</span></span><br><span class="line">pipenv --python 3.10.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活当前目录虚拟环境</span></span><br><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://www.python.org/">Python 官方网站</a>  <em>(python.org)</em></li><li><a href="https://docs.python.org/zh-cn/3/index.html">Python 文档</a>  <em>(docs.python.org)</em></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/python-cn/">Y 分钟学会 Python</a> <em>(learnxinyminutes.com)</em></li><li><a href="./regex.md#python-%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">Python 中的正则表达式</a> <em>(jaywcjlove.github.io)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-3-备忘清单&quot;&gt;&lt;a href=&quot;#Python-3-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;Python 3 备忘清单&quot;&gt;&lt;/a&gt;Python 3 备忘清单&lt;/h1&gt;&lt;p&gt;Python 备忘单是 &lt;a href=&quot;https</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://tdcqcx.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/vue%20(1)/"/>
    <id>https://tdcqcx.github.io/2025/01/08/vue%20(1)/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-3-备忘清单"><a href="#Vue-3-备忘清单" class="headerlink" title="Vue 3 备忘清单"></a>Vue 3 备忘清单</h1><p><a href="https://npmjs.org/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?style=flat" alt="NPM version"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a><br><a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/dm/vue.svg?style=flat" alt="Downloads"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a><br><a href="https://github.com/vuejs/core/network/dependents"><img src="https://badgen.net/github/dependents-repo/vuejs/core" alt="Repo Dependents"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a><br><a href="https://github.com/vuejs/core"><img src="https://badgen.net/badge/icon/Github?icon=github&label" alt="Github repo"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p><p>渐进式 JavaScript 框架 <a href="https://cn.vuejs.org/">Vue 3</a> 备忘清单的快速参考列表，包含常用 API 和示例</p><!--rehype:style=padding-top: 12px;--><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Vue 是一套用于构建用户界面的渐进式框架</p><ul><li><a href="https://cn.vuejs.org/">Vue 3.x 官方文档</a> <em>(cn.vuejs.org)</em></li><li><a href="https://router.vuejs.org/zh/">Vue Router 4.x 官方文档</a> <em>(router.vuejs.org)</em></li><li><a href="./vue2.md">Vue 2 备忘清单</a></li></ul><!--rehype:className=style-round--><p>注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><!--rehype:wrap-class=row-span-3--><p>已安装 <code>16.0</code> 或更高版本的 Node.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init vue@latest</span><br></pre></td></tr></table></figure><p>指令将会安装并执行 <a href="https://www.npmjs.com/package/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">✔ Project name: … &lt;your-project-name&gt;</span><br><span class="line">✔ Add TypeScript? … No/Yes</span><br><span class="line">✔ Add JSX Support? … No/Yes</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … No/Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No/Yes</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit testing? … No/Yes</span><br><span class="line">✔ Add Cypress <span class="keyword">for</span> both Unit and End-to-End testing? … No/Yes</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … No/Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No/Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> ./&lt;your-project-name&gt;...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><p>安装依赖并启动开发服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>当你准备将应用发布到生产环境时，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>此命令会在 <code>./dist</code> 文件夹中为你的应用创建一个生产环境的构建版本</p><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>挂载应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过-CDN-使用-Vue"><a href="#通过-CDN-使用-Vue" class="headerlink" title="通过 CDN 使用 Vue"></a>通过 CDN 使用 Vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp, ref &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        message</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h3 id="使用-ES-模块构建版本"><a href="#使用-ES-模块构建版本" class="headerlink" title="使用 ES 模块构建版本"></a>使用 ES 模块构建版本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message, ref &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        message</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用的是 <code>Mustache</code> 语法 (即双大括号)，每次 <code>msg</code> 属性更改时它也会同步更新</p><h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>双大括号<code>&#123;&#123;&#125;&#125;</code>会将数据解释为纯文本，使用 <code>v-html</code> 指令，将插入 HTML</p><h3 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布尔型-Attribute"><a href="#布尔型-Attribute" class="headerlink" title="布尔型 Attribute"></a>布尔型 Attribute</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span></span><br><span class="line">  Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text --><h3 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h3><!--rehype:wrap-class=row-span-2--><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> comp <span class="keyword">from</span> <span class="string">&quot;./Comp.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="string">&quot;world&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123;a, b&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你是使用的 <code>setup</code> 语法糖。需要使用 <code>defineprops</code> 声名（可以直接使用<code>a</code>&#x2F;<code>b</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;`list-$&#123;id&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="仅支持表达式-例子都是无效"><a href="#仅支持表达式-例子都是无效" class="headerlink" title="仅支持表达式(例子都是无效)"></a>仅支持表达式(例子都是无效)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个语句，而非表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;toTitleDate(date)&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; formatDate(date) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数-Arguments"><a href="#参数-Arguments" class="headerlink" title="参数 Arguments"></a>参数 Arguments</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <code>attributeName</code> 会作为一个 JS 表达式被动态执行</p><h3 id="动态的事件名称"><a href="#动态的事件名称" class="headerlink" title="动态的事件名称"></a>动态的事件名称</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修饰符-Modifiers"><a href="#修饰符-Modifiers" class="headerlink" title="修饰符 Modifiers"></a>修饰符 Modifiers</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code></p><h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-on:submit.prevent=<span class="string">&quot;onSubmit&quot;</span></span><br><span class="line">──┬─ ─┬──── ─┬─────  ─┬──────</span><br><span class="line">  ┆   ┆      ┆        ╰─ Value 解释为JS表达式</span><br><span class="line">  ┆   ┆      ╰─ Modifiers 由前导点表示</span><br><span class="line">  ┆   ╰─ Argument 跟随冒号或速记符号</span><br><span class="line">  ╰─ Name 以 v- 开头使用速记时可以省略</span><br></pre></td></tr></table></figure><h2 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h2><h3 id="声明状态"><a href="#声明状态" class="headerlink" title="声明状态"></a>声明状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; state.count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><figcaption><span>&#123;6,7,11&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `defineComponent`用于IDE推导类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// setup 用于组合式 API 的特殊钩子函数</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露 state 到模板</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; state.count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><figcaption><span>&#123;7-9,14&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不要忘记同时暴露 increment 函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="setup语法糖"><a href="#setup语法糖" class="headerlink" title="&lt;script setup&gt; setup语法糖"></a><code>&lt;script setup&gt;</code> setup语法糖</h3><figure class="highlight html"><figcaption><span>&#123;1&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  state.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; state.count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>setup</code></strong> 语法糖用于简化代码，尤其是当需要暴露的状态和方法越来越多时</p><h3 id="用-ref-定义响应式变量"><a href="#用-ref-定义响应式变量" class="headerlink" title="用 ref() 定义响应式变量"></a>用 <code>ref()</code> 定义响应式变量</h3><!--rehype:wrap-class=row-span-2--><p><code>reactive</code>只能用于对象、数组和 <code>Map</code>、<code>Set</code> 这样的集合类型，对 string、number 和 boolean 这样的原始类型则需要使用<code>ref</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// &#123; value: 0 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 0</span></span><br><span class="line">count.<span class="property">value</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> objectRef = <span class="title function_">ref</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是响应式的替换</span></span><br><span class="line">objectRef.<span class="property">value</span> = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="title function_">ref</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">bar</span>: <span class="title function_">ref</span>(<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 该函数接收一个 ref</span></span><br><span class="line"><span class="comment">// 需要通过 .value 取值</span></span><br><span class="line"><span class="comment">// 但它会保持响应性</span></span><br><span class="line"><span class="title function_">callSomeFunction</span>(obj.<span class="property">foo</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仍然是响应式的</span></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = obj;</span><br></pre></td></tr></table></figure><p>在 html 模板中不需要带 <code>.value</code> 就可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="有状态方法"><a href="#有状态方法" class="headerlink" title="有状态方法"></a>有状态方法</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, defineComponent, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 每个实例都有了自己的预置防抖的处理函数</span></span><br><span class="line">    <span class="keyword">const</span> debouncedClick = <span class="title function_">debounce</span>(click, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ... 对点击的响应 ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最好是在组件卸载时</span></span><br><span class="line">    <span class="comment">// 清除掉防抖计时器</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      debouncedClick.<span class="title function_">cancel</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应式样式"><a href="#响应式样式" class="headerlink" title="响应式样式"></a>响应式样式</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> open = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;open = !open&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: height <span class="number">0.1s</span> linear;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="built_in">v-bind</span>(open ? <span class="string">&#x27;30px&#x27;</span> : <span class="string">&#x27;0px&#x27;</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式进阶-——-watch-和-computed"><a href="#响应式进阶-——-watch-和-computed" class="headerlink" title="响应式进阶 —— watch 和 computed"></a>响应式进阶 —— watch 和 computed</h2><h3 id="监听状态"><a href="#监听状态" class="headerlink" title="监听状态"></a>监听状态</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isEvent = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  state.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(count, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  isEvent.<span class="property">value</span> = count.<span class="property">value</span> % <span class="number">2</span> === <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    is event: &#123;&#123; isEvent ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="立即监听状态"><a href="#立即监听状态" class="headerlink" title="立即监听状态"></a>立即监听状态</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(count, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isEvent.<span class="property">value</span> = count.<span class="property">value</span> % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="comment">// 上例中的 watch 不会立即执行，导致 isEvent 状态的初始值不准确。配置立即执行，会在一开始的时候立即执行一次</span></span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="监听多个值"><a href="#监听多个值" class="headerlink" title="监听多个值"></a>监听多个值</h3><!--rehype:wrap-class=col-span-2 row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; count1 &#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; count2 &#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count1++&quot;</span>&gt;</span>count1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count2++&quot;</span>&gt;</span>count2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; watch, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count1 = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count2 = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听的表达式或函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count1</span>: count1.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count2</span>: count2.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;),</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 回调函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在这里执行需要的逻辑</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count1 或 count2 变化了：&#x27;</span>, newValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// immediate: true 表示在初始渲染时立即执行一次回调函数，以便处理初始的状态。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// deep: true 表示深度监听，即对 newValue 和 oldValue 进行深层比较，而不是简单的引用比较。</span></span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算状态"><a href="#计算状态" class="headerlink" title="计算状态"></a>计算状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// computed 的回调函数里</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 会根据已有并用到的状态计算出新的状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> capital = <span class="title function_">computed</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> text.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>to capital: &#123;&#123; capital &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里可以将 `username` 解构出来，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 但是一旦解构出来再使用，就不具备响应式能力</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>username: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件定义需要的参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> username = <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span> <span class="attr">:username</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件参入参数</p><h3 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineEmits, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;search&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;search&#x27;</span>, keyword.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onSearch&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件定义支持 <code>emit</code> 的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params">keyword</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span> @<span class="attr">search</span>=<span class="string">&quot;onSearch&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件绑定子组件定义的事件</p><h3 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineExpose, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123; onSearch &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件对父组件暴露方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> childrenRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  childrenRef.<span class="property">value</span>.<span class="title function_">onSearch</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span> <span class="attr">ref</span>=<span class="string">&#x27;childrenRef&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onSearch&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件调用子组件的方法</p><h3 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide &#x2F; Inject"></a>Provide &#x2F; Inject</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">InjectionKey</span>, <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ProvideKey</span> = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;<span class="title class_">Ref</span>&lt;<span class="built_in">string</span>&gt;&gt;</span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><p>在应用中使用 <code>ProvideKey</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">ProvideKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = ref&lt;string&gt;(<span class="string">&#x27;123&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="title class_">ProvideKey</span>, text)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件为后代组件提供数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProvideKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="title class_">ProvideKey</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>后代组件注入父组件提供的数据</p><!--rehype:className=wrap-text --><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="1-路由的基本使用"><a href="#1-路由的基本使用" class="headerlink" title="1. 路由的基本使用"></a>1. 路由的基本使用</h3><h4 id="开启命名空间后，组件中读取state数据"><a href="#开启命名空间后，组件中读取state数据" class="headerlink" title="开启命名空间后，组件中读取state数据"></a>开启命名空间后，组件中读取state数据</h4><p>方式一：自己直接读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br></pre></td></tr></table></figure><p>方式二：借助 mapState 读取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[</span><br><span class="line">  <span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span></span><br><span class="line">]),</span><br></pre></td></tr></table></figure><h4 id="开启命名空间后，组件中读取getters数据"><a href="#开启命名空间后，组件中读取getters数据" class="headerlink" title="开启命名空间后，组件中读取getters数据"></a>开启命名空间后，组件中读取getters数据</h4><p>方式一：自己直接读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[</span><br><span class="line">  <span class="string">&#x27;personAbout/firstPersonName&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>方式二：借助 mapGetters 读取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="开启命名空间后，组件中调用dispatch"><a href="#开启命名空间后，组件中调用dispatch" class="headerlink" title="开启命名空间后，组件中调用dispatch"></a>开启命名空间后，组件中调用dispatch</h4><p>方式一：自己直接 dispatch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(</span><br><span class="line">  <span class="string">&#x27;personAbout/addPersonWang&#x27;</span>, person</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>方式二：借助mapActions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">incrementOdd</span>:<span class="string">&#x27;jia0dd&#x27;</span>,</span><br><span class="line">  <span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="开启命名空间后，组件中调用commit"><a href="#开启命名空间后，组件中调用commit" class="headerlink" title="开启命名空间后，组件中调用commit"></a>开启命名空间后，组件中调用commit</h4><p>方式一：自己直接 commit</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(</span><br><span class="line">  <span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>, person</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>方式二：借助 mapMutations:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="2-路由的使用"><a href="#2-路由的使用" class="headerlink" title="2. 路由的使用"></a>2. 路由的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">// 创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 暴露 router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span><br><span class="line">  About</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定展示位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-diew</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>几个注意点</p><ul><li>路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的$route属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的srouter 属性获取到。</li></ul><!--rehype:className=style-list-arrow--><h3 id="3-路由的query"><a href="#3-路由的query" class="headerlink" title="3.路由的query"></a>3.路由的query</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- to的对象写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item of data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                    path:&#x27;/home/message/mes&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    query: &#123; id:item.id, title:item.mes &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">                &#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>&#123;&#123;item.mes&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;HomeChild1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:[</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">mes</span>:<span class="string">&quot;消息1&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">mes</span>:<span class="string">&quot;消息2&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">mes</span>:<span class="string">&quot;消息3&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list</span> &#123; <span class="attribute">margin-left</span>:<span class="number">80px</span>; &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.link</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>接收参数 <code>&#123;&#123;$route.query.id&#125;&#125;</code></p></blockquote><h4 id="跳转路由并携带参数"><a href="#跳转路由并携带参数" class="headerlink" title="跳转路由并携带参数"></a>跳转路由并携带参数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item of data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:to</span>=<span class="string">&quot;`/home/message/mes?id=$&#123;item.id&#125;&amp;title=$&#123;item.mes&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      &#123;&#123;item.mes&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-命名路由"><a href="#4-命名路由" class="headerlink" title="4. 命名路由"></a>4. 命名路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>:<span class="title class_">AboutBody</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">HomeBody</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123; <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="attr">component</span>:<span class="title class_">HomeChild</span> &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">              <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>:<span class="title class_">HomeChild1</span>,</span><br><span class="line">              <span class="comment">//多级路由</span></span><br><span class="line">              <span class="attr">children</span>:[</span><br><span class="line">                  &#123; <span class="attr">name</span>:<span class="string">&#x27;richu&#x27;</span>, <span class="attr">path</span>:<span class="string">&#x27;mes&#x27;</span>, <span class="attr">component</span>:<span class="title class_">HomeMessage</span> &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; </span></span></span><br><span class="line"><span class="string"><span class="tag">  name:&#x27;&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">  path:&#x27;/home/message/mes&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">​  query:&#123; id:item.id,title:item.mes &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 5.params参数的使用</span><br><span class="line"></span><br><span class="line">#### 1. 声明接收</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">children:[</span><br><span class="line">    &#123;</span><br><span class="line">        name:&#x27;richu&#x27;,</span><br><span class="line">        path:&#x27;mes/:id/:title&#x27;,</span><br><span class="line">        component:HomeMessage</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2-传递"><a href="#2-传递" class="headerlink" title="2. 传递"></a>2. 传递</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item of data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:to</span>=<span class="string">&quot;`/home/message/mes/$&#123;item.id&#125;/$&#123;item.mes&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123;item.mes&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-接收"><a href="#3-接收" class="headerlink" title="3. 接收"></a>3. 接收</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>编号&#123;&#123;$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>标题&#123;&#123;$route.params.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-props的使用"><a href="#6-props的使用" class="headerlink" title="6.props的使用"></a>6.props的使用</h3><p>路由的props配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：让路由组件更方便的收到参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detai1组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900]</span></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detai1组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;router-link&gt; 的 replace 属性</p><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为 push和replace,默认为push</li><li>如何开启replace 模式： <code>push</code> 是追加历史记录,<code>replace</code> 是替换当前记录[路由跳转时候 <code>&lt;router-link replace&gt;News\&lt;/router-link&gt;</code>]</li></ol><h3 id="7-编程式路由导航"><a href="#7-编程式路由导航" class="headerlink" title="7. 编程式路由导航"></a>7. 编程式路由导航</h3><p>作用：不借助router-link实现路由跳转，让跳转更加灵活</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>: xxx,</span><br><span class="line">        <span class="attr">title</span>: xxx</span><br><span class="line">        <span class="comment">// 实现路由跳转，让路由跳转更加灵活</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="8-缓存路由组件"><a href="#8-缓存路由组件" class="headerlink" title="8.缓存路由组件"></a>8.缓存路由组件</h3><p>让不展示的路由组件保持挂载，不被销毁，示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>include</code> 里面写模块名,用于保存指定的模块</li></ul><h3 id="9-新生命周期钩子"><a href="#9-新生命周期钩子" class="headerlink" title="9.新生命周期钩子"></a>9.新生命周期钩子</h3><blockquote><p>作用：路由组件独有的，用于捕获路由组件的激活状态</p></blockquote><ul><li><code>activated</code> 路由组件被激活时触发</li><li><code>deactivated</code> 路由组件失活时触发</li></ul><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="1-前置路由守卫"><a href="#1-前置路由守卫" class="headerlink" title="1.前置路由守卫"></a>1.前置路由守卫</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">route.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params"><span class="keyword">from</span>,to,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前置路由</p><h3 id="2-后置路由守卫"><a href="#2-后置路由守卫" class="headerlink" title="2.后置路由守卫"></a>2.后置路由守卫</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">route.<span class="title function_">afterEach</span>(<span class="function">(<span class="params"><span class="keyword">from</span>,to</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span>=<span class="keyword">from</span>.<span class="property">meta</span>.<span class="property">title</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后置路由</p><h3 id="3-独享路由守卫"><a href="#3-独享路由守卫" class="headerlink" title="3.独享路由守卫"></a>3.独享路由守卫</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">HomeChild</span>,</span><br><span class="line">    <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&quot;新闻&quot;</span>&#125;,</span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params"><span class="keyword">from</span>,to,next</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>独享路由守卫只有前置路由守卫没有后置路由守卫</p><h3 id="4-组件内路由守卫"><a href="#4-组件内路由守卫" class="headerlink" title="4.组件内路由守卫"></a>4.组件内路由守卫</h3><p>通过路由规则，进入该组件时被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过路由规则，离开组件时被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-中使用-TypeScript"><a href="#Vue-中使用-TypeScript" class="headerlink" title="Vue 中使用 TypeScript"></a>Vue 中使用 TypeScript</h2><h3 id="为组件的-props-标注类型"><a href="#为组件的-props-标注类型" class="headerlink" title="为组件的 props 标注类型"></a>为组件的 props 标注类型</h3><!--rehype:wrap-class=row-span-4--><p>当使用 <code>&lt;script setup&gt;</code> 时，<code>defineProps()</code> 宏函数支持从它的参数中推导类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">foo</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">bar</span>: <span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">props.<span class="property">foo</span> <span class="comment">// string</span></span></span><br><span class="line"><span class="language-javascript">props.<span class="property">bar</span> <span class="comment">// number | undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对同一个文件中的一个接口或对象类型字面量的引用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"></span><br><span class="line">defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br></pre></td></tr></table></figure><h4 id="Props-解构默认值"><a href="#Props-解构默认值" class="headerlink" title="Props 解构默认值"></a>Props 解构默认值</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">msg</span>?: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">labels</span>?: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(), &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">labels</span>: <span class="function">() =&gt;</span> [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用目前为实验性的响应性语法糖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">interface <span class="title class_">Props</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: string</span></span><br><span class="line"><span class="language-javascript">  count?: number</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对 defineProps() 的响应性解构</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 默认值会被编译为等价的运行时选项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  name, count = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125; = defineProps&lt;<span class="title class_">Props</span>&gt;()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为组件的-emits-标注类型"><a href="#为组件的-emits-标注类型" class="headerlink" title="为组件的 emits 标注类型"></a>为组件的 emits 标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 运行时</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;update&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 基于类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: number): <span class="title function_">void</span></span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: string): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为-ref-标注类型"><a href="#为-ref-标注类型" class="headerlink" title="为 ref() 标注类型"></a>为 ref() 标注类型</h3><p>ref 会根据初始化时的值推导其类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">year</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&#x27;2020&#x27;</span>)</span><br><span class="line"></span><br><span class="line">year.<span class="property">value</span> = <span class="number">2020</span> <span class="comment">// 成功！</span></span><br></pre></td></tr></table></figure><h3 id="为-reactive-标注类型"><a href="#为-reactive-标注类型" class="headerlink" title="为 reactive() 标注类型"></a>为 reactive() 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">year</span>?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">book</span>: <span class="title class_">Book</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Vue 3 指引&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为-computed-标注类型"><a href="#为-computed-标注类型" class="headerlink" title="为 computed() 标注类型"></a>为 computed() 标注类型</h3><p>你还可以通过泛型参数显式指定类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = computed&lt;<span class="built_in">number</span>&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 若返回值不是 number 类型则会报错</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为事件处理函数标注类型"><a href="#为事件处理函数标注类型" class="headerlink" title="为事件处理函数标注类型"></a>为事件处理函数标注类型</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// `event` 隐式地标注为 `any` 类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显式地为事件处理函数的参数标注类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为-provide-inject-标注类型"><a href="#为-provide-inject-标注类型" class="headerlink" title="为 provide &#x2F; inject 标注类型"></a>为 provide &#x2F; inject 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">InjectionKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="comment">// 若提供的是非字符串值会导致错误</span></span><br><span class="line"><span class="title function_">provide</span>(key, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// foo 的类型：string | undefined</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">inject</span>(key)</span><br></pre></td></tr></table></figure><h3 id="为模板引用标注类型"><a href="#为模板引用标注类型" class="headerlink" title="为模板引用标注类型"></a>为模板引用标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> el = ref&lt;<span class="title class_">HTMLInputElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  el.<span class="property">value</span>?.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;el&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为组件模板引用标注类型"><a href="#为组件模板引用标注类型" class="headerlink" title="为组件模板引用标注类型"></a>为组件模板引用标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyModal.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isContentShown = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">open</span> = </span></span><br><span class="line"><span class="language-javascript">      (<span class="params"></span>) =&gt; (isContentShown.<span class="property">value</span> = <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  open</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 TypeScript 内置的 <code>InstanceType</code> 工具类型来获取其实例类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyModal</span> <span class="keyword">from</span> <span class="string">&#x27;./MyModal.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">type <span class="title class_">Modal</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">MyModal</span>&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modal = ref&lt;<span class="title class_">Modal</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openModal</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  modal.<span class="property">value</span>?.<span class="title function_">open</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选项式-API-为组件的-props-标注类型"><a href="#选项式-API-为组件的-props-标注类型" class="headerlink" title="选项式 API 为组件的 props 标注类型"></a>选项式 API 为组件的 props 标注类型</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// 启用了类型推导</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">id</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>],</span><br><span class="line">    <span class="attr">msg</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">metadata</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 类型：string | undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    <span class="comment">// 类型：number|string|undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">    <span class="comment">// 类型：string</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">    <span class="comment">// 类型：any</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metadata</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 PropType 这个工具类型来标记更复杂的 props 类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">author</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">year</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: &#123;</span><br><span class="line">      <span class="comment">// 提供相对 `Object` 更确定的类型</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">Book</span>&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 也可以标记函数</span></span><br><span class="line">    <span class="attr">callback</span>: <span class="title class_">Function</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="function">(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">book</span>.<span class="property">title</span> <span class="comment">// string</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">book</span>.<span class="property">year</span> <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TS Error: argument of type &#x27;string&#x27; is not</span></span><br><span class="line">    <span class="comment">// assignable to parameter of type &#x27;number&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span>?.(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-为组件的-emits-标注类型"><a href="#选项式-API-为组件的-emits-标注类型" class="headerlink" title="选项式 API 为组件的 emits 标注类型"></a>选项式 API 为组件的 emits 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Payload</span> = &#123; <span class="attr">bookName</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="title function_">addBook</span>(<span class="params"><span class="attr">payload</span>: <span class="title class_">Payload</span></span>) &#123;</span><br><span class="line">      <span class="comment">// 执行运行时校验</span></span><br><span class="line">      <span class="keyword">return</span> payload.<span class="property">bookName</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addBook&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">bookName</span>: <span class="number">123</span> <span class="comment">// 类型错误</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 类型错误</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;non-declared-event&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-为计算属性标记类型"><a href="#选项式-API-为计算属性标记类型" class="headerlink" title="选项式 API 为计算属性标记类型"></a>选项式 API 为计算属性标记类型</h3><!--rehype:wrap-class=row-span-2--><p>计算属性会自动根据其返回值来推导其类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> <span class="comment">// 类型：string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在某些场景中，你可能想要显式地标记出计算属性的类型以确保其实现是正确的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 显式标注返回类型</span></span><br><span class="line">    <span class="title function_">greeting</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标注一个可写的计算属性</span></span><br><span class="line">    <span class="attr">greetingUppercased</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">greeting</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params"><span class="attr">newValue</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = newValue.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-为事件处理函数标注类型"><a href="#选项式-API-为事件处理函数标注类型" class="headerlink" title="选项式 API 为事件处理函数标注类型"></a>选项式 API 为事件处理函数标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>((event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-扩展全局属性"><a href="#选项式-API-扩展全局属性" class="headerlink" title="选项式 API 扩展全局属性"></a>选项式 API 扩展全局属性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$http</span>: <span class="keyword">typeof</span> axios</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型扩展的位置"><a href="#类型扩展的位置" class="headerlink" title="类型扩展的位置"></a>类型扩展的位置</h4><p>我们可以将这些类型扩展放在一个 <code>.ts</code> 文件，或是一个影响整个项目的 <code>*.d.ts</code> 文件中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不工作，将覆盖原始类型。</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常工作。</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选项式-API-扩展自定义选项"><a href="#选项式-API-扩展自定义选项" class="headerlink" title="选项式 API 扩展自定义选项"></a>选项式 API 扩展自定义选项</h3><p>某些插件，比如 vue-router，提供了一些自定义的组件选项，比如 beforeRouteEnter：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果没有确切的类型标注，这个钩子函数的参数会隐式地标注为 <code>any</code> 类型。我们可以为 <code>ComponentCustomOptions</code> 接口扩展自定义的选项来支持：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomOptions</span> &#123;</span><br><span class="line">    beforeRouteEnter?(</span><br><span class="line">      <span class="attr">to</span>: <span class="title class_">Route</span>,</span><br><span class="line">      <span class="attr">from</span>: <span class="title class_">Route</span>,</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    ): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API-参考"><a href="#API-参考" class="headerlink" title="API 参考"></a>API 参考</h2><h3 id="全局-API-应用实例"><a href="#全局-API-应用实例" class="headerlink" title="全局 API - 应用实例"></a>全局 API - 应用实例</h3><!--rehype:wrap-class=row-span-3--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>createApp()</code></td><td align="left">创建一个应用实例 <a href="https://cn.vuejs.org/api/application.html#create-app">#</a></td></tr><tr><td align="left"><code>createSSRApp()</code></td><td align="left">以 <a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#client-hydration">SSR 激活</a>模式创建一个应用实例 <a href="https://cn.vuejs.org/api/application.html#create-ssr-app">#</a></td></tr><tr><td align="left"><code>app.mount()</code></td><td align="left">将应用实例挂载在一个容器元素中 <a href="https://cn.vuejs.org/api/application.html#app-mount">#</a></td></tr><tr><td align="left"><code>app.unmount()</code></td><td align="left">卸载一个已挂载的应用实例 <a href="https://cn.vuejs.org/api/application.html#app-unmount">#</a></td></tr><tr><td align="left"><code>app.provide()</code></td><td align="left">提供一个可以在应用中的所有后代组件中注入使用的值 <a href="https://cn.vuejs.org/api/application.html#app-provide">#</a></td></tr><tr><td align="left"><code>app.component()</code></td><td align="left">注册或获取全局组件 <a href="https://cn.vuejs.org/api/application.html#app-component">#</a></td></tr><tr><td align="left"><code>app.directive()</code></td><td align="left">注册或获取全局指令 <a href="https://cn.vuejs.org/api/application.html#app-directive">#</a></td></tr><tr><td align="left"><code>app.use()</code></td><td align="left">安装一个插件 <a href="https://cn.vuejs.org/api/application.html#app-use">#</a></td></tr><tr><td align="left"><code>app.mixin()</code></td><td align="left">全局注册一个混入 <a href="https://cn.vuejs.org/api/application.html#app-mixin">#</a></td></tr><tr><td align="left"><code>app.version</code></td><td align="left">当前应用所使用的 Vue 版本号 <a href="https://cn.vuejs.org/api/application.html#app-version">#</a></td></tr><tr><td align="left"><code>app.config</code></td><td align="left">获得应用实例的配置设定 <a href="https://cn.vuejs.org/api/application.html#app-config">#</a></td></tr><tr><td align="left"><code>app.config.errorHandler</code></td><td align="left">为应用内抛出的未捕获错误指定一个全局处理函数 <a href="https://cn.vuejs.org/api/application.html#app-config-errorhandler">#</a></td></tr><tr><td align="left"><code>app.config.warnHandler</code></td><td align="left">为 Vue 的运行时警告指定一个自定义处理函数 <a href="https://cn.vuejs.org/api/application.html#app-config-warnhandler">#</a></td></tr><tr><td align="left"><code>app.config.performance</code></td><td align="left">在浏览器开发工具中追踪性能表现 <a href="https://cn.vuejs.org/api/application.html#app-config-performance">#</a></td></tr><tr><td align="left"><code>app.config.compilerOptions</code></td><td align="left">配置运行时编译器的选项 <a href="https://cn.vuejs.org/api/application.html#app-config-compileroptions">#</a></td></tr><tr><td align="left"><code>app.config.globalProperties</code></td><td align="left">注册全局属性对象 <a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties">#</a></td></tr><tr><td align="left"><code>app.config.optionMergeStrategies</code></td><td align="left">定义自定义组件选项的合并策略的对象 <a href="https://cn.vuejs.org/api/application.html#app-config-optionmergestrategies">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="全局-API-通用"><a href="#全局-API-通用" class="headerlink" title="全局 API - 通用"></a>全局 API - 通用</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>version</code></td><td align="left">Vue 版本号 <a href="https://cn.vuejs.org/api/general.html#version">#</a></td></tr><tr><td align="left"><code>nextTick()</code></td><td align="left">等待下一次 DOM 更新后执行回调 <a href="https://cn.vuejs.org/api/general.html#nexttick">#</a></td></tr><tr><td align="left"><code>defineComponent()</code></td><td align="left">在定义 Vue 组件时提供类型推导的辅助函数 <a href="https://cn.vuejs.org/api/general.html#definecomponent">#</a></td></tr><tr><td align="left"><code>defineAsyncComponent()</code></td><td align="left">定义一个异步组件 <a href="https://cn.vuejs.org/api/general.html#defineasynccomponent">#</a></td></tr><tr><td align="left"><code>defineCustomElement()</code></td><td align="left">和 <code>defineComponent</code> 接受的参数相同，不同的是会返回一个原生自定义元素类的构造器 <a href="https://cn.vuejs.org/api/general.html#definecustomelement">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="组合式-API-setup"><a href="#组合式-API-setup" class="headerlink" title="组合式 API - setup()"></a>组合式 API - setup()</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>基本使用</code></td><td align="left"><a href="https://cn.vuejs.org/api/composition-api-setup.html#basic-usage">#</a></td></tr><tr><td align="left"><code>访问 Props</code></td><td align="left"><a href="https://cn.vuejs.org/api/composition-api-setup.html#accessing-props">#</a></td></tr><tr><td align="left"><code>Setup 上下文</code></td><td align="left"><a href="https://cn.vuejs.org/api/composition-api-setup.html#setup-context">#</a></td></tr><tr><td align="left"><code>与渲染函数一起使用</code></td><td align="left"><a href="https://cn.vuejs.org/api/composition-api-setup.html#usage-with-render-functions">#</a></td></tr></tbody></table><h3 id="组合式-API-依赖注入"><a href="#组合式-API-依赖注入" class="headerlink" title="组合式 API - 依赖注入"></a>组合式 API - 依赖注入</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>provide()</code></td><td align="left">提供一个可以被后代组件中注入使用的值 <a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#provide">#</a></td></tr><tr><td align="left"><code>inject()</code></td><td align="left">注入一个由祖先组件提供的值 <a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject">#</a></td></tr></tbody></table><h3 id="组合式-API-生命周期钩子"><a href="#组合式-API-生命周期钩子" class="headerlink" title="组合式 API - 生命周期钩子"></a>组合式 API - 生命周期钩子</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>onMounted()</code></td><td align="left">组件挂载完成后执行 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onmounted">#</a></td></tr><tr><td align="left"><code>onUpdated()</code></td><td align="left">状态变更而更新其 DOM 树之后调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onupdated">#</a></td></tr><tr><td align="left"><code>onUnmounted()</code></td><td align="left">组件实例被卸载之后调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onunmounted">#</a></td></tr><tr><td align="left"><code>onBeforeMount()</code></td><td align="left">组件被挂载之前被调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforemount">#</a></td></tr><tr><td align="left"><code>onBeforeUpdate()</code></td><td align="left">状态变更而更新其 DOM 树之前调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeupdate">#</a></td></tr><tr><td align="left"><code>onBeforeUnmount()</code></td><td align="left">组件实例被卸载之前调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeunmount">#</a></td></tr><tr><td align="left"><code>onErrorCaptured()</code></td><td align="left">捕获了后代组件传递的错误时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured">#</a></td></tr><tr><td align="left"><code>onRenderTracked()</code></td><td align="left">组件渲染过程中追踪到响应式依赖时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertracked">#</a></td></tr><tr><td align="left"><code>onRenderTriggered()</code></td><td align="left">响应式依赖的变更触发了组件渲染时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertriggered">#</a></td></tr><tr><td align="left"><code>onActivated()</code></td><td align="left">若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件被插入到 DOM 中时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated">#</a></td></tr><tr><td align="left"><code>onDeactivated()</code></td><td align="left">若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件从 DOM 中被移除时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated">#</a></td></tr><tr><td align="left"><code>onServerPrefetch()</code></td><td align="left">组件实例在服务器上被渲染之前调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onserverprefetch">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="组合式-API-响应式-工具"><a href="#组合式-API-响应式-工具" class="headerlink" title="组合式 API - 响应式: 工具"></a>组合式 API - 响应式: 工具</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>isRef()</code></td><td align="left">判断是否为 ref <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isref">#</a></td></tr><tr><td align="left"><code>unref()</code></td><td align="left">是 ref，返回内部值，否则返回参数本身 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#unref">#</a></td></tr><tr><td align="left"><code>toRef()</code></td><td align="left">创建一个属性对应的 ref <a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref">#</a></td></tr><tr><td align="left"><code>toRefs()</code></td><td align="left">将对象上的每一个可枚举属性转换为 ref <a href="https://cn.vuejs.org/api/reactivity-utilities.html#torefs">#</a></td></tr><tr><td align="left"><code>isProxy()</code></td><td align="left">检查一个对象是否是由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或 <code>shallowReadonly()</code> 创建的代理 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isproxy">#</a></td></tr><tr><td align="left"><code>isReactive()</code></td><td align="left">检查一个对象是否是由 <code>reactive()</code> 或 <code>shallowReactive()</code> 创建的代理。  <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isreactive">#</a></td></tr><tr><td align="left"><code>isReadonly()</code></td><td align="left">检查传入的值是否为只读对象 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isreadonly">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="组合式-API-响应式-核心"><a href="#组合式-API-响应式-核心" class="headerlink" title="组合式 API - 响应式: 核心"></a>组合式 API - 响应式: 核心</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>ref()</code></td><td align="left">返回一个 ref 对象 <a href="https://cn.vuejs.org/api/reactivity-core.html#ref">#</a></td></tr><tr><td align="left"><code>computed ()</code></td><td align="left">定义一个计算属性 <a href="https://cn.vuejs.org/api/reactivity-core.html#computed">#</a></td></tr><tr><td align="left"><code>reactive()</code></td><td align="left">返回一个对象的响应式代理 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive">#</a></td></tr><tr><td align="left"><code>readonly()</code></td><td align="left">返回一个原值的只读代理 <a href="https://cn.vuejs.org/api/reactivity-core.html#readonly">#</a></td></tr><tr><td align="left"><code>watchEffect()</code></td><td align="left">立即运行一个函数，同时监听 <a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect">#</a></td></tr><tr><td align="left"><code>watchPostEffect()</code></td><td align="left"><code>watchEffect()</code> 使用 <code>flush: &#39;post&#39;</code> 选项时的别名。 <a href="https://cn.vuejs.org/api/reactivity-core.html#watchposteffect">#</a></td></tr><tr><td align="left"><code>watchSyncEffect()</code></td><td align="left"><code>watchEffect()</code> 使用 <code>flush: &#39;sync&#39;</code> 选项时的别名。 <a href="https://cn.vuejs.org/api/reactivity-core.html#watchsynceffect">#</a></td></tr><tr><td align="left"><code>watch()</code></td><td align="left">侦听一个或多个响应式数据源 <a href="https://cn.vuejs.org/api/reactivity-core.html#watch">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="选项式-API-状态选项"><a href="#选项式-API-状态选项" class="headerlink" title="选项式 API - 状态选项"></a>选项式 API - 状态选项</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>data</code></td><td align="left">声明组件初始响应式状态 <a href="https://cn.vuejs.org/api/options-state.html#data">#</a></td></tr><tr><td align="left"><code>props</code></td><td align="left">声明一个组件的 props <a href="https://cn.vuejs.org/api/options-state.html#props">#</a></td></tr><tr><td align="left"><code>computed</code></td><td align="left">声明要在组件实例上暴露的计算属性 <a href="https://cn.vuejs.org/api/options-state.html#computed">#</a></td></tr><tr><td align="left"><code>methods</code></td><td align="left">声明要混入到组件实例中的方法 <a href="https://cn.vuejs.org/api/options-state.html#methods">#</a></td></tr><tr><td align="left"><code>watch</code></td><td align="left">声明在数据更改时调用的侦听回调 <a href="https://cn.vuejs.org/api/options-state.html#watch">#</a></td></tr><tr><td align="left"><code>emits</code></td><td align="left">声明由组件触发的自定义事件 <a href="https://cn.vuejs.org/api/options-state.html#emits">#</a></td></tr><tr><td align="left"><code>expose</code></td><td align="left">声明当组件实例被父组件通过模板引用访问时暴露的公共属性 <a href="https://cn.vuejs.org/api/options-state.html#expose">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="选项式-API-生命周期选项"><a href="#选项式-API-生命周期选项" class="headerlink" title="选项式 API - 生命周期选项"></a>选项式 API - 生命周期选项</h3><!--rehype:wrap-class=row-span-3--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>beforeCreate</code></td><td align="left">组件实例初始化完成之后立即调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforecreate">#</a></td></tr><tr><td align="left"><code>created</code></td><td align="left">组件实例处理完所有与状态相关的选项后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#created">#</a></td></tr><tr><td align="left"><code>beforeMount</code></td><td align="left">组件被挂载之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforemount">#</a></td></tr><tr><td align="left"><code>mounted</code></td><td align="left">组件被挂载之后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#mounted">#</a></td></tr><tr><td align="left"><code>beforeUpdate</code></td><td align="left">状态变更而更新其 DOM 树之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforeupdate">#</a></td></tr><tr><td align="left"><code>updated</code></td><td align="left">状态变更而更新其 DOM 树之后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#updated">#</a></td></tr><tr><td align="left"><code>beforeUnmount</code></td><td align="left">组件实例被卸载之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforeunmount">#</a></td></tr><tr><td align="left"><code>unmounted</code></td><td align="left">组件实例被卸载之后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#unmounted">#</a></td></tr><tr><td align="left"><code>errorCaptured</code></td><td align="left">捕获了后代组件传递的错误时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#errorcaptured">#</a></td></tr><tr><td align="left"><code>renderTracked</code> <em>Dev only</em></td><td align="left">组件渲染过程中追踪到响应式依赖时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#rendertracked">#</a></td></tr><tr><td align="left"><code>renderTriggered</code> <em>Dev only</em></td><td align="left">响应式依赖的变更触发了组件渲染时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#rendertriggered-sup-classvt-badge-dev-only">#</a></td></tr><tr><td align="left"><code>activated</code></td><td align="left">若组件实例是 <KeepAlive> 缓存树的一部分，当组件被插入到 DOM 中时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#activated">#</a></td></tr><tr><td align="left"><code>deactivated</code></td><td align="left">若组件实例是 <KeepAlive> 缓存树的一部分，当组件从 DOM 中被移除时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#deactivated">#</a></td></tr><tr><td align="left"><code>serverPrefetch</code> <em>SSR only</em></td><td align="left">组件实例在服务器上被渲染之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#serverprefetch">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="选项式-API-其他杂项"><a href="#选项式-API-其他杂项" class="headerlink" title="选项式 API - 其他杂项"></a>选项式 API - 其他杂项</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>name</code></td><td align="left">显式声明组件展示时的名称 <a href="https://cn.vuejs.org/api/options-misc.html#name">#</a></td></tr><tr><td align="left"><code>inheritAttrs</code></td><td align="left">是否启用默认的组件 <code>attribute</code> 透传行为 <a href="https://cn.vuejs.org/api/options-misc.html#inheritattrs">#</a></td></tr><tr><td align="left"><code>components</code></td><td align="left">注册对当前组件实例可用的组件 <a href="https://cn.vuejs.org/api/options-misc.html#components">#</a></td></tr><tr><td align="left"><code>directives</code></td><td align="left">注册对当前组件实例可用的指令 <a href="https://cn.vuejs.org/api/options-misc.html#directives">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="选项式-API-渲染选项"><a href="#选项式-API-渲染选项" class="headerlink" title="选项式 API - 渲染选项"></a>选项式 API - 渲染选项</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>template</code></td><td align="left">声明组件的字符串模板 <a href="https://cn.vuejs.org/api/options-rendering.html#template">#</a></td></tr><tr><td align="left"><code>render</code></td><td align="left">编程式地创建组件虚拟 DOM 树的函数 <a href="https://cn.vuejs.org/api/options-rendering.html#render">#</a></td></tr><tr><td align="left"><code>compilerOptions</code></td><td align="left">配置组件模板的运行时编译器选项 <a href="https://cn.vuejs.org/api/options-rendering.html#compileroptions">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="选项式-API-组件实例"><a href="#选项式-API-组件实例" class="headerlink" title="选项式 API - 组件实例"></a>选项式 API - 组件实例</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>$data</code></td><td align="left">观察的数据对象 <a href="https://cn.vuejs.org/api/component-instance.html#data">#</a></td></tr><tr><td align="left"><code>$props</code></td><td align="left">组件已解析的 props 对象 <a href="https://cn.vuejs.org/api/component-instance.html#props">#</a></td></tr><tr><td align="left"><code>$el</code></td><td align="left">实例管理的 DOM 根节点 <a href="https://cn.vuejs.org/api/component-instance.html#el">#</a></td></tr><tr><td align="left"><code>$options</code></td><td align="left">实例的初始化选项 <a href="https://cn.vuejs.org/api/component-instance.html#options">#</a></td></tr><tr><td align="left"><code>$parent</code></td><td align="left">父实例 <a href="https://cn.vuejs.org/api/component-instance.html#parent">#</a></td></tr><tr><td align="left"><code>$root</code></td><td align="left">当前组件树的根实例 <a href="https://cn.vuejs.org/api/component-instance.html#root">#</a></td></tr><tr><td align="left"><code>$slots</code></td><td align="left">访问被插槽分发的内容 <a href="https://cn.vuejs.org/api/component-instance.html#slots">#</a></td></tr><tr><td align="left"><code>$refs</code></td><td align="left">DOM 元素和组件实例 <a href="https://cn.vuejs.org/api/component-instance.html#refs">#</a></td></tr><tr><td align="left"><code>$attrs</code></td><td align="left">包含了组件所有<a href="https://cn.vuejs.org/guide/components/attrs.html">透传 attributes</a> <a href="https://cn.vuejs.org/api/component-instance.html#attrs">#</a></td></tr><tr><td align="left"><code>$watch()</code></td><td align="left">观察 Vue 实例上的一个表达式或者一个函数计算结果的变化 <a href="https://cn.vuejs.org/api/component-instance.html#watch">#</a></td></tr><tr><td align="left"><code>$emit()</code></td><td align="left">触发一个自定义事件 <a href="https://cn.vuejs.org/api/component-instance.html#emit">#</a></td></tr><tr><td align="left"><code>$forceUpdate()</code></td><td align="left">强制该组件重新渲染 <a href="https://cn.vuejs.org/api/component-instance.html#forceupdate">#</a></td></tr><tr><td align="left"><code>$nextTick()</code></td><td align="left">回调延迟执行 <a href="https://cn.vuejs.org/api/component-instance.html#nexttick">#</a></td></tr></tbody></table><h3 id="选项式-API-组合选项"><a href="#选项式-API-组合选项" class="headerlink" title="选项式 API - 组合选项"></a>选项式 API - 组合选项</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>provide</code></td><td align="left">提供可以被后代组件注入的值 <a href="https://cn.vuejs.org/api/options-composition.html#provide">#</a></td></tr><tr><td align="left"><code>inject</code></td><td align="left">注入一个由祖先组件提供的值 <a href="https://cn.vuejs.org/api/options-composition.html#inject">#</a></td></tr><tr><td align="left"><code>mixins</code></td><td align="left">接收一个混入对象的数组 <a href="https://cn.vuejs.org/api/options-composition.html#mixins">#</a></td></tr><tr><td align="left"><code>extends</code></td><td align="left">要继承的“基类”组件 <a href="https://cn.vuejs.org/api/options-composition.html#extends">#</a></td></tr></tbody></table><h3 id="内置内容-指令"><a href="#内置内容-指令" class="headerlink" title="内置内容 - 指令"></a>内置内容 - 指令</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-text</code></td><td align="left">更新元素的 <code>textContent</code> <a href="https://cn.vuejs.org/api/built-in-directives.html#v-text">#</a></td></tr><tr><td align="left"><code>v-html</code></td><td align="left">更新元素的 <code>innerHTML</code> <a href="https://cn.vuejs.org/api/built-in-directives.html#v-html">#</a></td></tr><tr><td align="left"><code>v-show</code></td><td align="left">切换元素的 <code>display</code> css 属性 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-show">#</a></td></tr><tr><td align="left"><code>v-if</code></td><td align="left">有条件地渲染元素 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-if">#</a></td></tr><tr><td align="left"><code>v-else</code></td><td align="left"><a href="https://cn.vuejs.org/api/built-in-directives.html#v-else">#</a></td></tr><tr><td align="left"><code>v-else-if</code></td><td align="left"><a href="https://cn.vuejs.org/api/built-in-directives.html#v-else-if">#</a></td></tr><tr><td align="left"><code>v-for</code></td><td align="left">多次渲染元素或模板块 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-for">#</a></td></tr><tr><td align="left"><code>v-on</code></td><td align="left">绑定事件监听器 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-on">#</a></td></tr><tr><td align="left"><code>v-bind</code></td><td align="left">动态地绑定一个或多个属性 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-bind">#</a></td></tr><tr><td align="left"><code>v-model</code></td><td align="left">创建双向绑定 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-model">#</a></td></tr><tr><td align="left"><code>v-slot</code></td><td align="left">提供插槽或接收 props 的插槽 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-slot">#</a></td></tr><tr><td align="left"><code>v-pre</code></td><td align="left">跳过元素和它的子元素编译过程 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-pre">#</a></td></tr><tr><td align="left"><code>v-once</code></td><td align="left">只渲染元素和组件一次 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-once">#</a></td></tr><tr><td align="left"><code>v-memo</code> <em>(3.2+)</em></td><td align="left">缓存一个模板的子树 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-memo">#</a></td></tr><tr><td align="left"><code>v-cloak</code></td><td align="left">保持在元素上直到实例结束编译 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-cloak">#</a></td></tr><tr><td align="left"><code>serverPrefetch</code> <em>SSR only</em></td><td align="left">组件实例在服务器上被渲染之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#serverprefetch">#</a></td></tr></tbody></table><h3 id="内置内容-组件"><a href="#内置内容-组件" class="headerlink" title="内置内容 - 组件"></a>内置内容 - 组件</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>&lt;Transition&gt;</code></td><td align="left">单个元素&#x2F;组件的过渡效果 <a href="https://cn.vuejs.org/api/built-in-components.html#transition">#</a></td></tr><tr><td align="left"><code>&lt;TransitionGroup&gt;</code></td><td align="left">多个元素&#x2F;组件的过渡效果 <a href="https://cn.vuejs.org/api/built-in-components.html#transitiongroup">#</a></td></tr><tr><td align="left"><code>&lt;KeepAlive&gt;</code></td><td align="left">缓存包裹在其中的动态切换组件 <a href="https://cn.vuejs.org/api/built-in-components.html#keepalive">#</a></td></tr><tr><td align="left"><code>&lt;Teleport&gt;</code></td><td align="left">将其插槽内容渲染到 DOM 中的另一个位置 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport">#</a></td></tr><tr><td align="left"><code>&lt;Suspense&gt;</code> <em>(Experimental)</em></td><td align="left">协调对组件树中嵌套的异步依赖的处理 <a href="https://cn.vuejs.org/api/built-in-components.html#suspense">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="内置内容-特殊-Attributes"><a href="#内置内容-特殊-Attributes" class="headerlink" title="内置内容 - 特殊 Attributes"></a>内置内容 - 特殊 Attributes</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>key</code></td><td align="left">用在 Vue 的虚拟 DOM 算法 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">#</a></td></tr><tr><td align="left"><code>ref</code></td><td align="left">元素或子组件注册引用信息 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#ref">#</a></td></tr><tr><td align="left"><code>is</code></td><td align="left">绑定动态组件 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#is">#</a></td></tr></tbody></table><h3 id="内置内容-特殊元素"><a href="#内置内容-特殊元素" class="headerlink" title="内置内容 - 特殊元素"></a>内置内容 - 特殊元素</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>&lt;component&gt;</code></td><td align="left">渲染一个“元组件”用于动态组件或元素 <a href="https://cn.vuejs.org/api/built-in-special-elements.html#component">#</a></td></tr><tr><td align="left"><code>&lt;slot&gt;</code></td><td align="left">组件模板中的插槽内容出口 <a href="https://cn.vuejs.org/api/built-in-special-elements.html#slot">#</a></td></tr></tbody></table><h3 id="单文件组件-语法定义"><a href="#单文件组件-语法定义" class="headerlink" title="单文件组件 - 语法定义"></a>单文件组件 - 语法定义</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>总览</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-spec.html#overview">#</a></td></tr><tr><td align="left"><code>相应语言块</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-spec.html#language-blocks">#</a></td></tr><tr><td align="left"><code>自动名称推导</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-spec.html#automatic-name-inference">#</a></td></tr><tr><td align="left"><code>预处理器</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-spec.html#pre-processors">#</a></td></tr><tr><td align="left"><code>Src 导入</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-spec.html#src-imports">#</a></td></tr><tr><td align="left"><code>注释</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-spec.html#comments">#</a></td></tr></tbody></table><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件 - &lt;script setup&gt;"></a>单文件组件 - &lt;script setup&gt;</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>基本语法</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#basic-syntax">#</a></td></tr><tr><td align="left"><code>响应式</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#reactivity">#</a></td></tr><tr><td align="left"><code>使用组件</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#using-components">#</a></td></tr><tr><td align="left"><code>使用自定义指令</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#using-custom-directives">#</a></td></tr><tr><td align="left"><code>defineProps() 和 defineEmits()</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits">#</a></td></tr><tr><td align="left"><code>defineExpose</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#defineexpose">#</a></td></tr><tr><td align="left"><code>useSlots() 和 useAttrs()</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#useslots-useattrs">#</a></td></tr><tr><td align="left"><code>与普通的 &amp;lt;script&amp;gt; 一起使用</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#usage-alongside-normal-script">#</a></td></tr><tr><td align="left"><code>顶层 await</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#top-level-await">#</a></td></tr><tr><td align="left"><code>针对 TypeScript 的功能</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#typescript-only-features">#</a></td></tr><tr><td align="left"><code>限制</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-script-setup.html#restrictions">#</a></td></tr></tbody></table><h3 id="单文件组件-CSS-功能"><a href="#单文件组件-CSS-功能" class="headerlink" title="单文件组件 - CSS 功能"></a>单文件组件 - CSS 功能</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>组件作用域 CSS</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-css-features.html#scoped-css">#</a></td></tr><tr><td align="left"><code>CSS Modules</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-css-features.html#css-modules">#</a></td></tr><tr><td align="left"><code>CSS 中的 v-bind()</code></td><td align="left"><a href="https://cn.vuejs.org/api/sfc-css-features.html#v-bind-in-css">#</a></td></tr></tbody></table><h3 id="进阶-API-渲染函数"><a href="#进阶-API-渲染函数" class="headerlink" title="进阶 API - 渲染函数"></a>进阶 API - 渲染函数</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>h()</code></td><td align="left">创建虚拟 DOM 节点 <a href="https://cn.vuejs.org/api/render-function.html#h">#</a></td></tr><tr><td align="left"><code>mergeProps()</code></td><td align="left">合并多个 props 对象 <a href="https://cn.vuejs.org/api/render-function.html#mergeprops">#</a></td></tr><tr><td align="left"><code>cloneVNode()</code></td><td align="left">克隆一个 vnode <a href="https://cn.vuejs.org/api/render-function.html#clonevnode">#</a></td></tr><tr><td align="left"><code>isVNode()</code></td><td align="left">判断一个值是否为 vnode 类型 <a href="https://cn.vuejs.org/api/render-function.html#isvnode">#</a></td></tr><tr><td align="left"><code>resolveComponent()</code></td><td align="left">按名称手动解析已注册的组件 <a href="https://cn.vuejs.org/api/render-function.html#resolvecomponent">#</a></td></tr><tr><td align="left"><code>resolveDirective()</code></td><td align="left">按名称手动解析已注册的指令 <a href="https://cn.vuejs.org/api/render-function.html#resolvedirective">#</a></td></tr><tr><td align="left"><code>withDirectives()</code></td><td align="left">用于给 vnode 增加自定义指令 <a href="https://cn.vuejs.org/api/render-function.html#withdirectives">#</a></td></tr><tr><td align="left"><code>withModifiers()</code></td><td align="left">用于向事件处理函数添加内置 <code>v-on 修饰符</code> <a href="https://cn.vuejs.org/api/render-function.html#withmodifiers">#</a></td></tr></tbody></table><h3 id="进阶-API-服务端渲染"><a href="#进阶-API-服务端渲染" class="headerlink" title="进阶 API - 服务端渲染"></a>进阶 API - 服务端渲染</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>renderToString()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#rendertostring">#</a></td></tr><tr><td align="left"><code>renderToNodeStream()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#rendertonodestream">#</a></td></tr><tr><td align="left"><code>pipeToNodeWritable()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#pipetonodewritable">#</a></td></tr><tr><td align="left"><code>renderToWebStream()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#rendertowebstream">#</a></td></tr><tr><td align="left"><code>pipeToWebWritable()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#pipetowebwritable">#</a></td></tr><tr><td align="left"><code>renderToSimpleStream()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#rendertosimplestream">#</a></td></tr><tr><td align="left"><code>useSSRContext()</code></td><td align="left"><a href="https://cn.vuejs.org/api/ssr.html#usessrcontext">#</a></td></tr></tbody></table><h3 id="进阶-API-TypeScript-工具类型"><a href="#进阶-API-TypeScript-工具类型" class="headerlink" title="进阶 API - TypeScript 工具类型"></a>进阶 API - TypeScript 工具类型</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>PropType&lt;T&gt;</code></td><td align="left">在用运行时 props 声明时给一个 prop 标注更复杂的类型定义 <a href="https://cn.vuejs.org/api/utility-types.html#proptypet">#</a></td></tr><tr><td align="left"><code>ComponentCustomProperties</code></td><td align="left">增强组件实例类型以支持自定义全局属性 <a href="https://cn.vuejs.org/api/utility-types.html#componentcustomproperties">#</a></td></tr><tr><td align="left"><code>ComponentCustomOptions</code></td><td align="left">扩展组件选项类型以支持自定义选项 <a href="https://cn.vuejs.org/api/utility-types.html#componentcustomoptions">#</a></td></tr><tr><td align="left"><code>ComponentCustomProps</code></td><td align="left">扩展全局可用的 TSX props <a href="https://cn.vuejs.org/api/utility-types.html#componentcustomprops">#</a></td></tr><tr><td align="left"><code>CSSProperties</code></td><td align="left">扩展在样式属性绑定上允许的值的类型 <a href="https://cn.vuejs.org/api/utility-types.html#cssproperties">#</a></td></tr></tbody></table><!--rehype:className=style-list--><h3 id="进阶-API-自定义渲染"><a href="#进阶-API-自定义渲染" class="headerlink" title="进阶 API - 自定义渲染"></a>进阶 API - 自定义渲染</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>createRenderer()</code></td><td align="left">创建一个自定义渲染器 <a href="https://cn.vuejs.org/api/custom-renderer.html#create-renderer">#</a></td></tr></tbody></table><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://cn.vuejs.org/">Vue 3.x 官方文档</a></li><li><a href="https://router.vuejs.org/zh/">Vue Router 4.x 官方文档</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-3-备忘清单&quot;&gt;&lt;a href=&quot;#Vue-3-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;Vue 3 备忘清单&quot;&gt;&lt;/a&gt;Vue 3 备忘清单&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/vue</summary>
      
    
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Vue3" scheme="https://tdcqcx.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Yaml 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/yaml/"/>
    <id>https://tdcqcx.github.io/2025/01/08/yaml/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YAML-备忘清单"><a href="#YAML-备忘清单" class="headerlink" title="YAML 备忘清单"></a>YAML 备忘清单</h1><p>这是理解和编写 YAML 格式配置文件的快速参考备忘单。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://yaml.org/">YAML</a> 是一种数据序列化语言，旨在供人类直接读写</p><ul><li>YAML 不允许使用制表符</li><li>元素部分之间必须有空间</li><li>YAML 区分大小写</li><li>以 <code>.yaml</code> 或 <code>.yml</code> 扩展名结束您的 YAML 文件</li><li>YAML 是 JSON 的超集</li><li>Ansible playbook 是 YAML 文件</li></ul><!--rehype:className=style-round--><h3 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">n1:</span> <span class="number">1</span>            <span class="comment"># 整数</span></span><br><span class="line"><span class="attr">n2:</span> <span class="number">1.234</span>        <span class="comment"># 浮点</span></span><br><span class="line"><span class="attr">s1:</span> <span class="string">&#x27;abc&#x27;</span>        <span class="comment"># 字符串</span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">&quot;abc&quot;</span>        <span class="comment"># 字符串</span></span><br><span class="line"><span class="attr">s3:</span> <span class="string">abc</span>          <span class="comment"># 字符串</span></span><br><span class="line"><span class="attr">b:</span> <span class="literal">false</span>         <span class="comment"># 布尔类型</span></span><br><span class="line"><span class="attr">d:</span> <span class="number">2015-04-05</span>    <span class="comment"># 日期类型</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON"><a href="#↓-等效的-JSON" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;n1&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;n2&quot;</span><span class="punctuation">:</span> <span class="number">1.234</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;s1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;s2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;s3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2015-04-05&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用空格缩进。 元素部分之间必须有空间。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">some_thing:</span> <span class="string">&amp;VAR_NAME</span> <span class="string">foobar</span></span><br><span class="line"><span class="attr">other_thing:</span> <span class="meta">*VAR_NAME</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-1"><a href="#↓-等效的-JSON-1" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;some_thing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foobar&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;other_thing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foobar&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A single line comment example</span></span><br><span class="line"><span class="comment"># block level comment example</span></span><br><span class="line"><span class="comment"># comment line 1</span></span><br><span class="line"><span class="comment"># comment line 2</span></span><br><span class="line"><span class="comment"># comment line 3</span></span><br></pre></td></tr></table></figure><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  hello</span></span><br><span class="line"><span class="string">  world</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-2"><a href="#↓-等效的-JSON-2" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello\nworld\n&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parent:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">a:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">b:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">child:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">  <span class="attr">b:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-3"><a href="#↓-等效的-JSON-3" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">values:</span> <span class="meta">&amp;ref</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Will</span> <span class="string">be</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">reused</span> <span class="string">below</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">other_values:</span></span><br><span class="line">  <span class="attr">i_am_ref:</span> <span class="meta">*ref</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-4"><a href="#↓-等效的-JSON-4" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Will be&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;reused below&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;other_values&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;i_am_ref&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;Will be&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;reused below&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="折叠的字符串"><a href="#折叠的字符串" class="headerlink" title="折叠的字符串"></a>折叠的字符串</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  hello</span></span><br><span class="line"><span class="string">  world</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-5"><a href="#↓-等效的-JSON-5" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello world\n&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="两份文件"><a href="#两份文件" class="headerlink" title="两份文件"></a>两份文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">document:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">doc</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">document:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">doc</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>YAML使用<code>---</code>将指令与文档内容分开。</p><h2 id="YAML-Collections"><a href="#YAML-Collections" class="headerlink" title="YAML Collections"></a>YAML Collections</h2><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Mark</span> <span class="string">McGwire</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Sammy</span> <span class="string">Sosa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Ken</span> <span class="string">Griffey</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-6"><a href="#↓-等效的-JSON-6" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;Mark McGwire&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Sammy Sosa&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Ken Griffey&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr:</span>  <span class="number">65</span>       <span class="comment"># Home runs</span></span><br><span class="line"><span class="attr">avg:</span> <span class="number">0.278</span>    <span class="comment"># Batting average</span></span><br><span class="line"><span class="attr">rbi:</span> <span class="number">147</span>      <span class="comment"># Runs Batted In</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-7"><a href="#↓-等效的-JSON-7" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hr&quot;</span><span class="punctuation">:</span> <span class="number">65</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="number">0.278</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rbi&quot;</span><span class="punctuation">:</span> <span class="number">147</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="映射到序列"><a href="#映射到序列" class="headerlink" title="映射到序列"></a>映射到序列</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">attributes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">a1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">a2</span></span><br><span class="line"><span class="attr">methods:</span> [<span class="string">getter</span>, <span class="string">setter</span>]</span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-8"><a href="#↓-等效的-JSON-8" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;a1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;a2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;methods&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;getter&quot;</span><span class="punctuation">,</span> <span class="string">&quot;setter&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="映射序列"><a href="#映射序列" class="headerlink" title="映射序列"></a>映射序列</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">children:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jimmy</span> <span class="string">Smith</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jimmy</span> <span class="string">Smith</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sammy</span> <span class="string">Sosa</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-9"><a href="#↓-等效的-JSON-9" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jimmy Smith&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jimmy Smith&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sammy Sosa&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="序列的序列"><a href="#序列的序列" class="headerlink" title="序列的序列"></a>序列的序列</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my_sequences:</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="bullet">-</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  <span class="bullet">-</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="number">7</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">9</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-10"><a href="#↓-等效的-JSON-10" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;my_sequences&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="映射的映射"><a href="#映射的映射" class="headerlink" title="映射的映射"></a>映射的映射</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Mark McGwire:</span> &#123;<span class="attr">hr:</span> <span class="number">65</span>, <span class="attr">avg:</span> <span class="number">0.278</span>&#125;</span><br><span class="line"><span class="attr">Sammy Sosa:</span> &#123;</span><br><span class="line">    <span class="attr">hr:</span> <span class="number">63</span>,</span><br><span class="line">    <span class="attr">avg:</span> <span class="number">0.288</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-11"><a href="#↓-等效的-JSON-11" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mark McGwire&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hr&quot;</span><span class="punctuation">:</span> <span class="number">65</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="number">0.278</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Sammy Sosa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hr&quot;</span><span class="punctuation">:</span> <span class="number">63</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="number">0.288</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套集合"><a href="#嵌套集合" class="headerlink" title="嵌套集合"></a>嵌套集合</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Jack:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Franc</span></span><br><span class="line">  <span class="attr">salary:</span> <span class="number">25000</span></span><br><span class="line">  <span class="attr">hobby:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">a</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">b</span></span><br><span class="line">  <span class="attr">location:</span> &#123;<span class="attr">country:</span> <span class="string">&quot;A&quot;</span>, <span class="attr">city:</span> <span class="string">&quot;A-A&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-12"><a href="#↓-等效的-JSON-12" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Jack&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Franc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;salary&quot;</span><span class="punctuation">:</span> <span class="number">25000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hobby&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A-A&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="无序集"><a href="#无序集" class="headerlink" title="无序集"></a>无序集</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">set1:</span> <span class="type">!!set</span></span><br><span class="line">  <span class="string">?</span> <span class="string">one</span></span><br><span class="line">  <span class="string">?</span> <span class="string">two</span></span><br><span class="line"><span class="attr">set2:</span> <span class="type">!!set</span> &#123;<span class="string">&#x27;one&#x27;</span>, <span class="string">&quot;two&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-13"><a href="#↓-等效的-JSON-13" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;set1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;one&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="attr">&quot;two&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;set2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;one&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="attr">&quot;two&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>集合表示为一个映射，其中每个键都与一个空值相关联</p><h3 id="有序映射"><a href="#有序映射" class="headerlink" title="有序映射"></a>有序映射</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ordered:</span> <span class="type">!!omap</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Mark McGwire:</span> <span class="number">65</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Sammy Sosa:</span> <span class="number">63</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Ken Griffy:</span> <span class="number">58</span></span><br></pre></td></tr></table></figure><h4 id="↓-等效的-JSON-14"><a href="#↓-等效的-JSON-14" class="headerlink" title="↓ 等效的 JSON"></a>↓ 等效的 JSON</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ordered&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">&#123;</span><span class="attr">&quot;Mark McGwire&quot;</span><span class="punctuation">:</span> <span class="number">65</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">&#123;</span><span class="attr">&quot;Sammy Sosa&quot;</span><span class="punctuation">:</span> <span class="number">63</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">&#123;</span><span class="attr">&quot;Ken Griffy&quot;</span><span class="punctuation">:</span> <span class="number">58</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="YAML-参考"><a href="#YAML-参考" class="headerlink" title="YAML 参考"></a>YAML 参考</h2><h3 id="条款"><a href="#条款" class="headerlink" title="条款"></a>条款</h3><ul><li>序列又名数组或列表</li><li>标量又名字符串或数字</li><li>映射又名哈希或字典</li></ul><!--rehype:className=style-round--><p>基于 YAML.org <a href="https://yaml.org/refcard.html">refcard</a>。</p><h3 id="文档指标"><a href="#文档指标" class="headerlink" title="文档指标"></a>文档指标</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>%</code></td><td align="left">指令指标</td></tr><tr><td align="left"><code>---</code></td><td align="left">文档标题</td></tr><tr><td align="left"><code>...</code></td><td align="left">文档终结者</td></tr></tbody></table><h3 id="收集指标"><a href="#收集指标" class="headerlink" title="收集指标"></a>收集指标</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>?</code></td><td align="left">关键指标</td></tr><tr><td align="left"><code>:</code></td><td align="left">价值指标</td></tr><tr><td align="left"><code>-</code></td><td align="left">嵌套系列条目指示器</td></tr><tr><td align="left"><code>,</code></td><td align="left">单独的内联分支条目</td></tr><tr><td align="left"><code>[]</code></td><td align="left">环绕串联系列分支</td></tr><tr><td align="left"><code>&#123;&#125;</code></td><td align="left">环绕在线键控分支</td></tr></tbody></table><h3 id="别名指标"><a href="#别名指标" class="headerlink" title="别名指标"></a>别名指标</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>&amp;</code></td><td align="left">锚属性</td></tr><tr><td align="left"><code>*</code></td><td align="left">别名指示符</td></tr></tbody></table><h3 id="特殊键"><a href="#特殊键" class="headerlink" title="特殊键"></a>特殊键</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left">默认“值”映射键</td></tr><tr><td align="left"><code>&lt;&lt;</code></td><td align="left">合并来自另一个映射的键</td></tr></tbody></table><h3 id="标量指标"><a href="#标量指标" class="headerlink" title="标量指标"></a>标量指标</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>&#39;&#39;</code></td><td align="left">环绕内联未转义标量</td></tr><tr><td align="left"><code>&quot;</code></td><td align="left">环绕内嵌转义标量</td></tr><tr><td align="left">&#96;</td><td align="left">&#96;</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">折叠标量指示器</td></tr><tr><td align="left"><code>-</code></td><td align="left">剥离 chomp 修饰符（<code>|-</code> 或 <code>&gt;-</code>）</td></tr><tr><td align="left"><code>+</code></td><td align="left">保留 chomp 修饰符（<code>|+</code> 或 <code>&gt;+</code>）</td></tr><tr><td align="left"><code>1-9</code></td><td align="left">显式缩进修饰符（<code>|1</code> 或 <code>&gt;2</code>）。 <br/> 修饰符可以组合（<code>|2-</code>, <code>&gt;+1</code>）</td></tr></tbody></table><h3 id="标签属性（通常未指定）"><a href="#标签属性（通常未指定）" class="headerlink" title="标签属性（通常未指定）"></a>标签属性（通常未指定）</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>none</code></td><td align="left">未指定的标签（由应用程序自动解析）</td></tr><tr><td align="left"><code>!</code></td><td align="left">非特定标签（默认情况下，<code>!!map</code>&#x2F;<code>!!seq</code>&#x2F;<code>!!str</code>）</td></tr><tr><td align="left"><code>!foo</code></td><td align="left">主要（按照惯例，表示本地 <code>!foo</code> 标记）</td></tr><tr><td align="left"><code>!!foo</code></td><td align="left">次要的（按照惯例，表示 <code>tag:yaml.org,2002:foo</code>）</td></tr><tr><td align="left"><code>!h!foo</code></td><td align="left">需要 <code>%TAG !h! &lt;prefix&gt;</code>（然后表示 <code>&lt;prefix&gt;foo</code>）</td></tr><tr><td align="left"><code>!&lt;foo&gt;</code></td><td align="left">逐字标记（始终表示“foo”）</td></tr></tbody></table><!--rehype:class=auto-wrap--><h3 id="杂项指标"><a href="#杂项指标" class="headerlink" title="杂项指标"></a>杂项指标</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>#</code></td><td>一次性评论指示器</td></tr><tr><td><code>`@</code></td><td>两者都保留供将来使用</td></tr></tbody></table><h3 id="核心类型（默认自动标签）"><a href="#核心类型（默认自动标签）" class="headerlink" title="核心类型（默认自动标签）"></a>核心类型（默认自动标签）</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>!!map</code></td><td><code>&#123;Hash table, dictionary, mapping&#125;</code></td></tr><tr><td><code>!!seq</code></td><td><code>&#123;List, array, tuple, vector, sequence&#125;</code></td></tr><tr><td><code>!!str</code></td><td>Unicode 字符串</td></tr></tbody></table><h3 id="转义码"><a href="#转义码" class="headerlink" title="转义码"></a>转义码</h3><!--rehype:wrap-class=row-span-3--><h4 id="Numeric"><a href="#Numeric" class="headerlink" title="Numeric"></a>Numeric</h4><ul><li><code>\x12</code> (8-bit)</li><li><code>\u1234</code> (16-bit)</li><li><code>\U00102030</code> (32-bit)</li></ul><!--rehype:className=cols-2 style-none--><h4 id="Protective"><a href="#Protective" class="headerlink" title="Protective"></a>Protective</h4><ul><li><code>\\</code> (\)</li><li><code>\&quot;</code> (“)</li><li><code>\</code> ( )</li><li><code>\&lt;TAB&gt;</code> (TAB)</li></ul><!--rehype:className=cols-3 style-none--><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><ul><li><code>\0</code> (NUL)</li><li><code>\a</code> (BEL)</li><li><code>\b</code> (BS)</li><li><code>\f</code> (FF)</li><li><code>\n</code> (LF)</li><li><code>\r</code> (CR)</li><li><code>\t</code> (TAB)</li><li><code>\v</code> (VTAB)</li></ul><!--rehype:className=cols-3 style-none--><h4 id="额外的"><a href="#额外的" class="headerlink" title="额外的"></a>额外的</h4><ul><li><code>\e</code> (ESC)</li><li><code>\_</code> (NBSP)</li><li><code>\N</code> (NEL)</li><li><code>\L</code> (LS)</li><li><code>\P</code> (PS)</li></ul><!--rehype:className=cols-3 style-none--><h3 id="更多类型"><a href="#更多类型" class="headerlink" title="更多类型"></a>更多类型</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>!!set</code></td><td><code>&#123;cherries, plums, apples&#125;</code></td></tr><tr><td><code>!!omap</code></td><td><code>[one: 1, two: 2]</code></td></tr></tbody></table><h3 id="与语言无关的标量类型"><a href="#与语言无关的标量类型" class="headerlink" title="与语言无关的标量类型"></a>与语言无关的标量类型</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&#123;~, null&#125;</code></td><td>空（无值）。</td></tr><tr><td><code>[1234, 0x4D2, 02333]</code></td><td>[十进制整数、十六进制整数、八进制整数]</td></tr><tr><td><code>[1_230.15, 12.3015e+02]</code></td><td>[固定浮点数，指数浮点数]</td></tr><tr><td><code>[.inf, -.Inf, .NAN]</code></td><td>[无穷大（浮点数），负数，不是数字]</td></tr><tr><td><code>&#123;Y, true, Yes, ON&#125;</code></td><td>布尔真</td></tr><tr><td><code>&#123;n, FALSE, No, off&#125;</code></td><td>布尔假</td></tr></tbody></table><!--rehype:class=auto-wrap--><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://yaml.org/refcard.html">YAML Reference Card</a> <em>(yaml.org)</em></li><li><a href="https://learnxinyminutes.com/docs/zh-cn/yaml-cn/">Learn X in Y minutes</a> <em>(learnxinyminutes.com)</em></li><li><a href="http://www.yamllint.com/">YAML lint online</a> <em>(yamllint.com)</em></li><li><a href="./ini.md">INI 格式配置文件备忘清单</a> <em>(jaywcjlove.github.io)</em></li><li><a href="./toml.md">TOML 格式配置文件备忘清单</a> <em>(jaywcjlove.github.io)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YAML-备忘清单&quot;&gt;&lt;a href=&quot;#YAML-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;YAML 备忘清单&quot;&gt;&lt;/a&gt;YAML 备忘清单&lt;/h1&gt;&lt;p&gt;这是理解和编写 YAML 格式配置文件的快速参考备忘单。&lt;/p&gt;
&lt;h2 id=&quot;入</summary>
      
    
    
    
    <category term="配置框架" scheme="https://tdcqcx.github.io/categories/%E9%85%8D%E7%BD%AE%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Yaml" scheme="https://tdcqcx.github.io/tags/Yaml/"/>
    
    <category term="配置框架" scheme="https://tdcqcx.github.io/tags/%E9%85%8D%E7%BD%AE%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/08/vue2%20(1)/"/>
    <id>https://tdcqcx.github.io/2025/01/08/vue2%20(1)/</id>
    <published>2025-01-08T02:35:26.000Z</published>
    <updated>2025-03-28T05:30:10.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-2-备忘清单"><a href="#Vue-2-备忘清单" class="headerlink" title="Vue 2 备忘清单"></a>Vue 2 备忘清单</h1><p>渐进式 JavaScript 框架 <a href="https://v2.cn.vuejs.org/">Vue 2</a> 备忘清单的快速参考列表，包含常用 API 和示例。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Vue 是一套用于构建用户界面的渐进式框架</p><ul><li><a href="https://v2.cn.vuejs.org/">Vue 2.x 官方文档</a> <em>(v2.cn.vuejs.org)</em></li><li><a href="https://v3.router.vuejs.org/">Vue Router 3.x 官方文档</a> <em>(v3.router.vuejs.org)</em></li><li><a href="./vue.md">Vue 3 备忘清单</a></li></ul><!--rehype:className=style-round--><p>注意：Vue 2.x 版本对应 Vue Router 3.x 路由版本</p><h4 id="快速创建-Vue-项目"><a href="#快速创建-Vue-项目" class="headerlink" title="快速创建 Vue 项目"></a>快速创建 <strong>Vue</strong> 项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx @vue/cli create hello-world</span><br></pre></td></tr></table></figure><p>参考: <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html">Vue CLI</a> 创建一个项目</p><h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始信息: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    计算的反向信息: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">          .<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始信息:  &quot;Hello&quot;</span><br><span class="line">计算的反向信息:  &quot;olleH&quot;</span><br></pre></td></tr></table></figure><h3 id="绑定元素属性"><a href="#绑定元素属性" class="headerlink" title="绑定元素属性"></a>绑定元素属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-2&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;页面加载于 &#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        .<span class="title function_">toLocaleString</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">seen</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制切换一个元素是否显示</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;整个牛项目&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="点击事件处理"><a href="#点击事件处理" class="headerlink" title="点击事件处理"></a>点击事件处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span></span><br><span class="line">    反转消息</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-5&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">reverseMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="输入事件处理"><a href="#输入事件处理" class="headerlink" title="输入事件处理"></a>输入事件处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-6&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">  这个将不会改变: &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>v-once</code> 指令，执行一次性地插值，当数据改变时，插值处的内容不会更新</p><h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>解释为普通文本: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  使用 v-html 指令: </span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>v-html</code> 指令，输出真正的 <code>HTML</code></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isDisabled&quot;</span>&gt;</span></span><br><span class="line">  Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 <code>isDisabled</code> 的值是 null&#x2F;undefined&#x2F;false 则 <code>disabled</code> 不会被渲染出来</p><h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>消息: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; msg + &#x27;这是字符串&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; isWorking ? &#x27;是&#x27;:&#x27;否&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; msg.getDetials() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span></span><br><span class="line">  现在你看到我了</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-if</code> 指令将根据表达式 <code>seen</code> 的值的真假来插入&#x2F;移除 &lt;p&gt; 元素</p><h3 id="指令参数"><a href="#指令参数" class="headerlink" title="指令参数"></a>指令参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-bind</code> 指令将该元素 <code>href</code> 属性与表达式 <code>url</code> 的值绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-on</code> 指令，用于监听 DOM 事件，oSomething 是事件名</p><h3 id="指令动态参数-v2-6"><a href="#指令动态参数-v2-6" class="headerlink" title="指令动态参数 v2.6"></a>指令动态参数 <strong>v2.6</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>eventName</code> 的值为 <code>focus</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code></p><h3 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code></p><h3 id="指令缩写"><a href="#指令缩写" class="headerlink" title="指令缩写"></a>指令缩写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>传给 <code>v-bind:class</code> 一个对象，以动态地切换 <code>class</code></p><h3 id="与普通的-class-属性共存"><a href="#与普通的-class-属性共存" class="headerlink" title="与普通的 class 属性共存"></a>与普通的 class 属性共存</h3><!--rehype:wrap-class=row-span-3--><figure class="highlight html"><figcaption><span>&#123;2&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    active: isActive,</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#x27;text-danger&#x27;: hasError</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">hasError</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果渲染为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定的数据对象不必内联定义在模板里"><a href="#绑定的数据对象不必内联定义在模板里" class="headerlink" title="绑定的数据对象不必内联定义在模板里"></a>绑定的数据对象不必内联定义在模板里</h3><!--rehype:wrap-class=row-span-3--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">classObject</span>: &#123;</span><br><span class="line">    <span class="attr">active</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;text-danger&#x27;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果渲染为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">  isActive ? activeClass : &#x27;&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#123; active: isActive &#125;, errorClass</span></span></span><br><span class="line"><span class="string"><span class="tag">]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">  activeClass, errorClass</span></span></span><br><span class="line"><span class="string"><span class="tag">]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">  <span class="attr">errorClass</span>: <span class="string">&#x27;text-danger&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果渲染为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    color: activeColor,</span></span></span><br><span class="line"><span class="string"><span class="tag">    fontSize: fontSize + &#x27;px&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">activeColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果渲染为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 30px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式对象通常更好"><a href="#内联样式对象通常更好" class="headerlink" title="内联样式对象通常更好"></a>内联样式对象通常更好</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">styleObject</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;13px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，对象语法常常结合返回对象的计算属性使用</p><h3 id="内联样式数组语法"><a href="#内联样式数组语法" class="headerlink" title="内联样式数组语法"></a>内联样式数组语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">  baseStyles, overridingStyles</span></span></span><br><span class="line"><span class="string"><span class="tag">]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式多重值"><a href="#内联样式多重值" class="headerlink" title="内联样式多重值"></a>内联样式多重值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">  display: [&#x27;-webkit-box&#x27;, &#x27;flex&#x27;]</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@2.1.0</code> 新增，必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后</p><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  现在你看到我了</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  现在你看不见我了</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面</p><h3 id="上使用-v-if-条件渲染分组"><a href="#上使用-v-if-条件渲染分组" class="headerlink" title="&lt;template&gt; 上使用 v-if 条件渲染分组"></a>&lt;template&gt; 上使用 v-if 条件渲染分组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用-key-管理可复用的元素"><a href="#用-key-管理可复用的元素" class="headerlink" title="用 key 管理可复用的元素"></a>用 key 管理可复用的元素</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入用户名&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  Hello!</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中，只是简单地切换元素的 <code>CSS</code> 属性 <code>display</code></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-for-可选的第二个参数-索引"><a href="#v-for-可选的第二个参数-索引" class="headerlink" title="v-for 可选的第二个参数(索引)"></a>v-for 可选的第二个参数(索引)</h3><figure class="highlight html"><figcaption><span>&#123;2&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;</span><br><span class="line">  &#123;&#123; item.message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 <code>data</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-使用对象"><a href="#v-for-使用对象" class="headerlink" title="v-for 使用对象"></a>v-for 使用对象</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">object</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">    <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">How to do lists in Vue</span><br><span class="line">Jane Doe</span><br><span class="line">2016-04-10</span><br></pre></td></tr></table></figure><p>提供第二个的参数为 property 名称 (也就是键名)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以用第三个参数作为索引</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,name,index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-v-if"><a href="#v-for-v-if" class="headerlink" title="v-for&#x2F;v-if"></a>v-for&#x2F;v-if</h3><figure class="highlight html"><figcaption><span>&#123;2,3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只渲染未完成的 todo，下面加上 <code>v-else</code> 示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意: <code>v-for</code> 和 <code>v-if</code> 不推荐一起使用<a href="https://v2.cn.vuejs.org/v2/guide/conditional.html#v-if-%E4%B8%8E-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">参考官方文档</a></p><h3 id="组件上使用-v-for"><a href="#组件上使用-v-for" class="headerlink" title="组件上使用 v-for"></a>组件上使用 v-for</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>2.2.0+</code> 的版本里，当在组件上使用 <code>v-for</code> 时，<code>key</code> 现在是必须的</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><figure class="highlight html"><figcaption><span>&#123;2&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span></span><br><span class="line">    +1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮已被点击 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span></span><br><span class="line">    你好</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以用 JavaScript 直接调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example2.<span class="title function_">greet</span>() <span class="comment">// =&gt; &#x27;Hello Vue.js!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><figcaption><span>&#123;2,5&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    弹出 hi</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    弹出 what</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>&#123;4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-3&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问原始的 DOM 事件，用特殊变量 $event</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;what&#x27;, $event)&quot;</span>&gt;</span></span><br><span class="line">  提交</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">message, event</span>) &#123;</span><br><span class="line">    <span class="comment">// 现在我们可以访问原生事件对象</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">alert</span>(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 然后交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当 event.target 是当前元素自身时触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符-passive"><a href="#事件修饰符-passive" class="headerlink" title="事件修饰符 passive"></a>事件修饰符 passive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为(即滚动行为)会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 包含 event.preventDefault() 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 <code>.passive</code> <a href="#v-on-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">修饰符</a>尤其能够提升移动端的性能。</p><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 key 是 Enter 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 key 是 PageDown 时被调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.alt.67</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a>.exact 修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">&quot;ctrlClick&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><h3 id="基础例子-1"><a href="#基础例子-1" class="headerlink" title="基础例子"></a>基础例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    计算的反向消息： &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                  .<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  计算的反向消息：&quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件中，我们可以将同一函数定义为一个方法而不是一个计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                .<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。</p><h3 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> = </span><br><span class="line">          val + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> =</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> </span><br><span class="line">        + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;         <span class="comment">// getter</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123; <span class="comment">// setter</span></span><br><span class="line">      <span class="keyword">var</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>]</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lastName</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="文本-1"><a href="#文本-1" class="headerlink" title="文本"></a>文本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编辑我&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>msg is: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;添加多行&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><figcaption><span>&#123;4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个复选框"><a href="#多个复选框" class="headerlink" title="多个复选框"></a>多个复选框</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">checkedNames</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-4&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">picked</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选择框-数组"><a href="#选择框-数组" class="headerlink" title="选择框(数组)"></a>选择框(数组)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">selected</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="v-for-渲染的动态选项"><a href="#v-for-渲染的动态选项" class="headerlink" title="v-for 渲染的动态选项"></a>v-for 渲染的动态选项</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><figcaption><span>&#123;3-4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:value</span>=<span class="string">&quot;option.value&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><figcaption><span>&#123;6-8&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">selected</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;One&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Two&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;B&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Three&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，pc 为字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- toggle 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 选中第一个选项时selected为字符串 abc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当选中时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="property">pick</span> === vm.<span class="property">a</span></span><br></pre></td></tr></table></figure><h3 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">true-value</span>=<span class="string">&quot;yes&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">false-value</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.<span class="property">toggle</span> === <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="comment">// 当没有选中时</span></span><br><span class="line">vm.<span class="property">toggle</span> === <span class="string">&#x27;no&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="选择框的选项"><a href="#选择框的选项" class="headerlink" title="选择框的选项"></a>选择框的选项</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span></span><br><span class="line">    123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当选中时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> vm.<span class="property">selected</span> <span class="comment">// =&gt; &#x27;object&#x27;</span></span><br><span class="line">vm.<span class="property">selected</span>.<span class="property">number</span> <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lazy:在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- number:自动将用户的输入值转为数值类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- trim:自动过滤用户输入的首尾空白字符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><!--rehype:wrap-class=row-span-3--><ul><li><p>将 <code>HTML</code>&#x2F;<code>CSS</code>&#x2F;<code>JS</code> 三部分存放到一个 <code>Hello.vue</code> 文件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125; World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;Hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">greeting</span>: <span class="string">&quot;Hello&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Hello.vue</code> 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&quot;./Hello&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123; <span class="title class_">Hello</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;aaaa&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><!--rehype:className=style-timeline--><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button v-on:click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">      你点击了我 &#123;&#123; count &#125;&#125; 次</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件是可复用的 <code>Vue</code> 实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#components-demo&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件的复用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h3><figure class="highlight js"><figcaption><span>&#123;4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;post&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;blog-post&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:key</span>=<span class="string">&quot;post.id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:post</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="向子组件传递数据"><a href="#向子组件传递数据" class="headerlink" title="向子组件传递数据"></a>向子组件传递数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当值传递给一个 <code>prop</code> <code>attribute</code> 的时候，变成了组件实例的一个 <code>property</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;写博客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;如此有趣&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a><code>data</code> 必须是一个函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件的 <code>data</code> 选项必须是一个函数</p><h3 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight js"><figcaption><span>&#123;7&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;post&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;blog-post&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      &lt;button</span></span><br><span class="line"><span class="string">        v-on:click=&quot;$emit(&#x27;enlarge-txt&#x27;)&quot;</span></span><br><span class="line"><span class="string">      &gt;放大文字</span></span><br><span class="line"><span class="string">      &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用 <code>$emit</code> 的第二个参数来提供这个值</p><figure class="highlight html"><figcaption><span>&#123;2&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;, 0.1)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>$event</code> 访问到被抛出的这个值</p><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">&quot;postFontSize += $event&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果这个事件处理函数是一个方法</p><figure class="highlight html"><figcaption><span>&#123;3&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">&quot;onEnlargeText&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么这个值将会作为第一个参数传入这个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="attr">onEnlargeText</span>: <span class="keyword">function</span>(<span class="params">enlargeAmount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">postFontSize</span> += enlargeAmount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 v-model</h3><!--rehype:wrap-class=col-span-2--><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>当用在组件上时，v-model 则会这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;searchText = $event&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了让它正常工作，这个组件内的 &lt;input&gt; 必须：</p><ul><li>将其 <code>value</code> attribute 绑定到一个名叫 <code>value</code> 的 <code>prop</code> 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li></ul><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;custom-input&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">      v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了</p><figure class="highlight html"><figcaption><span>&#123;2&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  发生了不好的事情。</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><figcaption><span>&#123;5&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;alert-box&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态组件示例"><a href="#动态组件示例" class="headerlink" title="动态组件示例"></a>动态组件示例</h3><!--rehype:wrap-class=col-span-2 row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dynamic-component-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;tab in tabs&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:key</span>=<span class="string">&quot;tab&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#x27;tab-button&#x27;, &#123; active: currentTab === tab &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:click</span>=<span class="string">&quot;currentTab = tab&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; tab &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;tab-home&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;Home component&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;tab-posts&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;Posts component&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;tab-archive&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;Archive component&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#dynamic-component-demo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">currentTab</span>: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tabs</span>: [<span class="string">&quot;Home&quot;</span>, <span class="string">&quot;Posts&quot;</span>, <span class="string">&quot;Archive&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">currentTabComponent</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&quot;tab-&quot;</span> + <span class="variable language_">this</span>.<span class="property">currentTab</span>.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解析-DOM-模板时的注意事项"><a href="#解析-DOM-模板时的注意事项" class="headerlink" title="解析 DOM 模板时的注意事项"></a>解析 DOM 模板时的注意事项</h3><p>有些 HTML 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post-row</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;blog-post-row&gt;</code> 会被作为无效的内容提升到外部</p><hr><p>如果我们从以下来源使用模板的话，这条限制是不存在的</p><ul><li>字符串 (例如：<code>template: &#39;...&#39;</code>)</li><li>单文件组件 (<code>.vue</code>)</li><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li></ul><!--rehype:className=style-round--><h2 id="过渡-动画"><a href="#过渡-动画" class="headerlink" title="过渡 &amp; 动画"></a>过渡 &amp; 动画</h2><h3 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素&#x2F;组件的过渡"></a>单元素&#x2F;组件的过渡</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    切换</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>切换内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* .fade-leave-active 低于 2.1.8 版本 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-过渡"><a href="#CSS-过渡" class="headerlink" title="CSS 过渡"></a>CSS 过渡</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    切换渲染</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>切换内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 可以设置不同的进入和离开动画 */</span></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 设置持续时间和动画函数 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.slide-fade-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.slide-fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* .slide-fade-leave-active 用于 2.1.8 以下版本 */</span> </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.slide-fade-enter</span>, <span class="selector-class">.slide-fade-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>切换展示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>切换内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> bounce-in &#123;</span></span><br><span class="line"><span class="language-css">  <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-enter</code></td><td align="left">定义进入过渡的开始状态 <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>v-enter-active</code></td><td align="left">定义进入过渡生效时的状态 <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>v-enter-to</code> <em>(2.1.8)</em></td><td align="left">定义进入过渡的结束状态 <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>v-leave</code></td><td align="left">定义离开过渡的开始状态 <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>v-leave-active</code></td><td align="left">定义离开过渡生效时的状态 <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>v-leave-to</code> <em>(2.1.8)</em></td><td align="left">定义离开过渡的结束状态 <a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr></tbody></table><p>如果你使用了 <code>&lt;transition name=&quot;my-tran&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-tran-enter</code>。</p><h4 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h4><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>enter-class</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>enter-active-class</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>enter-to-class</code> <em>(2.1.8+)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>leave-class</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>leave-active-class</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr><tr><td align="left"><code>leave-to-class</code> <em>(2.1.8+)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D">#</a></td></tr></tbody></table><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">&quot;animated tada&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间"></a>显性的过渡持续时间</h3><p><code>&lt;transition&gt;</code> 组件上的 <code>duration</code> prop 定制一个显性的过渡持续时间 (以毫秒计)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你也可以定制进入和移出的持续时间：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">  enter: 500,</span></span></span><br><span class="line"><span class="string"><span class="tag">  leave: 800</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h3><!--rehype:wrap-class=row-span-2--><p>可以通过 <code>appear</code> attribute 设置节点在初始渲染的过渡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里默认和进入&#x2F;离开过渡一样，同样也可以自定义 CSS 类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-class</span>=<span class="string">&quot;custom-appear-class&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-to-class</span>=<span class="string">&quot;custom-appear-to-class&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-active-class</span>=<span class="string">&quot;custom-appear-active-class&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义 JavaScript 钩子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-appear</span>=<span class="string">&quot;customBeforeAppearHook&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:appear</span>=<span class="string">&quot;customAppearHook&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-appear</span>=<span class="string">&quot;customAfterAppearHook&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:appear-cancelled</span>=<span class="string">&quot;customAppearCancelledHook&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无论是 <code>appear</code> attribute 还是 <code>v-on:appear</code> 钩子都会生成初始渲染过渡</p><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">&quot;enterCancelled&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">&quot;leaveCancelled&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>钩子函数可以结合 CSS <code>transitions</code>&#x2F;<code>animations</code> 使用，也可以单独使用</p><h3 id="列表的进入-离开过渡"><a href="#列表的进入-离开过渡" class="headerlink" title="列表的进入&#x2F;离开过渡"></a>列表的进入&#x2F;离开过渡</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">items</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">nextNum</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">randomIndex</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(), <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">nextNum</span>++)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">remove</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(), <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-enter-active</span>, <span class="selector-class">.list-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* .list-leave-active 适用于 2.1.8 以下版本 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-enter</span>, <span class="selector-class">.list-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue-2-API-参考"><a href="#Vue-2-API-参考" class="headerlink" title="Vue 2 API 参考"></a>Vue 2 API 参考</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>silent</code></td><td align="left">取消所有的日志与警告 <a href="https://v2.cn.vuejs.org/v2/api/#silent">#</a></td></tr><tr><td align="left"><code>optionMergeStrategies</code></td><td align="left">自定义合并策略的选项 <a href="https://v2.cn.vuejs.org/v2/api/#optionMergeStrategies">#</a></td></tr><tr><td align="left"><code>devtools</code></td><td align="left">是否允许 <a href="https://github.com/vuejs/vue-devtools">devtools</a> 检查 <a href="https://v2.cn.vuejs.org/v2/api/#devtools">#</a></td></tr><tr><td align="left"><code>errorHandler</code></td><td align="left">未捕获错误的处理函数 <em>(开发模式生效)</em> <a href="https://v2.cn.vuejs.org/v2/api/#errorHandler">#</a></td></tr><tr><td align="left"><code>warnHandler</code> <em>(2.4.0)</em></td><td align="left">运行时警告处理函数 <a href="https://v2.cn.vuejs.org/v2/api/#warnHandler">#</a></td></tr><tr><td align="left"><code>ignoredElements</code></td><td align="left">忽略 Vue 之外的 <em>(自定义元素)</em> <a href="https://v2.cn.vuejs.org/v2/api/#ignoredElements">#</a></td></tr><tr><td align="left"><code>keyCodes</code></td><td align="left"><code>v-on</code> 自定义键位别名 <a href="https://v2.cn.vuejs.org/v2/api/#keyCodes">#</a></td></tr><tr><td align="left"><code>performance</code> <em>(2.2.0)</em></td><td align="left">性能追踪 <a href="https://v2.cn.vuejs.org/v2/api/#performance">#</a></td></tr><tr><td align="left"><code>productionTip</code> <em>(2.2.0)</em></td><td align="left">是否生成生产提示 <a href="https://v2.cn.vuejs.org/v2/api/#productionTip">#</a></td></tr></tbody></table><h3 id="全局-API"><a href="#全局-API" class="headerlink" title="全局 API"></a>全局 API</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>Vue.extend</code></td><td align="left">Vue 构造器，创建一个“子类” <a href="https://v2.cn.vuejs.org/v2/api/#Vue-extend">#</a></td></tr><tr><td align="left"><code>Vue.nextTick</code></td><td align="left">执行延迟回调 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-nextTick">#</a></td></tr><tr><td align="left"><code>Vue.set</code></td><td align="left">向响应式对象中添加一个属性 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-set">#</a></td></tr><tr><td align="left"><code>Vue.delete</code></td><td align="left">删除对象的 property <a href="https://v2.cn.vuejs.org/v2/api/#Vue-delete">#</a></td></tr><tr><td align="left"><code>Vue.directive</code></td><td align="left">注册或获取全局指令 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-directive">#</a></td></tr><tr><td align="left"><code>Vue.filter</code></td><td align="left">注册或获取全局过滤器 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-filter">#</a></td></tr><tr><td align="left"><code>Vue.component</code></td><td align="left">注册或获取全局组件 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-component">#</a></td></tr><tr><td align="left"><code>Vue.use</code></td><td align="left">安装 Vue.js 插件 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-use">#</a></td></tr><tr><td align="left"><code>Vue.mixin</code></td><td align="left">全局注册一个混入 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-mixin">#</a></td></tr><tr><td align="left"><code>Vue.compile</code></td><td align="left">将模板字符串编译成 render 函数 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-compile">#</a></td></tr><tr><td align="left"><code>Vue.observable</code> <em>(2.6.0)</em></td><td align="left">让一个对象可响应 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-observable">#</a></td></tr><tr><td align="left"><code>Vue.version</code></td><td align="left">Vue 安装版本号 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-version">#</a></td></tr></tbody></table><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>data</code></td><td align="left">实例的数据对象 <a href="https://v2.cn.vuejs.org/v2/api/#data">#</a></td></tr><tr><td align="left"><code>props</code></td><td align="left">接收来自父组件的数据 <a href="https://v2.cn.vuejs.org/v2/api/#props">#</a></td></tr><tr><td align="left"><code>propsData</code></td><td align="left">创建实例时传递 props <a href="https://v2.cn.vuejs.org/v2/api/#propsData">#</a></td></tr><tr><td align="left"><code>computed</code></td><td align="left">计算属性将被混入到 Vue 实例中 <a href="https://v2.cn.vuejs.org/v2/api/#computed">#</a></td></tr><tr><td align="left"><code>methods</code></td><td align="left">将被混入到 Vue 实例中 <a href="https://v2.cn.vuejs.org/v2/api/#methods">#</a></td></tr><tr><td align="left"><code>watch</code></td><td align="left">对象键是观察的表达式，值是回调函数 <a href="https://v2.cn.vuejs.org/v2/api/#watch">#</a></td></tr></tbody></table><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>el</code></td><td align="left">实例的挂载目标 <a href="https://v2.cn.vuejs.org/v2/api/#el">#</a></td></tr><tr><td align="left"><code>template</code></td><td align="left">字符串模板作为 Vue 实例的标识使用 <a href="https://v2.cn.vuejs.org/v2/api/#template">#</a></td></tr><tr><td align="left"><code>render</code></td><td align="left">字符串模板的代替方案 <a href="https://v2.cn.vuejs.org/v2/api/#render">#</a></td></tr><tr><td align="left"><code>renderError</code> <em>(2.2.0)</em></td><td align="left"><code>render</code>错误时提供另一种渲染 <a href="https://v2.cn.vuejs.org/v2/api/#renderError">#</a></td></tr></tbody></table><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>beforeCreate</code></td><td align="left">实例初始化之后 <a href="https://v2.cn.vuejs.org/v2/api/#beforeCreate">#</a></td></tr><tr><td align="left"><code>created</code></td><td align="left">实例创建完成后被立即同步调用 <a href="https://v2.cn.vuejs.org/v2/api/#created">#</a></td></tr><tr><td align="left"><code>beforeMount</code></td><td align="left">在挂载开始之前被调用 <a href="https://v2.cn.vuejs.org/v2/api/#beforeMount">#</a></td></tr><tr><td align="left"><code>mounted</code></td><td align="left">实例被挂载后调用 <a href="https://v2.cn.vuejs.org/v2/api/#mounted">#</a></td></tr><tr><td align="left"><code>beforeUpdate</code></td><td align="left">数据改变后 DOM 更新之前调用 <a href="https://v2.cn.vuejs.org/v2/api/#beforeUpdate">#</a></td></tr><tr><td align="left"><code>updated</code></td><td align="left">数据更改更新完毕之后被调用 <a href="https://v2.cn.vuejs.org/v2/api/#updated">#</a></td></tr><tr><td align="left"><code>activated</code></td><td align="left">keep-alive 缓存组件激活时调用 <a href="https://v2.cn.vuejs.org/v2/api/#activated">#</a></td></tr><tr><td align="left"><code>deactivated</code></td><td align="left">keep-alive 缓存的组件失活时调用 <a href="https://v2.cn.vuejs.org/v2/api/#deactivated">#</a></td></tr><tr><td align="left"><code>beforeDestroy</code></td><td align="left">实例销毁之前调用 <a href="https://v2.cn.vuejs.org/v2/api/#beforeDestroy">#</a></td></tr><tr><td align="left"><code>destroyed</code></td><td align="left">实例销毁后调用 <a href="https://v2.cn.vuejs.org/v2/api/#destroyed">#</a></td></tr><tr><td align="left"><code>errorCaptured</code> <em>(2.5.0)</em></td><td align="left">来自后代组件的错误时被调用 <a href="https://v2.cn.vuejs.org/v2/api/#errorCaptured">#</a></td></tr></tbody></table><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>directives</code></td><td align="left">包含 Vue 实例可用指令的哈希表 <a href="https://v2.cn.vuejs.org/v2/api/#directives">#</a></td></tr><tr><td align="left"><code>filters</code></td><td align="left">包含 Vue 实例可用过滤器的哈希表 <a href="https://v2.cn.vuejs.org/v2/api/#filters">#</a></td></tr><tr><td align="left"><code>components</code></td><td align="left">包含 Vue 实例可用组件的哈希表 <a href="https://v2.cn.vuejs.org/v2/api/#components">#</a></td></tr></tbody></table><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>parent</code></td><td align="left">指定已创建的实例之父实例 <a href="https://v2.cn.vuejs.org/v2/api/#parent">#</a></td></tr><tr><td align="left"><code>mixins</code></td><td align="left">接收一个混入对象的数组 <a href="https://v2.cn.vuejs.org/v2/api/#mixins">#</a></td></tr><tr><td align="left"><code>extends</code></td><td align="left">声明扩展另一个组件 <a href="https://v2.cn.vuejs.org/v2/api/#extends">#</a></td></tr><tr><td align="left"><code>provide/inject</code> <em>(2.2.0)</em></td><td align="left">祖组件向所有子孙后代注入依赖 <a href="https://v2.cn.vuejs.org/v2/api/#provide-inject">#</a></td></tr></tbody></table><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>name</code></td><td align="left">允许组件模板递归地调用自身 <a href="https://v2.cn.vuejs.org/v2/api/#name">#</a></td></tr><tr><td align="left"><code>delimiters</code></td><td align="left">改变纯文本插入分隔符 <a href="https://v2.cn.vuejs.org/v2/api/#delimiters">#</a></td></tr><tr><td align="left"><code>functional</code></td><td align="left">使组件无状态和无实例 <a href="https://v2.cn.vuejs.org/v2/api/#functional">#</a></td></tr><tr><td align="left"><code>model</code> <em>(2.2.0)</em></td><td align="left">使用 v-model 时定制 prop 和 event <a href="https://v2.cn.vuejs.org/v2/api/#model">#</a></td></tr><tr><td align="left"><code>inheritAttrs</code> <em>(2.4.0)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/api/#inheritAttrs">#</a></td></tr><tr><td align="left"><code>comments</code> <em>(2.4.0)</em></td><td align="left">是否保留模板中的<code>HTML</code>注释 <a href="https://v2.cn.vuejs.org/v2/api/#comments">#</a></td></tr></tbody></table><h3 id="实例方法-数据"><a href="#实例方法-数据" class="headerlink" title="实例方法 &#x2F; 数据"></a>实例方法 &#x2F; 数据</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>vm.$watch</code></td><td align="left">观察 Vue 实例上的一个表达式<br/>或者一个函数计算结果的变化 <a href="https://v2.cn.vuejs.org/v2/api/#vm-watch">#</a></td></tr><tr><td align="left"><code>vm.$set</code></td><td align="left">全局 <code>Vue.set</code> 的别名 <a href="https://v2.cn.vuejs.org/v2/api/#vm-set">#</a></td></tr><tr><td align="left"><code>vm.$delete</code></td><td align="left">全局 <code>Vue.delete</code> 的别名 <a href="https://v2.cn.vuejs.org/v2/api/#vm-delete">#</a></td></tr></tbody></table><h3 id="实例-property"><a href="#实例-property" class="headerlink" title="实例 property"></a>实例 property</h3><!--rehype:wrap-class=row-span-3--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>vm.$data</code></td><td align="left">观察的数据对象 <a href="https://v2.cn.vuejs.org/v2/api/#vm-data">#</a></td></tr><tr><td align="left"><code>vm.$props</code> <em>(2.2.0)</em></td><td align="left">组件接收的 props 对象 <a href="https://v2.cn.vuejs.org/v2/api/#vm-props">#</a></td></tr><tr><td align="left"><code>vm.$el</code></td><td align="left">实例使用的根 DOM 元素 <a href="https://v2.cn.vuejs.org/v2/api/#vm-el">#</a></td></tr><tr><td align="left"><code>vm.$options</code></td><td align="left">实例的初始化选项 <a href="https://v2.cn.vuejs.org/v2/api/#vm-options">#</a></td></tr><tr><td align="left"><code>vm.$parent</code></td><td align="left">父实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-parent">#</a></td></tr><tr><td align="left"><code>vm.$root</code></td><td align="left">当前组件树的根实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-root">#</a></td></tr><tr><td align="left"><code>vm.$children</code></td><td align="left">当前实例的直接子组件 <a href="https://v2.cn.vuejs.org/v2/api/#vm-children">#</a></td></tr><tr><td align="left"><code>vm.$slots</code></td><td align="left">访问被插槽分发的内容 <a href="https://v2.cn.vuejs.org/v2/api/#vm-slots">#</a></td></tr><tr><td align="left"><code>vm.$scopedSlots</code> <em>(2.1.0)</em></td><td align="left">访问作用域插槽 <a href="https://v2.cn.vuejs.org/v2/api/#vm-scopedSlots">#</a></td></tr><tr><td align="left"><code>vm.$refs</code></td><td align="left">DOM 元素和组件实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-refs">#</a></td></tr><tr><td align="left"><code>vm.$isServer</code></td><td align="left">是否运行于服务器 <a href="https://v2.cn.vuejs.org/v2/api/#vm-isServer">#</a></td></tr><tr><td align="left"><code>vm.$attrs</code> <em>(2.4.0)</em></td><td align="left">包含父作用域中不作为 prop 被识别的属性绑定 ( <a href="https://v2.cn.vuejs.org/v2/api/#vm-attrs">#</a></td></tr><tr><td align="left"><code>vm.$listeners</code> <em>(2.4.0)</em></td><td align="left">包含了父作用域中的 (不含 .native 修饰器的) <code>v-on</code> 事件监听器 <a href="https://v2.cn.vuejs.org/v2/api/#vm-listeners">#</a></td></tr></tbody></table><h3 id="实例方法-事件"><a href="#实例方法-事件" class="headerlink" title="实例方法 &#x2F; 事件"></a>实例方法 &#x2F; 事件</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>vm.$on</code></td><td align="left">监听当前实例上的自定义事件 <a href="https://v2.cn.vuejs.org/v2/api/#vm-on">#</a></td></tr><tr><td align="left"><code>vm.$once</code></td><td align="left">监听一个自定义事件，只触发一次 <a href="https://v2.cn.vuejs.org/v2/api/#vm-once">#</a></td></tr><tr><td align="left"><code>vm.$off</code></td><td align="left">移除自定义事件监听器 <a href="https://v2.cn.vuejs.org/v2/api/#vm-off">#</a></td></tr><tr><td align="left"><code>vm.$emit</code></td><td align="left">触发当前实例上的事 <a href="https://v2.cn.vuejs.org/v2/api/#vm-emit">#</a></td></tr></tbody></table><h3 id="实例方法-生命周期"><a href="#实例方法-生命周期" class="headerlink" title="实例方法 &#x2F; 生命周期"></a>实例方法 &#x2F; 生命周期</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>vm.$mount</code></td><td align="left">手动地挂载一个未挂载的实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-mount">#</a></td></tr><tr><td align="left"><code>vm.$forceUpdate</code></td><td align="left">迫使 Vue 实例重新渲染 <a href="https://v2.cn.vuejs.org/v2/api/#vm-forceUpdate">#</a></td></tr><tr><td align="left"><code>vm.$nextTick</code></td><td align="left">回调延迟执行 <a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick">#</a></td></tr><tr><td align="left"><code>vm.$destroy</code></td><td align="left">完全销毁一个实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-destroy">#</a></td></tr></tbody></table><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-text</code></td><td align="left">更新元素的 <code>textContent</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-text">#</a></td></tr><tr><td align="left"><code>v-html</code></td><td align="left">更新元素的 <code>innerHTML</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-html">#</a></td></tr><tr><td align="left"><code>v-show</code></td><td align="left">切换元素的 <code>display</code> css 属性 <a href="https://v2.cn.vuejs.org/v2/api/#v-show">#</a></td></tr><tr><td align="left"><code>v-if</code></td><td align="left">有条件地渲染元素 <a href="https://v2.cn.vuejs.org/v2/api/#v-if">#</a></td></tr><tr><td align="left"><code>v-else</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/api/#v-else">#</a></td></tr><tr><td align="left"><code>v-else-if</code> <em>(2.1.0)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/api/#v-else-if">#</a></td></tr><tr><td align="left"><code>v-for</code></td><td align="left">多次渲染元素或模板块 <a href="https://v2.cn.vuejs.org/v2/api/#v-for">#</a></td></tr><tr><td align="left"><code>v-on</code></td><td align="left">绑定事件监听器 <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td></tr><tr><td align="left"><code>v-bind</code></td><td align="left">动态地绑定一个或多个属性  <a href="https://v2.cn.vuejs.org/v2/api/#v-bind">#</a></td></tr><tr><td align="left"><code>v-model</code></td><td align="left">创建双向绑定 <a href="https://v2.cn.vuejs.org/v2/api/#v-model">#</a></td></tr><tr><td align="left"><code>v-slot</code></td><td align="left">提供插槽或接收 prop 的插槽 <a href="https://v2.cn.vuejs.org/v2/api/#v-slot">#</a></td></tr><tr><td align="left"><code>v-pre</code></td><td align="left">跳过元素和它的子元素编译过程 <a href="https://v2.cn.vuejs.org/v2/api/#v-pre">#</a></td></tr><tr><td align="left"><code>v-cloak</code></td><td align="left">保持在元素上直到实例结束编译 <a href="https://v2.cn.vuejs.org/v2/api/#v-cloak">#</a></td></tr><tr><td align="left"><code>v-once</code></td><td align="left">只渲染元素和组件一次 <a href="https://v2.cn.vuejs.org/v2/api/#v-once">#</a></td></tr></tbody></table><h3 id="特殊-attribute"><a href="#特殊-attribute" class="headerlink" title="特殊 attribute"></a>特殊 attribute</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>key</code></td><td align="left">用在 Vue 的虚拟 DOM 算法 <a href="https://v2.cn.vuejs.org/v2/api/#key">#</a></td></tr><tr><td align="left"><code>ref</code></td><td align="left">元素或子组件注册引用信息 <a href="https://v2.cn.vuejs.org/v2/api/#ref">#</a></td></tr><tr><td align="left"><code>is</code></td><td align="left">限制是否更新 <a href="https://v2.cn.vuejs.org/v2/api/#is">#</a></td></tr><tr><td align="left"><del><code>slot</code></del></td><td align="left">推荐 2.6.0 新增的 <code>v-slot</code> <a href="https://v2.cn.vuejs.org/v2/api/#slot-%E5%BA%9F%E5%BC%83">#</a></td></tr><tr><td align="left"><del><code>slot-scope</code></del></td><td align="left">推荐 2.6.0 新增的 <code>v-slot</code> <a href="https://v2.cn.vuejs.org/v2/api/#slot-scope-%E5%BA%9F%E5%BC%83">#</a></td></tr><tr><td align="left"><del><code>scope</code></del></td><td align="left"><code>2.5.0</code> 新增的 <code>slot-scope</code> 取代 <a href="https://v2.cn.vuejs.org/v2/api/#scope-%E7%A7%BB%E9%99%A4">#</a></td></tr></tbody></table><h3 id="内置的组件"><a href="#内置的组件" class="headerlink" title="内置的组件"></a>内置的组件</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>&lt;component&gt;</code></td><td align="left">渲染一个<code>元组件</code>为动态组件 <a href="https://v2.cn.vuejs.org/v2/api/#component">#</a></td></tr><tr><td align="left"><code>&lt;transition&gt;</code></td><td align="left">单个元素&#x2F;组件的过渡效果 <a href="https://v2.cn.vuejs.org/v2/api/#transition">#</a></td></tr><tr><td align="left"><code>&lt;transition-group&gt;</code></td><td align="left">多个元素&#x2F;组件的过渡效果 <a href="https://v2.cn.vuejs.org/v2/api/#transition-group">#</a></td></tr><tr><td align="left"><code>&lt;keep-alive&gt;</code></td><td align="left">不活动的实例缓存不销毁 <a href="https://v2.cn.vuejs.org/v2/api/#keep-alive">#</a></td></tr><tr><td align="left"><code>&lt;slot&gt;</code></td><td align="left">组件模板中的内容分发插槽 <a href="https://v2.cn.vuejs.org/v2/api/#slot">#</a></td></tr></tbody></table><h3 id="v-on-事件-修饰符"><a href="#v-on-事件-修饰符" class="headerlink" title="v-on (事件)修饰符"></a>v-on (事件)修饰符</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-on:click.stop</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">调用 event.stopPropagation()。</td></tr><tr><td align="left"><code>v-on:click.prevent</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">调用 event.preventDefault()。</td></tr><tr><td align="left"><code>v-on:click.capture</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">添加事件侦听器时使用 capture 模式。</td></tr><tr><td align="left"><code>v-on:click.self</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">只当事件是从侦听器绑定的元素本身触发时才触发回调。</td></tr><tr><td align="left"><code>v-on:click.&#123;keyCode|keyAlias&#125;</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">只当事件是从特定键触发时才触发回调。</td></tr><tr><td align="left"><code>v-on:click.native</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">监听组件根元素的原生事件。</td></tr><tr><td align="left"><code>v-on:click.once</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">只触发一次回调。</td></tr><tr><td align="left"><code>v-on:click.passive</code> <em>(2.3.0)</em> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">以 { passive: true } 模式添加侦听器</td></tr></tbody></table><!--rehype:className=style-list--><h3 id="v-on-鼠标-修饰符"><a href="#v-on-鼠标-修饰符" class="headerlink" title="v-on (鼠标)修饰符"></a>v-on (鼠标)修饰符</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-on:click.left</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">只当点击鼠标左键时触发</td></tr><tr><td align="left"><code>v-on:click.right</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">只当点击鼠标右键时触发</td></tr><tr><td align="left"><code>v-on:click.middle</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-on">#</a></td><td align="left">只当点击鼠标中键时触发</td></tr></tbody></table><p>在 <em>(2.2.0)</em> 中新增</p><h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-on:keyup.ctrl</code> <em>(2.1.0)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE">#</a></td></tr><tr><td align="left"><code>v-on:keyup.alt</code> <em>(2.1.0)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE">#</a></td></tr><tr><td align="left"><code>v-on:keyup.shift</code> <em>(2.1.0)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE">#</a></td></tr><tr><td align="left"><code>v-on:keyup.meta</code> <em>(2.1.0)</em></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE">#</a></td></tr></tbody></table><h3 id="Keyboard-按键修饰符"><a href="#Keyboard-按键修饰符" class="headerlink" title="Keyboard 按键修饰符"></a>Keyboard 按键修饰符</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-on:keyup.enter</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.tab</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.delete</code></td><td align="left">捕获“删除”和“退格”键 <a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.esc</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.space</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.up</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.down</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.left</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr><tr><td align="left"><code>v-on:keyup.right</code></td><td align="left"><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></td></tr></tbody></table><h3 id="v-bind-修饰符"><a href="#v-bind-修饰符" class="headerlink" title="v-bind 修饰符"></a>v-bind 修饰符</h3><table><thead><tr><th align="left">:-</th><th align="left">:-</th></tr></thead><tbody><tr><td align="left"><code>v-bind.prop</code> <a href="https://v2.cn.vuejs.org/v2/api/#v-bind">#</a></td><td align="left">作为一个 DOM property 绑定而不是作为 attribute 绑定。(<a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028">差别在哪里？</a>)</td></tr><tr><td align="left"><code>v-bind.camel</code> <em>(2.1.0+)</em> <a href="https://v2.cn.vuejs.org/v2/api/#v-bind">#</a></td><td align="left">将 kebab-case attribute 名转换为 camelCase。</td></tr><tr><td align="left"><code>v-bind.sync</code> <em>(2.3.0+)</em> <a href="https://v2.cn.vuejs.org/v2/api/#v-bind">#</a></td><td align="left">语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。</td></tr></tbody></table><!--rehype:className=style-list--><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://www.vuemastery.com/pdf/Vue-Essentials-Cheat-Sheet.pdf">Vue Essentials Cheat-Sheet.pdf</a> <em>(vuemastery.com)</em></li><li><a href="https://v2.cn.vuejs.org/">Vue 2 官方文档</a> <em>(vuejs.org)</em></li><li><a href="https://marozed.com/vue-cheatsheet#Instance-Methods-Events">Vue 2 实例方法事件</a> <em>(marozed.com)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-2-备忘清单&quot;&gt;&lt;a href=&quot;#Vue-2-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;Vue 2 备忘清单&quot;&gt;&lt;/a&gt;Vue 2 备忘清单&lt;/h1&gt;&lt;p&gt;渐进式 JavaScript 框架 &lt;a href=&quot;https://v2.</summary>
      
    
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端技术" scheme="https://tdcqcx.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Vue2" scheme="https://tdcqcx.github.io/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Java备忘录</title>
    <link href="https://tdcqcx.github.io/2025/01/07/java%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/"/>
    <id>https://tdcqcx.github.io/2025/01/07/java%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/</id>
    <published>2025-01-07T23:42:54.000Z</published>
    <updated>2025-03-28T05:30:10.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-备忘清单"><a href="#Java-备忘清单" class="headerlink" title="Java 备忘清单"></a>Java 备忘清单</h1><p>该备忘单是针对 Java 初学者的速成课程，有助于复习 Java 语言的基本语法。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="Hello-java"><a href="#Hello-java" class="headerlink" title="Hello.java"></a>Hello.java</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">  <span class="comment">// 主要方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 输出: Hello, world!</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译和运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">javac Hello.java</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">java Hello</span></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 Variables"></a>变量 Variables</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">floatNum</span> <span class="operator">=</span> <span class="number">5.99f</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">site</span> <span class="operator">=</span> <span class="string">&quot;jaywcjlove.github.io&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th>数据类型</th><th>大小</th><th>默认</th><th>范围</th></tr></thead><tbody><tr><td><code>byte</code></td><td>1 byte</td><td>0</td><td>-128 ^to^ 127</td></tr><tr><td><code>short</code></td><td>2 byte</td><td>0</td><td>-2^15^ ^to^ 2^15^-1</td></tr><tr><td><code>int</code></td><td>4 byte</td><td>0</td><td>-2^31^ ^to^ 2^31^-1</td></tr><tr><td><code>long</code></td><td>8 byte</td><td>0</td><td>-2^63^ ^to^ 2^63^-1</td></tr><tr><td><code>float</code></td><td>4 byte</td><td>0.0f</td><td><em>N&#x2F;A</em></td></tr><tr><td><code>double</code></td><td>8 byte</td><td>0.0d</td><td><em>N&#x2F;A</em></td></tr><tr><td><code>char</code></td><td>2 byte</td><td>\u0000</td><td>0 ^to^ 65535</td></tr><tr><td><code>boolean</code></td><td><em>N&#x2F;A</em></td><td>false</td><td>true &#x2F; false</td></tr></tbody></table><!--rehype:className=show-header--><h3 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串 Strings"></a>字符串 Strings</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> <span class="string">&quot;Doe&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> first + <span class="string">&quot; &quot;</span> + last;</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure><p>查看: <a href="#java-%E5%AD%97%E7%AC%A6%E4%B8%B2">Strings</a></p><h3 id="循环-Loops"><a href="#循环-Loops" class="headerlink" title="循环 Loops"></a>循环 Loops</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> <span class="string">&quot;QuickRef&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c: word.toCharArray()) &#123;</span><br><span class="line">  System.out.print(c + <span class="string">&quot;-&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: Q-u-i-c-k-R-e-f-</span></span><br></pre></td></tr></table></figure><p>查看: <a href="#java-%E5%BE%AA%E7%8E%AF">Loops</a></p><h3 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span>];</span><br><span class="line">chars[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">chars[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">String[] letters = &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] mylist = &#123;<span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line"><span class="type">boolean</span>[] answers = &#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;;</span><br></pre></td></tr></table></figure><p>查看: <a href="#java-%E6%95%B0%E7%BB%84">Arrays</a></p><h3 id="交换变量-Swap"><a href="#交换变量-Swap" class="headerlink" title="交换变量 Swap"></a>交换变量 Swap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(a + <span class="string">&quot; &quot;</span> + b); <span class="comment">// 1 2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">System.out.println(a + <span class="string">&quot; &quot;</span> + b); <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure><h3 id="类型转换-Type-Casting"><a href="#类型转换-Type-Casting" class="headerlink" title="类型转换 Type Casting"></a>类型转换 Type Casting</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Widening</span></span><br><span class="line"><span class="comment">// byte&lt;short&lt;int&lt;long&lt;float&lt;double</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> i;               <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// Narrowing</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10.02</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> (<span class="type">long</span>)d;         <span class="comment">// 10</span></span><br><span class="line">String.valueOf(<span class="number">10</span>);       <span class="comment">// &quot;10&quot;</span></span><br><span class="line">Integer.parseInt(<span class="string">&quot;10&quot;</span>);   <span class="comment">// 10</span></span><br><span class="line">Double.parseDouble(<span class="string">&quot;10&quot;</span>); <span class="comment">// 10.0</span></span><br></pre></td></tr></table></figure><h3 id="条件语句-Conditionals"><a href="#条件语句-Conditionals" class="headerlink" title="条件语句 Conditionals"></a>条件语句 Conditionals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">10</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;I get printed&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;I don&#x27;t&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;I also don&#x27;t&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看: [Conditionals](#条件语句 Conditionals)</p><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure><h2 id="Java-字符串"><a href="#Java-字符串" class="headerlink" title="Java 字符串"></a>Java 字符串</h2><h3 id="基本的"><a href="#基本的" class="headerlink" title="基本的"></a>基本的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span> + <span class="string">&quot;str&quot;</span> + <span class="number">3</span>;     <span class="comment">// 3str3</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span> + <span class="number">3</span> + <span class="string">&quot;str&quot;</span>;     <span class="comment">// 6str</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span> + <span class="number">3</span> + <span class="string">&quot;str&quot;</span>;   <span class="comment">// 33str</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span> + <span class="string">&quot;3&quot;</span> + <span class="string">&quot;23&quot;</span>;  <span class="comment">// 3323</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + <span class="number">3</span> + <span class="number">3</span> + <span class="string">&quot;23&quot;</span>; <span class="comment">// 3323</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span> + <span class="number">3</span> + <span class="number">23</span>;        <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><h3 id="字符串生成器"><a href="#字符串生成器" class="headerlink" title="字符串生成器"></a>字符串生成器</h3><!--rehype:wrap-class=row-span-3--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">|   |   |   |   |   |   |   |   |   |</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.append(<span class="string">&quot;Reference&quot;</span>);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">| R | e | f | e | r | e | n | c | e |</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.delete(<span class="number">3</span>, <span class="number">9</span>);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">| R | e | f |   |   |   |   |   |   |</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.insert(<span class="number">0</span>, <span class="string">&quot;My &quot;</span>);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">| M | y |   | R | e | f |   |   |   |</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.append(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───┬───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">| M | y |   | R | e | f | ! |   |   |</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;QuickRef&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;QuickRef&quot;</span>);</span><br><span class="line">s1 == s2                     <span class="comment">// false</span></span><br><span class="line">s1.equals(s2)                <span class="comment">// true</span></span><br><span class="line"><span class="comment">// intern 方法获得字符串常量池中的惟一引用</span></span><br><span class="line">s1 == s2.intern()            <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;AB&quot;</span>.equalsIgnoreCase(<span class="string">&quot;ab&quot;</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="操纵"><a href="#操纵" class="headerlink" title="操纵"></a>操纵</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Abcd&quot;</span>;</span><br><span class="line">str.toUpperCase();     <span class="comment">// ABCD</span></span><br><span class="line">str.toLowerCase();     <span class="comment">// abcd</span></span><br><span class="line">str.concat(<span class="string">&quot;#&quot;</span>);       <span class="comment">// Abcd#</span></span><br><span class="line">str.replace(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;-&quot;</span>); <span class="comment">// A-cd</span></span><br><span class="line"><span class="string">&quot;  abc &quot;</span>.trim();       <span class="comment">// abc</span></span><br><span class="line"><span class="string">&quot;ab&quot;</span>.toCharArray();    <span class="comment">// &#123;&#x27;a&#x27;, &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">str.charAt(<span class="number">2</span>);       <span class="comment">// c</span></span><br><span class="line">str.indexOf(<span class="string">&quot;a&quot;</span>)     <span class="comment">// 0</span></span><br><span class="line">str.indexOf(<span class="string">&quot;z&quot;</span>)     <span class="comment">// -1</span></span><br><span class="line">str.length();        <span class="comment">// 4</span></span><br><span class="line">str.toString();      <span class="comment">// abcd</span></span><br><span class="line">str.substring(<span class="number">2</span>);    <span class="comment">// cd</span></span><br><span class="line">str.substring(<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">// c</span></span><br><span class="line">str.contains(<span class="string">&quot;c&quot;</span>);   <span class="comment">// true</span></span><br><span class="line">str.endsWith(<span class="string">&quot;d&quot;</span>);   <span class="comment">// true</span></span><br><span class="line">str.startsWith(<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br><span class="line">str.isEmpty();       <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">// 输出: hello</span></span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">concat</span> <span class="operator">=</span> str.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">// 输出: helloworld</span></span><br><span class="line">System.out.println(concat);</span><br></pre></td></tr></table></figure><p>一旦创建就不能修改，任何修改都会创建一个新的String</p><h2 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h2><h3 id="声明-Declare"><a href="#声明-Declare" class="headerlink" title="声明 Declare"></a>声明 Declare</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a1;</span><br><span class="line"><span class="type">int</span>[] a2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">a4[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a4[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">a4[<span class="number">3</span>] = <span class="number">3</span>; <span class="comment">// 会出现索引越界异常</span></span><br></pre></td></tr></table></figure><h3 id="修改-Modify"><a href="#修改-Modify" class="headerlink" title="修改 Modify"></a>修改 Modify</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]); <span class="comment">// 9</span></span><br><span class="line">System.out.println(a.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="循环-读-写"><a href="#循环-读-写" class="headerlink" title="循环 (读 &amp; 写)"></a>循环 (读 &amp; 写)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = arr[i] * <span class="number">2</span>;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 2 4 6</span></span><br></pre></td></tr></table></figure><h3 id="Loop-Read"><a href="#Loop-Read" class="headerlink" title="Loop (Read)"></a>Loop (Read)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a: arr) &#123;</span><br><span class="line">    System.out.print(a + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: a b c</span></span><br></pre></td></tr></table></figure><h3 id="二维数组-Multidimensional-Arrays"><a href="#二维数组-Multidimensional-Arrays" class="headerlink" title="二维数组 Multidimensional Arrays"></a>二维数组 Multidimensional Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> matrix[<span class="number">1</span>][<span class="number">0</span>];  <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// [[1, 2, 3], [4, 5]]</span></span><br><span class="line">Arrays.deepToString(matrix)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; ++i) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; ++j) &#123;</span><br><span class="line">    System.out.println(a[i][j]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 1 2 3 4 5 6 7</span></span><br></pre></td></tr></table></figure><h3 id="排序-Sort"><a href="#排序-Sort" class="headerlink" title="排序 Sort"></a>排序 Sort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">Arrays.sort(chars);</span><br><span class="line"><span class="comment">// [a, b, c]</span></span><br><span class="line">Arrays.toString(chars);</span><br></pre></td></tr></table></figure><h2 id="Java-条件语句"><a href="#Java-条件语句" class="headerlink" title="Java 条件语句"></a>Java 条件语句</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><!--rehype:wrap-class=row-span-3--><ul><li><code>+</code> <em>(加法运算符(也用于字符串连接))</em></li><li><code>-</code> <em>(减法运算符)</em></li><li><code>*</code> <em>(乘法运算符)</em></li><li><code>/</code> <em>(分区运算符)</em></li><li><code>%</code> <em>(余数运算符)</em></li><li><code>=</code> <em>(简单赋值运算符)</em></li><li><code>++</code> <em>(增量运算符；将值增加 1)</em></li><li><code>--</code> <em>(递减运算符；将值减 1)</em></li><li><code>!</code> <em>(逻辑补码运算符；反转布尔值)</em></li></ul><!--rehype:className=style-round--><hr><ul><li><code>==</code> <em>(等于)</em></li><li><code>!=</code> <em>(不等于)</em></li><li><code>&gt;</code> <em>(比…更棒)</em></li><li><code>&gt;=</code> <em>(大于或等于)</em></li><li><code>&lt;</code> <em>(少于)</em></li><li><code>&lt;=</code> <em>(小于或等于)</em></li></ul><!--rehype:className=cols-2 style-round--><hr><ul><li><code>&amp;&amp;</code> <em>条件与</em></li><li><code>||</code> <em>条件或</em></li><li><a href="#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6">?:</a> <em>三元(if-then-else 语句的简写)</em></li></ul><!--rehype:className=style-round--><hr><ul><li><code>instanceof</code> <em>(将对象与指定类型进行比较)</em></li></ul><!--rehype:className=style-round--><hr><ul><li><code>~</code> <em>(一元按位补码)</em></li><li><code>&lt;&lt;</code> <em>(签名左移)</em></li><li><code>&gt;&gt;</code> <em>(有符号右移)</em></li><li><code>&gt;&gt;&gt;</code> <em>(无符号右移)</em></li><li><code>&amp;</code> <em>(按位与)</em></li><li><code>^</code> <em>(按位异或)</em></li><li><code>|</code> <em>(按位包含 OR)</em></li></ul><!--rehype:className=cols-2 style-round--><h3 id="If-else"><a href="#If-else" class="headerlink" title="If else"></a>If else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">20</span>) &#123;</span><br><span class="line">  System.out.println(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  System.out.println(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">String str;</span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    str = <span class="string">&quot;January&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    str = <span class="string">&quot;February&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    str = <span class="string">&quot;March&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    str = <span class="string">&quot;Some other month&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: Result March</span></span><br><span class="line">System.out.println(<span class="string">&quot;Result &quot;</span> + str);</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (a &gt; b) ? a : b;</span><br><span class="line"><span class="comment">// 输出: 20</span></span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与运算</span></span><br><span class="line"><span class="keyword">if</span> (condition1 &amp;&amp; condition2) &#123;</span><br><span class="line">  <span class="comment">// 如果 condition1 和 condition2 都成立</span></span><br><span class="line">  <span class="comment">// 则执行此处的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或运算</span></span><br><span class="line"><span class="keyword">if</span> (condition1 || condition2) &#123;</span><br><span class="line">  <span class="comment">// 如果condition1或condition2任意一个成立</span></span><br><span class="line">  <span class="comment">// 则执行此处的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非运算</span></span><br><span class="line"><span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">  <span class="comment">// 如果条件不成立，则执行此处的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等于</span></span><br><span class="line"><span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">    <span class="comment">// 如果a等于b，则执行此处的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等于</span></span><br><span class="line"><span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">    <span class="comment">// 如果a不等于b，则执行此处的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于、大于等于、小于、小于等于</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (a &gt;= b) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt;= b) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-循环"><a href="#Java-循环" class="headerlink" title="Java 循环"></a>Java 循环</h2><h3 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 0123456789</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++,j--) &#123;</span><br><span class="line">  System.out.print(j + <span class="string">&quot;|&quot;</span> + i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 0|0 -1|1 -2|2</span></span><br></pre></td></tr></table></figure><h3 id="增强的-For-循环"><a href="#增强的-For-循环" class="headerlink" title="增强的 For 循环"></a>增强的 For 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> number: numbers) &#123;</span><br><span class="line">  System.out.print(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 12345</span></span><br></pre></td></tr></table></figure><p>用于循环数组或列表</p><h3 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  System.out.print(count);</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 01234</span></span><br></pre></td></tr></table></figure><h3 id="Do-While-循环"><a href="#Do-While-循环" class="headerlink" title="Do While 循环"></a>Do While 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  System.out.print(count);</span><br><span class="line">  count++;</span><br><span class="line">&#125; <span class="keyword">while</span> (count &lt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 输出: 01234</span></span><br></pre></td></tr></table></figure><h3 id="继续声明"><a href="#继续声明" class="headerlink" title="继续声明"></a>继续声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 01245</span></span><br></pre></td></tr></table></figure><h3 id="中断语句"><a href="#中断语句" class="headerlink" title="中断语句"></a>中断语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  System.out.print(i);</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 0123</span></span><br></pre></td></tr></table></figure><h2 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><!--rehype:wrap-class=row-span-2 col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// todo something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现Callable接口,T 替换成实际类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// todo something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承Thrad类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// todo something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableThread</span>()).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ExtendsThread2</span>().start();</span><br><span class="line">    FutureTask&lt;Integer&gt; integerFutureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">CallableTask</span>());</span><br><span class="line">    integerFutureTask.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li>corePoolSize: 核心线程数</li><li>maximumPoolSize: 最大线程数</li><li>keepAliveTime: 线程空闲时间</li><li>timeUni: 线程空闲时间单位</li><li>workQueue: 线程等待队列</li><li>threadFactory: 线程创建工厂</li><li>handler: 拒绝策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">  <span class="number">2</span>, <span class="number">5</span>,</span><br><span class="line">  <span class="number">5</span>, TimeUnit.SECONDS,</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">DefaultThreadFactory</span>(<span class="string">&quot;pollName&quot;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内置的线程池, 不推荐生产使用</span></span><br><span class="line">Executors.newCachedThreadPool();</span><br><span class="line">Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (静态)方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">synchronized</span></span><br><span class="line">  <span class="params">(<span class="keyword">static</span>)</span> <span class="keyword">void</span> <span class="title function_">methodName</span><span class="params">()</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程编排"><a href="#线程编排" class="headerlink" title="线程编排"></a>线程编排</h3><!--rehype:wrap-class=row-span-2 col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">       countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">countDownLatch.await();</span><br></pre></td></tr></table></figure><p>CompletableFuture</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; task1 = CompletableFuture.runAsync(() -&gt; &#123;&#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; task2 = CompletableFuture.runAsync(() -&gt; &#123;&#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; task3 = CompletableFuture.runAsync(() -&gt; &#123;&#125;);</span><br><span class="line">CompletableFuture.allOf(task1, task2, task3).get();</span><br></pre></td></tr></table></figure><p>Semaphore</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    semaphore.acquire();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    semaphore.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;Integer&gt; threadLocal</span><br><span class="line">    = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>使用完之后一定要记得 <code>remove</code>, 否则会内存泄露</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">threadLocal.set(<span class="number">1</span>);</span><br><span class="line">threadLocal.get();</span><br><span class="line">threadLocal.remove();</span><br></pre></td></tr></table></figure><h3 id="线程等待与唤醒"><a href="#线程等待与唤醒" class="headerlink" title="线程等待与唤醒"></a>线程等待与唤醒</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要synchronized修饰的代码块才能使用</span></span><br><span class="line">wait();</span><br><span class="line">notify();</span><br><span class="line">notifyAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lock的条件唤醒</span></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">Condition condition= lock.newCondition();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 当前线程唤醒或等待</span></span><br><span class="line">    condition.await();</span><br><span class="line">    condition.signal();</span><br><span class="line">    condition.signalAll();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  lock.unlock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LockSupport,可以先unpark,后续park不会阻塞线程</span></span><br><span class="line">LockSupport.park(obj);</span><br><span class="line">LockSupport.unpark(thread);</span><br></pre></td></tr></table></figure><h2 id="Java-框架搜集"><a href="#Java-框架搜集" class="headerlink" title="Java 框架搜集"></a>Java 框架搜集</h2><h3 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h3><!--rehype:wrap-class=col-span-2 row-span-2--><table><thead><tr><th align="left">集合</th><th align="left">Interface</th><th align="left">有序</th><th align="left">已排序</th><th align="left">线程安全</th><th align="left">复制</th><th align="left">Nullable</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html">ArrayList</a></td><td align="left">List</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html">Vector</a></td><td align="left">List</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html">LinkedList</a></td><td align="left">List, Deque</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html">CopyOnWriteArrayList</a></td><td align="left">List</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html">HashSet</a></td><td align="left">Set</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">One <code>null</code></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html">LinkedHashSet</a></td><td align="left">Set</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">One <code>null</code></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html">TreeSet</a></td><td align="left">Set</td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html">CopyOnWriteArraySet</a></td><td align="left">Set</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">One <code>null</code></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html">ConcurrentSkipListSet</a></td><td align="left">Set</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html">HashMap</a></td><td align="left">Map</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N (key)</em></td><td align="left">One <code>null</code> <em>(key)</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html">HashTable</a></td><td align="left">Map</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left"><em>N (key)</em></td><td align="left"><em>N (key)</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html">LinkedHashMap</a></td><td align="left">Map</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left"><em>N (key)</em></td><td align="left">One <code>null</code> <em>(key)</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html">TreeMap</a></td><td align="left">Map</td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N (key)</em></td><td align="left"><em>N (key)</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html">ConcurrentHashMap</a></td><td align="left">Map</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left"><em>N (key)</em></td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html">ConcurrentSkipListMap</a></td><td align="left">Map</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N (key)</em></td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html">ArrayDeque</a></td><td align="left">Deque</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html">PriorityQueue</a></td><td align="left">Queue</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html">ConcurrentLinkedQueue</a></td><td align="left">Queue</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html">ConcurrentLinkedDeque</a></td><td align="left">Deque</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html">ArrayBlockingQueue</a></td><td align="left">Queue</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html">LinkedBlockingDeque</a></td><td align="left">Deque</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td></tr><tr><td align="left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html">PriorityBlockingQueue</a></td><td align="left">Queue</td><td align="left">Y</td><td align="left"><em>N</em></td><td align="left">Y</td><td align="left">Y</td><td align="left"><em>N</em></td></tr></tbody></table><!--rehype:className=show-header--><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">nums.add(<span class="number">2</span>);</span><br><span class="line">nums.add(<span class="number">5</span>);</span><br><span class="line">nums.add(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 检索</span></span><br><span class="line">System.out.println(nums.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// 为循环迭代编制索引</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">    System.out.println(nums.get(i));</span><br><span class="line">&#125;</span><br><span class="line">nums.remove(nums.size() - <span class="number">1</span>);</span><br><span class="line">nums.remove(<span class="number">0</span>); <span class="comment">// 非常慢</span></span><br><span class="line"><span class="keyword">for</span> (Integer value : nums) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lambda 打印元素</span></span><br><span class="line">nums.forEach(</span><br><span class="line">  e -&gt; System.out.println(e.toString())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">m.put(<span class="number">5</span>, <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">m.put(<span class="number">8</span>, <span class="string">&quot;Eight&quot;</span>);</span><br><span class="line">m.put(<span class="number">6</span>, <span class="string">&quot;Six&quot;</span>);</span><br><span class="line">m.put(<span class="number">4</span>, <span class="string">&quot;Four&quot;</span>);</span><br><span class="line">m.put(<span class="number">2</span>, <span class="string">&quot;Two&quot;</span>);</span><br><span class="line"><span class="comment">// 检索</span></span><br><span class="line">System.out.println(m.get(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// Lambda forEach</span></span><br><span class="line">m.forEach((key, value) -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> key + <span class="string">&quot;: &quot;</span> + value;</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentHashMap&lt;Integer, String&gt; m</span><br><span class="line">            = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">m.put(<span class="number">100</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">m.put(<span class="number">101</span>, <span class="string">&quot;Geeks&quot;</span>);</span><br><span class="line">m.put(<span class="number">102</span>, <span class="string">&quot;Geeks&quot;</span>);</span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line">m.remove(<span class="number">101</span>, <span class="string">&quot;Geeks&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不存在，就添加，存在就不变更</span></span><br><span class="line">m.putIfAbsent(<span class="number">103</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">m.replace(<span class="number">101</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;For&quot;</span>);</span><br><span class="line">System.out.println(m);</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (set.isEmpty()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Empty!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">set.add(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;mouse&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;snake&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;bear&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (set.contains(<span class="string">&quot;cat&quot;</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Contains cat&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">set.remove(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : set) &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line">set.forEach(</span><br><span class="line">  e -&gt; System.out.println(e.toString())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 使用 add()</span></span><br><span class="line">a.add(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 addFirst()</span></span><br><span class="line">a.addFirst(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 addLast()</span></span><br><span class="line">a.addLast(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="comment">// [Cat, Dog, Horse]</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line">System.out.println(a.peek());</span><br><span class="line"><span class="comment">// 移除元素</span></span><br><span class="line">System.out.println(a.pop());</span><br></pre></td></tr></table></figure><h2 id="Java-I-O流"><a href="#Java-I-O流" class="headerlink" title="Java I&#x2F;O流"></a>Java I&#x2F;O流</h2><h3 id="常见的类和操作"><a href="#常见的类和操作" class="headerlink" title="常见的类和操作"></a>常见的类和操作</h3><!--rehype:wrap-class=row-span-5--><p>字节流</p><ul><li><code>InputStream</code> 字节输入流的抽象基类</li><li><code>FileInputStream</code> 从文件中读取字节的输入流</li><li><code>ByteArrayInputStream</code> 从字节数组中读取字节的输入流</li><li><code>OutputStream</code> 字节输出流的抽象基类</li><li><code>FileOutputStream</code> 向文件中写入字节的输出流</li><li><code>ByteArrayOutputStream</code> 将字节写入到字节数组的输出流</li></ul><p>字符流</p><ul><li><code>Reader</code> 字符输入流的抽象基类</li><li><code>FileReader</code> 从文件中读取字符的输入流</li><li><code>BufferedReader</code> 带缓冲区的字符输入流</li><li><code>InputStreamReader</code> 字节流到字符流的桥接器</li><li><code>Writer</code> 字符输出流的抽象基类</li><li><code>FileWriter</code> 向文件中写入字符的输出流</li><li><code>BufferedWriter</code> 带缓冲区的字符输出流</li><li><code>OutputStreamWriter</code> 字符流到字节流的桥接器</li></ul><p>对象流</p><ul><li><code>ObjectInputStream</code> 从输入流中读取Java对象的流</li><li><code>ObjectOutputStream</code> 将Java对象写入输出流的流</li></ul><p>缓冲流</p><ul><li><code>BufferedInputStream</code> 带缓冲区的字节输入流</li><li><code>BufferedOutputStream</code> 带缓冲区的字节输出流</li><li><code>BufferedReader</code> 带缓冲区的字符输入流</li><li><code>BufferedWriter</code> 带缓冲区的字符输出流</li></ul><p>数据流</p><ul><li><code>DataInputStream</code> 从输入流中读取基本数据类型的数据</li><li><code>DataOutputStream</code> 将基本数据类型数据写入输出流</li></ul><p>文件类</p><ul><li><code>File</code> 文件和目录路径名的抽象表示</li><li><code>FileReader</code> 从文件中读取字符的输入流</li><li><code>FileWriter</code> 向文件中写入字符的输出流</li></ul><p>输入输出异常处理</p><ul><li><code>IOException</code> Java I&#x2F;O操作中的通用异常</li><li><code>FileNotFoundException</code> 当试图打开指定文件失败时抛出</li><li><code>EOFException</code> 在尝试读取流的末尾时抛出</li></ul><p>其他流</p><ul><li><code>PrintStream</code> 打印格式化表示的对象的输出流</li><li><code>PrintWriter</code> 格式化的文本输出流</li><li><code>RandomAccessFile</code> 随机访问文件的类，支持读取和写入操作</li></ul><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲字节输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">bufferedInputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲字节输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">bufferedOutputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(outputStream);</span><br></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件字符输入流</span></span><br><span class="line"><span class="type">Reader</span> <span class="variable">fileReader</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件字符输出流</span></span><br><span class="line"><span class="type">Writer</span> <span class="variable">fileWriter</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲字符输入流</span></span><br><span class="line"><span class="type">Reader</span> <span class="variable">bufferedFileReader</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲字符输出流</span></span><br><span class="line"><span class="type">Writer</span> <span class="variable">bufferedFileWriter</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据输入流</span></span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dataInputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据输出流</span></span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(outputStream);</span><br></pre></td></tr></table></figure><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象输出流</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br></pre></td></tr></table></figure><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><!--rehype:wrap-class=col-span-2--><p>序列化对象到文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">  <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span></span><br><span class="line">    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.dat&quot;</span>))</span><br><span class="line">) &#123;</span><br><span class="line">    objectOutputStream.writeObject(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从文件反序列化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">  <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span></span><br><span class="line">    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.dat&quot;</span>))</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><p>标准输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">standardInputStream</span></span><br><span class="line">      <span class="operator">=</span> System.in;</span><br></pre></td></tr></table></figure><p>标准输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">standardOutputStream</span></span><br><span class="line">      <span class="operator">=</span> System.out;</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取字节数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">byteData</span> <span class="operator">=</span> inputStream.read();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入字节数据</span></span><br><span class="line">outputStream.write(byteData);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取字符数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">charData</span> <span class="operator">=</span> reader.read();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入字符数据</span></span><br><span class="line">writer.write(charData);</span><br></pre></td></tr></table></figure><h3 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭输入流</span></span><br><span class="line">inputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭输出流</span></span><br><span class="line">outputStream.close();</span><br></pre></td></tr></table></figure><h2 id="Java-Stream-流"><a href="#Java-Stream-流" class="headerlink" title="Java Stream 流"></a>Java Stream 流</h2><!--rehype:body-class=cols-2--><h3 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h3><p>从集合创建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; streamFromList = list.stream();</span><br></pre></td></tr></table></figure><p>从数组创建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = &#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; streamFromArray = Arrays.stream(array);</span><br></pre></td></tr></table></figure><p>创建空流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; emptyStream = Stream.empty();</span><br></pre></td></tr></table></figure><p>创建无限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; infiniteStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤</span></span><br><span class="line">Stream&lt;String&gt; filteredStream = list.stream().filter(</span><br><span class="line">  s -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射</span></span><br><span class="line">Stream&lt;Integer&gt; mappedStream = list.stream().map(String::length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">Stream&lt;String&gt; sortedStream = list.stream().sorted();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line">Stream&lt;String&gt; distinctStream = list.stream().distinct();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截断</span></span><br><span class="line">Stream&lt;String&gt; limitedStream = list.stream().limit(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过</span></span><br><span class="line">Stream&lt;String&gt; skippedStream = list.stream().skip(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚合操作</span></span><br><span class="line">Optional&lt;String&gt; anyElement = list.stream().findAny();</span><br><span class="line">Optional&lt;String&gt; firstElement = list.stream().findFirst();</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().count();</span><br><span class="line">Optional&lt;String&gt; maxElement = list.stream()</span><br><span class="line">    .max(Comparator.naturalOrder());</span><br><span class="line">Optional&lt;String&gt; minElement = list.stream()</span><br><span class="line">    .min(Comparator.naturalOrder());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查匹配</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> list.stream().anyMatch(s -&gt; s.contains(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> list.stream().allMatch(s -&gt; s.length() == <span class="number">1</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> list.stream().noneMatch(s -&gt; s.contains(<span class="string">&quot;z&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归约</span></span><br><span class="line">Optional&lt;String&gt; reducedString = list.stream()</span><br><span class="line">  .reduce((s1, s2) -&gt; s1 + s2);</span><br><span class="line"><span class="type">String</span> <span class="variable">reducedStringWithIdentity</span> <span class="operator">=</span> list.stream()</span><br><span class="line">  .reduce(<span class="string">&quot;Start:&quot;</span>, (s1, s2) -&gt; s1 + s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集</span></span><br><span class="line">List&lt;String&gt; collectedList = list.stream()</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; collectedSet = list.stream()</span><br><span class="line">    .collect(Collectors.toSet());</span><br><span class="line">Map&lt;Integer, String&gt; collectedMap = list.stream()</span><br><span class="line">    .collect(</span><br><span class="line">        Collectors.toMap(String::length, Function.identity())</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line">List&lt;String&gt; upperCaseList = list.parallelStream()</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>这些是使用 Java 反射时常见的操作。使用反射需要注意性能和安全性问题，尽量避免在性能要求高的地方过度使用。</p><h3 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过类名获取Class对象</span></span><br><span class="line">Class&lt;?&gt; clazz1 = MyClass.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过对象获取Class对象</span></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">Class&lt;?&gt; clazz2 = obj.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过完整类名字符串获取Class对象</span></span><br><span class="line">Class&lt;?&gt; clazz3 = Class.forName(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取类的信息"><a href="#获取类的信息" class="headerlink" title="获取类的信息"></a>获取类的信息</h3><!--rehype:wrap-class=row-span-2--><p>获取类的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> clazz.getName();</span><br></pre></td></tr></table></figure><p>获取类的修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> clazz.getModifiers();</span><br></pre></td></tr></table></figure><p>获取类的包信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Package</span> <span class="variable">pkg</span> <span class="operator">=</span> clazz.getPackage();</span><br></pre></td></tr></table></figure><p>获取类的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; superClass = clazz.getSuperclass();</span><br></pre></td></tr></table></figure><p>获取类实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</span><br></pre></td></tr></table></figure><h3 id="创建对象实例"><a href="#创建对象实例" class="headerlink" title="创建对象实例"></a>创建对象实例</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认构造函数创建对象</span></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">instance</span> <span class="operator">=</span> (MyClass) clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用带参数的构造函数创建对象</span></span><br><span class="line">Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">instanceWithArgs</span> <span class="operator">=</span> (MyClass) constructor.newInstance(<span class="string">&quot;example&quot;</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><h3 id="获取和设置字段值"><a href="#获取和设置字段值" class="headerlink" title="获取和设置字段值"></a>获取和设置字段值</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取字段值</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;fieldName&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>); <span class="comment">// 如果字段是私有的，需要设置可访问</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(instance);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字段值</span></span><br><span class="line">field.set(instance, newValue);</span><br></pre></td></tr></table></figure><h3 id="处理泛型"><a href="#处理泛型" class="headerlink" title="处理泛型"></a>处理泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取泛型信息</span></span><br><span class="line"><span class="type">Type</span> <span class="variable">genericType</span> <span class="operator">=</span> field.getGenericType();</span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;methodName&quot;</span>, parameterTypes);</span><br><span class="line">method.setAccessible(<span class="literal">true</span>); <span class="comment">// 如果方法是私有的，需要设置可访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(instance, args);</span><br></pre></td></tr></table></figure><h3 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h3><!--rehype:wrap-class=row-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是数组、枚举、注解等</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isArray</span> <span class="operator">=</span> clazz.isArray();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEnum</span> <span class="operator">=</span> clazz.isEnum();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isAnnotation</span> <span class="operator">=</span> clazz.isAnnotation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造函数、字段、方法等</span></span><br><span class="line">Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">Method[] methods = clazz.getDeclaredMethods();</span><br></pre></td></tr></table></figure><h3 id="处理注解"><a href="#处理注解" class="headerlink" title="处理注解"></a>处理注解</h3><!--rehype:wrap-class=col-span-2--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取注解信息</span></span><br><span class="line"><span class="type">Annotation</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(MyAnnotation.class);</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="方法引用-1"><a href="#方法引用-1" class="headerlink" title="方法引用"></a>方法引用</h3><!--rehype:wrap-class=row-span-3--><p>Java 的 <code>Consumer</code> 接口里的 <code>accept</code> 方法接受参数但不返回值。要让它打印传入的参数，可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; test = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">      System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">test.accept(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><p>更简单的，我们可以直接传入Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; test = System.out::println;</span><br></pre></td></tr></table></figure><p>方法引用通过方法的名字指向一个方法，使语言构造更简洁，减少冗余代码。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul><li>引用方法</li><li>引用构造方法</li><li>引用数组</li></ul><h3 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; comparator = Math::max;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> comparator.compare(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 返回 2</span></span><br></pre></td></tr></table></figure><h3 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">lowerCase</span> <span class="operator">=</span> str::toLowerCase;</span><br><span class="line"><span class="comment">// 返回 &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;String&gt; supplier = String::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> supplier.get();</span><br><span class="line"><span class="comment">// 返回一个空字符串</span></span><br></pre></td></tr></table></figure><h3 id="数组构造方法引用"><a href="#数组构造方法引用" class="headerlink" title="数组构造方法引用"></a>数组构造方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, String[]&gt; function = String[]::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String[] array = function.apply(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 返回 5 个空字符串的数组</span></span><br></pre></td></tr></table></figure><!--rehype:className=wrap-text--><h3 id="对象中的方法引用"><a href="#对象中的方法引用" class="headerlink" title="对象中的方法引用"></a>对象中的方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">someStr</span> <span class="operator">=</span> <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">lowerCase</span> <span class="operator">=</span> someStr::toLowerCase;</span><br><span class="line"><span class="comment">// 返回 &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="对象中的静态方法引用"><a href="#对象中的静态方法引用" class="headerlink" title="对象中的静态方法引用"></a>对象中的静态方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SomeClass</span> <span class="variable">someObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SomeClass</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> someObject::staticMethod;</span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br></pre></td></tr></table></figure><h2 id="杂项-Misc"><a href="#杂项-Misc" class="headerlink" title="杂项 Misc"></a>杂项 Misc</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><!--rehype:wrap-class=col-span-2--><table><thead><tr><th>修饰符</th><th>Class</th><th>Package</th><th>Subclass</th><th>World</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td><em>N</em></td></tr><tr><td>no modifier</td><td>Y</td><td>Y</td><td><em>N</em></td><td><em>N</em></td></tr><tr><td>private</td><td>Y</td><td><em>N</em></td><td><em>N</em></td><td><em>N</em></td></tr></tbody></table><!--rehype:className=show-header--><h3 id="常用表达"><a href="#常用表达" class="headerlink" title="常用表达"></a>常用表达</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;I am learning Java&quot;</span>;</span><br><span class="line"><span class="comment">// 删除所有空格</span></span><br><span class="line">text.replaceAll(<span class="string">&quot;\\s+&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 拆分字符串</span></span><br><span class="line">text.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">text.split(Pattern.quote(<span class="string">&quot;|&quot;</span>));</span><br></pre></td></tr></table></figure><p>查看: <a href="./regex.md#java-%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">Regex in java</a></p><h3 id="注释-Comment"><a href="#注释-Comment" class="headerlink" title="注释 Comment"></a>注释 Comment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是单行注释！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">而我是一个</span></span><br><span class="line"><span class="comment">多行注释！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 这个</span></span><br><span class="line"><span class="comment">  * 是</span></span><br><span class="line"><span class="comment">  * 文档</span></span><br><span class="line"><span class="comment">  * 注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><!--rehype:wrap-class=col-span-2--><ul><li>abstract</li><li>continue</li><li>for</li><li>new</li><li>switch</li><li>assert</li><li>default</li><li>goto</li><li>package</li><li>synchronized</li><li>boolean</li><li>do</li><li>if</li><li>private</li><li>this</li><li>break</li><li>double</li><li>implements</li><li>protected</li><li>throw</li><li>byte</li><li>else</li><li>import</li><li>public</li><li>throws</li><li>case</li><li>enum</li><li>instanceof</li><li>return</li><li>transient</li><li>catch</li><li>extends</li><li>int</li><li>short</li><li>try</li><li>char</li><li>final</li><li>interface</li><li>static</li><li>void</li><li>class</li><li>finally</li><li>long</li><li>strictfp</li><li>volatile</li><li>const</li><li>float</li><li>native</li><li>super</li><li>while</li></ul><!--rehype:className=cols-7 style-none--><h3 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h3><!--rehype:wrap-class=row-span-2--><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>Math.max(a,b)</code></td><td align="left"><code>a</code> 和 <code>b</code> 的最大值</td></tr><tr><td align="left"><code>Math.min(a,b)</code></td><td align="left"><code>a</code> 和 <code>b</code> 的最小值</td></tr><tr><td align="left"><code>Math.abs(a)</code></td><td align="left">绝对值</td></tr><tr><td align="left"><code>Math.sqrt(a)</code></td><td align="left"><code>a</code> 的平方根</td></tr><tr><td align="left"><code>Math.pow(a,b)</code></td><td align="left"><code>b</code> 的幂</td></tr><tr><td align="left"><code>Math.round(a)</code></td><td align="left">最接近的整数</td></tr><tr><td align="left"><code>Math.sin(ang)</code></td><td align="left">正弦</td></tr><tr><td align="left"><code>Math.cos(ang)</code></td><td align="left"><code>ang</code> 的余弦</td></tr><tr><td align="left"><code>Math.tan(ang)</code></td><td align="left"><code>ang</code> 的切线</td></tr><tr><td align="left"><code>Math.asin(ang)</code></td><td align="left"><code>ang</code> 的反正弦</td></tr><tr><td align="left"><code>Math.log(a)</code></td><td align="left"><code>a</code> 的自然对数</td></tr><tr><td align="left"><code>Math.toDegrees(rad)</code></td><td align="left">以度为单位的角度弧度</td></tr><tr><td align="left"><code>Math.toRadians(deg)</code></td><td align="left">以弧度为单位的角度度</td></tr></tbody></table><h3 id="异常-Try-Catch-Finally"><a href="#异常-Try-Catch-Finally" class="headerlink" title="异常 Try&#x2F;Catch&#x2F;Finally"></a>异常 Try&#x2F;Catch&#x2F;Finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;always printed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="util工具类"><a href="#util工具类" class="headerlink" title="util工具类"></a>util工具类</h3><!--rehype:wrap-class=row-span-2--><ul><li><code>ArrayDeque</code>: 可调整大小的数组双端队列，实现了Deque接口</li><li><code>Arrays</code>: 提供静态工厂，允许将数组视为列表</li><li><code>Collections</code>: 包含操作集合或返回集合的静态方法</li><li><code>Date</code>: 表示特定时间瞬间，精度为毫秒</li><li><code>Dictionary</code>: 抽象父类，可用于键值对映射，例如Hashtable</li><li><code>EnumMap</code>: 专门用于枚举键的Map实现</li><li><code>EnumSet</code>: 专门用于枚举键的Set实现</li><li><code>Formatter</code>: 提供对布局、对齐、数字、字符串和日期&#x2F;时间数据的格式化支持，以及特定于语言环境的输出</li><li><code>SecureRandom</code>: 生成安全的伪随机数流的实例</li><li><code>UUID</code>: 表示不可变的通用唯一标识符</li><li><code>Vector</code>: 实现了可增长的对象数组</li><li><code>LocalDate</code>: 表示无时区的日期，仅包含年月日，不可变且线程安全，适用于Java 8及更高版本</li><li><code>LocalTime</code>: 表示无时区的时间，仅包含时分秒，不可变且线程安全，适用于Java 8及更高版本</li><li><code>LocalDateTime</code>: 表示无时区的日期时间，包含年月日时分秒，不可变且线程安全，适用于Java 8及更高版本</li></ul><h3 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算出现频率</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">frequency</span> <span class="operator">=</span> Collections</span><br><span class="line">      .frequency(list, <span class="number">2</span>); <span class="comment">// frequency = 2</span></span><br></pre></td></tr></table></figure><h2 id="操纵数据库"><a href="#操纵数据库" class="headerlink" title="操纵数据库"></a>操纵数据库</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT 1 as a, &#x27;2&#x27; as b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">preparedSql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_user WHERE id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">sm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 1.注册驱动</span></span><br><span class="line">  Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">  <span class="comment">// 驱动找不到</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.建立连接</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password)) &#123;</span><br><span class="line"></span><br><span class="line">  conn = connection;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.创建Statement对象</span></span><br><span class="line">  <span class="keyword">try</span> (<span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement()) &#123;</span><br><span class="line"></span><br><span class="line">    sm = statement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.执行SQL语句</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql)) &#123;</span><br><span class="line"></span><br><span class="line">      rs = resultSet;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.处理结果集</span></span><br><span class="line">      <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        <span class="comment">// 按照列名取值</span></span><br><span class="line">        System.out.println(resultSet.getLong(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        <span class="comment">// 按照索引取值</span></span><br><span class="line">        System.out.println(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.创建PreparedStatement对象</span></span><br><span class="line">  <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(preparedSql)) &#123;</span><br><span class="line"></span><br><span class="line">    sm = preparedStatement;</span><br><span class="line"></span><br><span class="line">    preparedStatement.setLong(<span class="number">1</span>, <span class="number">1_000L</span>);</span><br><span class="line">    <span class="comment">// 4.执行SQL语句</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery()) &#123;</span><br><span class="line"></span><br><span class="line">      rs = resultSet;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.处理结果集</span></span><br><span class="line">      <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        System.out.println(resultSet.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  <span class="comment">// 数据库异常</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 6.关闭资源</span></span><br><span class="line">  <span class="comment">// 上面的try块里已经自动关闭，否则（JDK 7以前）按照以下顺序关闭</span></span><br><span class="line">  <span class="comment">// 先打开的后关闭，后打开的先关闭</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> != rs) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      rs.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> != sm) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      sm.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> != conn) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      conn.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 也可以直接工具类， 注意顺序</span></span><br><span class="line">  IOUtils.close(rs);</span><br><span class="line">  IOUtils.close(sm);</span><br><span class="line">  IOUtils.close(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDBC注册驱动"><a href="#JDBC注册驱动" class="headerlink" title="JDBC注册驱动"></a>JDBC注册驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">org</span>.postgresql.Driver());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持多个同时注册</span></span><br><span class="line">System.setProperty(<span class="string">&quot;jdbc.drivers&quot;</span>, <span class="string">&quot;com.mysql.cj.jdbc.Driver:org.postgresql.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://www.oracle.com/cn/java/">Java 官网</a> <em>(oracle.com&#x2F;cn&#x2F;java)</em></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-备忘清单&quot;&gt;&lt;a href=&quot;#Java-备忘清单&quot; class=&quot;headerlink&quot; title=&quot;Java 备忘清单&quot;&gt;&lt;/a&gt;Java 备忘清单&lt;/h1&gt;&lt;p&gt;该备忘单是针对 Java 初学者的速成课程，有助于复习 Java 语言的基本语法。&lt;</summary>
      
    
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/categories/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端编程" scheme="https://tdcqcx.github.io/tags/%E5%90%8E%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    
    <category term="java" scheme="https://tdcqcx.github.io/tags/java/"/>
    
  </entry>
  
</feed>
